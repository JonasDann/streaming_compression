-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_huffmanEncoderStatic_23 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    encodedOutStream_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    encodedOutStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    encodedOutStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    encodedOutStream_empty_n : IN STD_LOGIC;
    encodedOutStream_read : OUT STD_LOGIC;
    hufCodeStream_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    hufCodeStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    hufCodeStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    hufCodeStream_full_n : IN STD_LOGIC;
    hufCodeStream_write : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_huffmanEncoderStatic_23 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv20_98002 : STD_LOGIC_VECTOR (19 downto 0) := "10011000000000000010";
    constant ap_const_lv20_38000 : STD_LOGIC_VECTOR (19 downto 0) := "00111000000000000000";
    constant ap_const_lv20_B8000 : STD_LOGIC_VECTOR (19 downto 0) := "10111000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal encodedOutStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal hufCodeStream_blk_n : STD_LOGIC;
    signal nextEncodedValue_strobe_fu_101_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal nextEncodedValue_data_fu_109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal nextEncodedValue_data_reg_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_start : STD_LOGIC;
    signal grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_done : STD_LOGIC;
    signal grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_idle : STD_LOGIC;
    signal grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_ready : STD_LOGIC;
    signal grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_encodedOutStream_read : STD_LOGIC;
    signal grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_hufCodeStream_din : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_hufCodeStream_write : STD_LOGIC;
    signal grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal encodedOutStream_read_local : STD_LOGIC;
    signal hufCodeStream_din_local : STD_LOGIC_VECTOR (19 downto 0);
    signal hufCodeStream_write_local : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_huffmanEncoderStatic_23_Pipeline_huffman_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        encodedOutStream_dout : IN STD_LOGIC_VECTOR (32 downto 0);
        encodedOutStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        encodedOutStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        encodedOutStream_empty_n : IN STD_LOGIC;
        encodedOutStream_read : OUT STD_LOGIC;
        hufCodeStream_din : OUT STD_LOGIC_VECTOR (19 downto 0);
        hufCodeStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        hufCodeStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        hufCodeStream_full_n : IN STD_LOGIC;
        hufCodeStream_write : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72 : component gzipcMulticoreStreaming_huffmanEncoderStatic_23_Pipeline_huffman_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_start,
        ap_done => grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_done,
        ap_idle => grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_idle,
        ap_ready => grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_ready,
        encodedOutStream_dout => encodedOutStream_dout,
        encodedOutStream_num_data_valid => ap_const_lv3_0,
        encodedOutStream_fifo_cap => ap_const_lv3_0,
        encodedOutStream_empty_n => encodedOutStream_empty_n,
        encodedOutStream_read => grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_encodedOutStream_read,
        hufCodeStream_din => grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_hufCodeStream_din,
        hufCodeStream_num_data_valid => ap_const_lv3_0,
        hufCodeStream_fifo_cap => ap_const_lv3_0,
        hufCodeStream_full_n => hufCodeStream_full_n,
        hufCodeStream_write => grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_hufCodeStream_write,
        empty => nextEncodedValue_data_reg_116);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state2) and (nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_NS_fsm_state3))) then 
                    grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_ready = ap_const_logic_1)) then 
                    grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                nextEncodedValue_data_reg_116 <= nextEncodedValue_data_fu_109_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, hufCodeStream_full_n, ap_CS_fsm_state2, nextEncodedValue_strobe_fu_101_p3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state2, grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_done, ap_CS_fsm_state4, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2) and (nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state2) and (nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((hufCodeStream_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((hufCodeStream_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2)
    begin
        if ((ap_const_boolean_1 = ap_block_state2)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_done)
    begin
        if ((grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(hufCodeStream_full_n)
    begin
        if ((hufCodeStream_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(hufCodeStream_full_n)
    begin
        if ((hufCodeStream_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(encodedOutStream_empty_n, hufCodeStream_full_n, nextEncodedValue_strobe_fu_101_p3)
    begin
                ap_block_state2 <= ((encodedOutStream_empty_n = ap_const_logic_0) or ((nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_0) and (hufCodeStream_full_n = ap_const_logic_0)) or ((nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_1) and (hufCodeStream_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, nextEncodedValue_strobe_fu_101_p3, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    encodedOutStream_blk_n_assign_proc : process(encodedOutStream_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            encodedOutStream_blk_n <= encodedOutStream_empty_n;
        else 
            encodedOutStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    encodedOutStream_read_assign_proc : process(grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_encodedOutStream_read, ap_CS_fsm_state4, encodedOutStream_read_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            encodedOutStream_read <= grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_encodedOutStream_read;
        else 
            encodedOutStream_read <= encodedOutStream_read_local;
        end if; 
    end process;


    encodedOutStream_read_local_assign_proc : process(ap_CS_fsm_state2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            encodedOutStream_read_local <= ap_const_logic_1;
        else 
            encodedOutStream_read_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_start <= grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_ap_start_reg;

    hufCodeStream_blk_n_assign_proc : process(hufCodeStream_full_n, ap_CS_fsm_state2, nextEncodedValue_strobe_fu_101_p3, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            hufCodeStream_blk_n <= hufCodeStream_full_n;
        else 
            hufCodeStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hufCodeStream_din_assign_proc : process(grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_hufCodeStream_din, ap_CS_fsm_state4, hufCodeStream_din_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hufCodeStream_din <= grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_hufCodeStream_din;
        else 
            hufCodeStream_din <= hufCodeStream_din_local;
        end if; 
    end process;


    hufCodeStream_din_local_assign_proc : process(hufCodeStream_full_n, ap_CS_fsm_state2, nextEncodedValue_strobe_fu_101_p3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state2)
    begin
        if (((hufCodeStream_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            hufCodeStream_din_local <= ap_const_lv20_B8000;
        elsif ((((ap_const_boolean_0 = ap_block_state2) and (nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((hufCodeStream_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            hufCodeStream_din_local <= ap_const_lv20_38000;
        elsif (((ap_const_boolean_0 = ap_block_state2) and (nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            hufCodeStream_din_local <= ap_const_lv20_98002;
        else 
            hufCodeStream_din_local <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hufCodeStream_write_assign_proc : process(grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_hufCodeStream_write, ap_CS_fsm_state4, hufCodeStream_write_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            hufCodeStream_write <= grp_huffmanEncoderStatic_23_Pipeline_huffman_loop_fu_72_hufCodeStream_write;
        else 
            hufCodeStream_write <= hufCodeStream_write_local;
        end if; 
    end process;


    hufCodeStream_write_local_assign_proc : process(hufCodeStream_full_n, ap_CS_fsm_state2, nextEncodedValue_strobe_fu_101_p3, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_block_state2)
    begin
        if ((((ap_const_boolean_0 = ap_block_state2) and (nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_state2) and (nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((hufCodeStream_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((hufCodeStream_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            hufCodeStream_write_local <= ap_const_logic_1;
        else 
            hufCodeStream_write_local <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, nextEncodedValue_strobe_fu_101_p3, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (nextEncodedValue_strobe_fu_101_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    nextEncodedValue_data_fu_109_p1 <= encodedOutStream_dout(32 - 1 downto 0);
    nextEncodedValue_strobe_fu_101_p3 <= encodedOutStream_dout(32 downto 32);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
