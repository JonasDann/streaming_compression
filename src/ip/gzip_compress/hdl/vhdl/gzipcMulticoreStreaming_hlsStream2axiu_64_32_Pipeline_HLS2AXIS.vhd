-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_hlsStream2axiu_64_32_Pipeline_HLS2AXIS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outStream_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    outStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outStream_empty_n : IN STD_LOGIC;
    outStream_read : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC;
    t1_last_ph : IN STD_LOGIC_VECTOR (0 downto 0);
    cntr : IN STD_LOGIC_VECTOR (7 downto 0);
    empty : IN STD_LOGIC_VECTOR (63 downto 0);
    strb_1_ph : IN STD_LOGIC_VECTOR (3 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of gzipcMulticoreStreaming_hlsStream2axiu_64_32_Pipeline_HLS2AXIS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln116_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln116_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal outStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal outStream_TDATA_blk_n : STD_LOGIC;
    signal t1_last_reg_171 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal strb_1_reg_421 : STD_LOGIC_VECTOR (3 downto 0);
    signal inVal_strobe_reg_430 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmpVal_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmpVal_reg_440 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_289_reg_445 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_290_reg_450 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_291_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal outSize_fu_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outSize_1_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal strb_fu_106 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_sig_allocacmp_strb_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal t1_data_fu_110 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t1_strb_fu_114 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal cntr_1_fu_343_p9 : STD_LOGIC_VECTOR (7 downto 0);
    signal t1_user_fu_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal t1_user_1_fu_299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal outStream_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln118_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln121_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_6_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_5_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_4_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_3_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_2_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln132_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_295 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if;
            end if; 
        end if;
    end process;

    outSize_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    outSize_fu_102 <= ap_const_lv32_0;
                elsif (((icmp_ln116_reg_426 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    outSize_fu_102 <= outSize_1_fu_281_p2;
                end if;
            end if; 
        end if;
    end process;

    strb_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln116_fu_210_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    strb_fu_106 <= outStream_dout(67 downto 64);
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    strb_fu_106 <= strb_1_ph;
                end if;
            end if; 
        end if;
    end process;

    t1_data_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    t1_data_fu_110 <= empty;
                elsif (((icmp_ln116_reg_426 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    t1_data_fu_110 <= tmpVal_reg_440;
                end if;
            end if; 
        end if;
    end process;

    t1_last_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    t1_last_reg_171 <= t1_last_ph;
                elsif ((ap_const_boolean_1 = ap_condition_295)) then 
                    t1_last_reg_171 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    t1_strb_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    t1_strb_fu_114 <= cntr;
                elsif (((icmp_ln116_reg_426 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    t1_strb_fu_114 <= cntr_1_fu_343_p9;
                end if;
            end if; 
        end if;
    end process;

    t1_user_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    t1_user_fu_118 <= ap_const_lv32_0;
                elsif (((icmp_ln116_reg_426 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    t1_user_fu_118 <= t1_user_1_fu_299_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln116_reg_426 <= icmp_ln116_fu_210_p2;
                inVal_strobe_reg_430 <= outStream_dout(67 downto 64);
                strb_1_reg_421 <= ap_sig_allocacmp_strb_1;
                tmpVal_reg_440 <= tmpVal_fu_226_p1;
                tmp_289_reg_445 <= outStream_dout(67 downto 65);
                tmp_290_reg_450 <= outStream_dout(67 downto 66);
                tmp_291_reg_455 <= outStream_dout(67 downto 67);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state2_io, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_block_state2_io, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1))) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(outStream_empty_n, icmp_ln116_fu_210_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((icmp_ln116_fu_210_p2 = ap_const_lv1_0) and (outStream_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(outStream_TREADY, icmp_ln116_reg_426)
    begin
                ap_block_state2_io <= ((icmp_ln116_reg_426 = ap_const_lv1_0) and (outStream_TREADY = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(outStream_TREADY, icmp_ln116_reg_426)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln116_reg_426 = ap_const_lv1_0) and (outStream_TREADY = ap_const_logic_0));
    end process;


    ap_condition_295_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln116_reg_426, ap_block_pp0_stage0_11001)
    begin
                ap_condition_295 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln116_reg_426 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln116_fu_210_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln116_fu_210_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_strb_1_assign_proc : process(ap_CS_fsm_pp0_stage0, strb_1_ph, ap_block_pp0_stage0, ap_loop_init, strb_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_strb_1 <= strb_1_ph;
        else 
            ap_sig_allocacmp_strb_1 <= strb_fu_106;
        end if; 
    end process;

    cntr_1_fu_343_p9 <= (((((((tmp_291_reg_455 & icmp_ln132_6_fu_338_p2) & icmp_ln132_5_fu_333_p2) & icmp_ln132_4_fu_328_p2) & icmp_ln132_3_fu_323_p2) & icmp_ln132_2_fu_318_p2) & icmp_ln132_1_fu_313_p2) & icmp_ln132_fu_308_p2);
    icmp_ln116_fu_210_p2 <= "1" when (ap_sig_allocacmp_strb_1 = ap_const_lv4_0) else "0";
    icmp_ln121_fu_287_p2 <= "1" when (inVal_strobe_reg_430 = ap_const_lv4_0) else "0";
    icmp_ln132_1_fu_313_p2 <= "0" when (tmp_289_reg_445 = ap_const_lv3_0) else "1";
    icmp_ln132_2_fu_318_p2 <= "1" when (unsigned(inVal_strobe_reg_430) > unsigned(ap_const_lv4_2)) else "0";
    icmp_ln132_3_fu_323_p2 <= "0" when (tmp_290_reg_450 = ap_const_lv2_0) else "1";
    icmp_ln132_4_fu_328_p2 <= "1" when (unsigned(inVal_strobe_reg_430) > unsigned(ap_const_lv4_4)) else "0";
    icmp_ln132_5_fu_333_p2 <= "1" when (unsigned(inVal_strobe_reg_430) > unsigned(ap_const_lv4_5)) else "0";
    icmp_ln132_6_fu_338_p2 <= "1" when (unsigned(inVal_strobe_reg_430) > unsigned(ap_const_lv4_6)) else "0";
    icmp_ln132_fu_308_p2 <= "0" when (inVal_strobe_reg_430 = ap_const_lv4_0) else "1";
    outSize_1_fu_281_p2 <= std_logic_vector(unsigned(zext_ln118_fu_278_p1) + unsigned(outSize_fu_102));
    outStream_TDATA <= t1_data_fu_110;

    outStream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, outStream_TREADY, icmp_ln116_reg_426, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln116_reg_426 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outStream_TDATA_blk_n <= outStream_TREADY;
        else 
            outStream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_TKEEP <= t1_strb_fu_114;
    outStream_TLAST <= (t1_last_reg_171 or icmp_ln121_fu_287_p2);
    outStream_TSTRB <= t1_strb_fu_114;
    outStream_TUSER <= 
        outSize_1_fu_281_p2 when (icmp_ln121_fu_287_p2(0) = '1') else 
        t1_user_fu_118;

    outStream_TVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln116_reg_426, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln116_reg_426 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outStream_TVALID <= ap_const_logic_1;
        else 
            outStream_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    outStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, outStream_empty_n, icmp_ln116_fu_210_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln116_fu_210_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outStream_blk_n <= outStream_empty_n;
        else 
            outStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_read <= outStream_read_local;

    outStream_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln116_fu_210_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln116_fu_210_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outStream_read_local <= ap_const_logic_1;
        else 
            outStream_read_local <= ap_const_logic_0;
        end if; 
    end process;

    t1_user_1_fu_299_p3 <= 
        outSize_1_fu_281_p2 when (icmp_ln121_fu_287_p2(0) = '1') else 
        t1_user_fu_118;
    tmpVal_fu_226_p1 <= outStream_dout(64 - 1 downto 0);
    zext_ln118_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(strb_1_reg_421),32));
end behav;
