-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_bitPackingStatic_27_Pipeline_bitpack is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hufCodeStream_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    hufCodeStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    hufCodeStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    hufCodeStream_empty_n : IN STD_LOGIC;
    hufCodeStream_read : OUT STD_LOGIC;
    huffStream_1_din : OUT STD_LOGIC_VECTOR (17 downto 0);
    huffStream_1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    huffStream_1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    huffStream_1_full_n : IN STD_LOGIC;
    huffStream_1_write : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (19 downto 0);
    outValue_data : IN STD_LOGIC_VECTOR (7 downto 0);
    outValue_data_156_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    outValue_data_156_out_ap_vld : OUT STD_LOGIC;
    outValue_data_155_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    outValue_data_155_out_ap_vld : OUT STD_LOGIC;
    localBits_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    localBits_out_ap_vld : OUT STD_LOGIC;
    last_block_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    last_block_out_ap_vld : OUT STD_LOGIC;
    localBits_idx_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    localBits_idx_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_bitPackingStatic_27_Pipeline_bitpack is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal inValue_strobe_fu_215_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln57_reg_582 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal hufCodeStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal huffStream_1_blk_n : STD_LOGIC;
    signal last_block_reg_174 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550 : STD_LOGIC_VECTOR (19 downto 0);
    signal inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550_pp0_iter1_reg : STD_LOGIC_VECTOR (19 downto 0);
    signal inValue_strobe_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal inValue_strobe_reg_556_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_fu_274_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln54_reg_568 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln54_7_fu_278_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln54_7_reg_576 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln57_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_last_block_phi_fu_178_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal localBits_idx_fu_94 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal localBits_idx_34_fu_304_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal localBits_idx_33_fu_282_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal localBits_fu_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal zext_ln59_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal localBits_14_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load : STD_LOGIC_VECTOR (19 downto 0);
    signal outValue_data_110_fu_106 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal outValue_data_112_fu_448_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal outValue_data_111_fu_110 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal hufCodeStream_read_local : STD_LOGIC;
    signal tmp_s_fu_466_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal huffStream_1_write_local : STD_LOGIC;
    signal tmp_227_fu_231_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln54_13_fu_244_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln54_fu_252_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln54_fu_248_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln54_fu_258_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln54_6_fu_262_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln53_fu_240_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_315_fu_288_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln50_fu_323_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln54_fu_330_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln54_fu_335_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln54_20_fu_345_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln54_19_fu_340_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln54_13_fu_351_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln54_12_fu_326_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln54_21_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln54_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_314_fu_375_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln54_22_fu_361_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln54_23_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln54_7_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln54_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln54_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln54_14_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln54_21_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln54_13_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln54_14_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal localBits_15_fu_434_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln65_fu_462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((inValue_strobe_fu_215_p3 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1))) then 
                    inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102 <= hufCodeStream_dout;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102 <= empty;
                end if;
            end if; 
        end if;
    end process;

    last_block_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (inValue_strobe_reg_556_pp0_iter1_reg = ap_const_lv1_1))) then 
                last_block_reg_174 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                last_block_reg_174 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    localBits_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    localBits_fu_98 <= ap_const_lv32_0;
                elsif (((icmp_ln57_reg_582 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    localBits_fu_98 <= localBits_14_fu_428_p2;
                elsif (((icmp_ln57_reg_582 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    localBits_fu_98 <= zext_ln59_fu_444_p1;
                end if;
            end if; 
        end if;
    end process;

    localBits_idx_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    localBits_idx_fu_94 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln57_fu_298_p2 = ap_const_lv1_1))) then 
                    localBits_idx_fu_94 <= localBits_idx_33_fu_282_p2;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln57_fu_298_p2 = ap_const_lv1_0))) then 
                    localBits_idx_fu_94 <= localBits_idx_34_fu_304_p2;
                end if;
            end if; 
        end if;
    end process;

    outValue_data_110_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    outValue_data_110_fu_106 <= ap_const_lv8_0;
                elsif (((icmp_ln57_reg_582 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    outValue_data_110_fu_106 <= outValue_data_112_fu_448_p1;
                end if;
            end if; 
        end if;
    end process;

    outValue_data_111_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    outValue_data_111_fu_110 <= outValue_data;
                elsif (((icmp_ln57_reg_582 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    outValue_data_111_fu_110 <= localBits_14_fu_428_p2(15 downto 8);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln54_reg_560 <= icmp_ln54_fu_268_p2;
                icmp_ln57_reg_582 <= icmp_ln57_fu_298_p2;
                inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550 <= ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load;
                inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550_pp0_iter1_reg <= inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550;
                inValue_strobe_reg_556 <= ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load(19 downto 19);
                inValue_strobe_reg_556_pp0_iter1_reg <= inValue_strobe_reg_556;
                trunc_ln54_7_reg_576 <= trunc_ln54_7_fu_278_p1;
                trunc_ln54_reg_568 <= trunc_ln54_fu_274_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln54_6_fu_262_p2 <= std_logic_vector(unsigned(zext_ln54_fu_248_p1) + unsigned(sext_ln54_fu_258_p1));
    add_ln54_fu_252_p2 <= std_logic_vector(unsigned(zext_ln54_13_fu_244_p1) + unsigned(ap_const_lv5_1F));
    and_ln54_13_fu_416_p2 <= (xor_ln54_14_fu_410_p2 and localBits_fu_98);
    and_ln54_14_fu_422_p2 <= (select_ln54_21_fu_385_p3 and and_ln54_fu_404_p2);
    and_ln54_fu_404_p2 <= (shl_ln54_7_fu_392_p2 and lshr_ln54_fu_398_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state1_pp0_stage0_iter0, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state1_pp0_stage0_iter0, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state1_pp0_stage0_iter0, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(hufCodeStream_empty_n, inValue_strobe_fu_215_p3)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((inValue_strobe_fu_215_p3 = ap_const_lv1_1) and (hufCodeStream_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(huffStream_1_full_n, icmp_ln57_reg_582)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((icmp_ln57_reg_582 = ap_const_lv1_0) and (huffStream_1_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, inValue_strobe_fu_215_p3, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (inValue_strobe_fu_215_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_last_block_phi_fu_178_p4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, last_block_reg_174, inValue_strobe_reg_556_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (inValue_strobe_reg_556_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_phi_mux_last_block_phi_fu_178_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_last_block_phi_fu_178_p4 <= last_block_reg_174;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load_assign_proc : process(ap_CS_fsm_pp0_stage0, empty, ap_block_pp0_stage0, ap_loop_init, inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load <= empty;
        else 
            ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load <= inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102;
        end if; 
    end process;


    hufCodeStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, hufCodeStream_empty_n, inValue_strobe_fu_215_p3, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (inValue_strobe_fu_215_p3 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hufCodeStream_blk_n <= hufCodeStream_empty_n;
        else 
            hufCodeStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hufCodeStream_read <= hufCodeStream_read_local;

    hufCodeStream_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, inValue_strobe_fu_215_p3, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (inValue_strobe_fu_215_p3 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hufCodeStream_read_local <= ap_const_logic_1;
        else 
            hufCodeStream_read_local <= ap_const_logic_0;
        end if; 
    end process;


    huffStream_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, huffStream_1_full_n, icmp_ln57_reg_582, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln57_reg_582 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            huffStream_1_blk_n <= huffStream_1_full_n;
        else 
            huffStream_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    huffStream_1_din <= tmp_s_fu_466_p3;
    huffStream_1_write <= huffStream_1_write_local;

    huffStream_1_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln57_reg_582, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln57_reg_582 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            huffStream_1_write_local <= ap_const_logic_1;
        else 
            huffStream_1_write_local <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln54_fu_268_p2 <= "1" when (unsigned(zext_ln54_fu_248_p1) > unsigned(add_ln54_6_fu_262_p2)) else "0";
    icmp_ln57_fu_298_p2 <= "1" when (tmp_315_fu_288_p4 = ap_const_lv4_0) else "0";
    inValue_strobe_fu_215_p3 <= ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load(19 downto 19);
    last_block_out <= ap_phi_mux_last_block_phi_fu_178_p4;

    last_block_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, inValue_strobe_reg_556, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (inValue_strobe_reg_556 = ap_const_lv1_0))) then 
            last_block_out_ap_vld <= ap_const_logic_1;
        else 
            last_block_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    localBits_14_fu_428_p2 <= (and_ln54_14_fu_422_p2 or and_ln54_13_fu_416_p2);
    localBits_15_fu_434_p4 <= localBits_14_fu_428_p2(31 downto 16);
    localBits_idx_33_fu_282_p2 <= std_logic_vector(unsigned(localBits_idx_fu_94) + unsigned(zext_ln53_fu_240_p1));
    localBits_idx_34_fu_304_p2 <= std_logic_vector(unsigned(localBits_idx_33_fu_282_p2) + unsigned(ap_const_lv8_F0));
    localBits_idx_out <= localBits_idx_fu_94;

    localBits_idx_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, inValue_strobe_reg_556, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (inValue_strobe_reg_556 = ap_const_lv1_0))) then 
            localBits_idx_out_ap_vld <= ap_const_logic_1;
        else 
            localBits_idx_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    localBits_out <= localBits_fu_98;

    localBits_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, inValue_strobe_reg_556, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (inValue_strobe_reg_556 = ap_const_lv1_0))) then 
            localBits_out_ap_vld <= ap_const_logic_1;
        else 
            localBits_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln54_fu_398_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln54_23_fu_365_p1(31-1 downto 0)))));
    outValue_data_112_fu_448_p1 <= localBits_14_fu_428_p2(8 - 1 downto 0);
    outValue_data_155_out <= outValue_data_110_fu_106;

    outValue_data_155_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, inValue_strobe_reg_556, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (inValue_strobe_reg_556 = ap_const_lv1_0))) then 
            outValue_data_155_out_ap_vld <= ap_const_logic_1;
        else 
            outValue_data_155_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outValue_data_156_out <= outValue_data_111_fu_110;

    outValue_data_156_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, inValue_strobe_reg_556, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (inValue_strobe_reg_556 = ap_const_lv1_0))) then 
            outValue_data_156_out_ap_vld <= ap_const_logic_1;
        else 
            outValue_data_156_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln54_19_fu_340_p3 <= 
        trunc_ln54_7_reg_576 when (icmp_ln54_reg_560(0) = '1') else 
        trunc_ln54_reg_568;
    select_ln54_20_fu_345_p3 <= 
        xor_ln54_fu_330_p2 when (icmp_ln54_reg_560(0) = '1') else 
        trunc_ln54_reg_568;
    select_ln54_21_fu_385_p3 <= 
        tmp_314_fu_375_p4 when (icmp_ln54_reg_560(0) = '1') else 
        shl_ln54_fu_369_p2;
    select_ln54_fu_335_p3 <= 
        trunc_ln54_reg_568 when (icmp_ln54_reg_560(0) = '1') else 
        trunc_ln54_7_reg_576;
        sext_ln54_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln54_fu_252_p2),10));

    shl_ln54_7_fu_392_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln54_22_fu_361_p1(31-1 downto 0)))));
    shl_ln54_fu_369_p2 <= std_logic_vector(shift_left(unsigned(zext_ln54_12_fu_326_p1),to_integer(unsigned('0' & zext_ln54_21_fu_357_p1(31-1 downto 0)))));
    tmp_227_fu_231_p4 <= inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550(18 downto 15);
    
    tmp_314_fu_375_p4_proc : process(shl_ln54_fu_369_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_314_fu_375_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := shl_ln54_fu_369_p2;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_314_fu_375_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_314_fu_375_p4_i) := shl_ln54_fu_369_p2(32-1-tmp_314_fu_375_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_314_fu_375_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_315_fu_288_p4 <= localBits_idx_33_fu_282_p2(7 downto 4);
    tmp_s_fu_466_p3 <= (ap_const_lv2_2 & trunc_ln65_fu_462_p1);
    trunc_ln50_fu_323_p1 <= inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550_pp0_iter1_reg(15 - 1 downto 0);
    trunc_ln54_7_fu_278_p1 <= add_ln54_6_fu_262_p2(5 - 1 downto 0);
    trunc_ln54_fu_274_p1 <= localBits_idx_fu_94(5 - 1 downto 0);
    trunc_ln65_fu_462_p1 <= localBits_14_fu_428_p2(16 - 1 downto 0);
    xor_ln54_13_fu_351_p2 <= (select_ln54_fu_335_p3 xor ap_const_lv5_1F);
    xor_ln54_14_fu_410_p2 <= (ap_const_lv32_FFFFFFFF xor and_ln54_fu_404_p2);
    xor_ln54_fu_330_p2 <= (trunc_ln54_reg_568 xor ap_const_lv5_1F);
    zext_ln53_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_227_fu_231_p4),8));
    zext_ln54_12_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln50_fu_323_p1),32));
    zext_ln54_13_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_227_fu_231_p4),5));
    zext_ln54_21_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_20_fu_345_p3),32));
    zext_ln54_22_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_19_fu_340_p3),32));
    zext_ln54_23_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_13_fu_351_p2),32));
    zext_ln54_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(localBits_idx_fu_94),10));
    zext_ln59_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(localBits_15_fu_434_p4),32));
end behav;
