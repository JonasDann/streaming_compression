-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity gzipcMulticoreStreaming_huffmanEncoderStatic_23_Pipeline_huffman_loop_length_code52_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 5; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 259
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of gzipcMulticoreStreaming_huffmanEncoderStatic_23_Pipeline_huffman_loop_length_code52_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00000", 1 => "00000", 2 => "00000", 3 => "00000", 
    4 => "00001", 5 => "00010", 6 => "00011", 7 => "00100", 
    8 => "00101", 9 => "00110", 10 => "00111", 11 => "01000", 
    12 => "01000", 13 => "01001", 14 => "01001", 15 => "01010", 
    16 => "01010", 17 => "01011", 18 => "01011", 19 => "01100", 
    20 => "01100", 21 => "01100", 22 => "01100", 23 => "01101", 
    24 => "01101", 25 => "01101", 26 => "01101", 27 => "01110", 
    28 => "01110", 29 => "01110", 30 => "01110", 31 => "01111", 
    32 => "01111", 33 => "01111", 34 => "01111", 35 => "10000", 
    36 => "10000", 37 => "10000", 38 => "10000", 39 => "10000", 
    40 => "10000", 41 => "10000", 42 => "10000", 43 => "10001", 
    44 => "10001", 45 => "10001", 46 => "10001", 47 => "10001", 
    48 => "10001", 49 => "10001", 50 => "10001", 51 => "10010", 
    52 => "10010", 53 => "10010", 54 => "10010", 55 => "10010", 
    56 => "10010", 57 => "10010", 58 => "10010", 59 => "10011", 
    60 => "10011", 61 => "10011", 62 => "10011", 63 => "10011", 
    64 => "10011", 65 => "10011", 66 => "10011", 67 => "10100", 
    68 => "10100", 69 => "10100", 70 => "10100", 71 => "10100", 
    72 => "10100", 73 => "10100", 74 => "10100", 75 => "10100", 
    76 => "10100", 77 => "10100", 78 => "10100", 79 => "10100", 
    80 => "10100", 81 => "10100", 82 => "10100", 83 => "10101", 
    84 => "10101", 85 => "10101", 86 => "10101", 87 => "10101", 
    88 => "10101", 89 => "10101", 90 => "10101", 91 => "10101", 
    92 => "10101", 93 => "10101", 94 => "10101", 95 => "10101", 
    96 => "10101", 97 => "10101", 98 => "10101", 99 => "10110", 
    100 => "10110", 101 => "10110", 102 => "10110", 103 => "10110", 
    104 => "10110", 105 => "10110", 106 => "10110", 107 => "10110", 
    108 => "10110", 109 => "10110", 110 => "10110", 111 => "10110", 
    112 => "10110", 113 => "10110", 114 => "10110", 115 => "10111", 
    116 => "10111", 117 => "10111", 118 => "10111", 119 => "10111", 
    120 => "10111", 121 => "10111", 122 => "10111", 123 => "10111", 
    124 => "10111", 125 => "10111", 126 => "10111", 127 => "10111", 
    128 => "10111", 129 => "10111", 130 => "10111", 131 => "11000", 
    132 => "11000", 133 => "11000", 134 => "11000", 135 => "11000", 
    136 => "11000", 137 => "11000", 138 => "11000", 139 => "11000", 
    140 => "11000", 141 => "11000", 142 => "11000", 143 => "11000", 
    144 => "11000", 145 => "11000", 146 => "11000", 147 => "11000", 
    148 => "11000", 149 => "11000", 150 => "11000", 151 => "11000", 
    152 => "11000", 153 => "11000", 154 => "11000", 155 => "11000", 
    156 => "11000", 157 => "11000", 158 => "11000", 159 => "11000", 
    160 => "11000", 161 => "11000", 162 => "11000", 163 => "11001", 
    164 => "11001", 165 => "11001", 166 => "11001", 167 => "11001", 
    168 => "11001", 169 => "11001", 170 => "11001", 171 => "11001", 
    172 => "11001", 173 => "11001", 174 => "11001", 175 => "11001", 
    176 => "11001", 177 => "11001", 178 => "11001", 179 => "11001", 
    180 => "11001", 181 => "11001", 182 => "11001", 183 => "11001", 
    184 => "11001", 185 => "11001", 186 => "11001", 187 => "11001", 
    188 => "11001", 189 => "11001", 190 => "11001", 191 => "11001", 
    192 => "11001", 193 => "11001", 194 => "11001", 195 => "11010", 
    196 => "11010", 197 => "11010", 198 => "11010", 199 => "11010", 
    200 => "11010", 201 => "11010", 202 => "11010", 203 => "11010", 
    204 => "11010", 205 => "11010", 206 => "11010", 207 => "11010", 
    208 => "11010", 209 => "11010", 210 => "11010", 211 => "11010", 
    212 => "11010", 213 => "11010", 214 => "11010", 215 => "11010", 
    216 => "11010", 217 => "11010", 218 => "11010", 219 => "11010", 
    220 => "11010", 221 => "11010", 222 => "11010", 223 => "11010", 
    224 => "11010", 225 => "11010", 226 => "11010", 227 => "11011", 
    228 => "11011", 229 => "11011", 230 => "11011", 231 => "11011", 
    232 => "11011", 233 => "11011", 234 => "11011", 235 => "11011", 
    236 => "11011", 237 => "11011", 238 => "11011", 239 => "11011", 
    240 => "11011", 241 => "11011", 242 => "11011", 243 => "11011", 
    244 => "11011", 245 => "11011", 246 => "11011", 247 => "11011", 
    248 => "11011", 249 => "11011", 250 => "11011", 251 => "11011", 
    252 => "11011", 253 => "11011", 254 => "11011", 255 => "11011", 
    256 => "11011", 257 => "11011", 258 => "11011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

