-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming is
port (
    inStream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    inStream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_TUSER : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inStream_TVALID : IN STD_LOGIC;
    inStream_TREADY : OUT STD_LOGIC;
    outStream_TVALID : OUT STD_LOGIC;
    outStream_TREADY : IN STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gzipcMulticoreStreaming_gzipcMulticoreStreaming,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.406500,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=112,HLS_SYN_DSP=0,HLS_SYN_FF=44643,HLS_SYN_LUT=85274,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TUSER : STD_LOGIC_VECTOR (31 downto 0);
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_inStream_TREADY : STD_LOGIC;
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_start : STD_LOGIC;
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TVALID : STD_LOGIC;
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_done : STD_LOGIC;
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_ready : STD_LOGIC;
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_idle : STD_LOGIC;
    signal gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_continue : STD_LOGIC;

    component gzipcMulticoreStreaming_gzipMulticoreCompressAxiStream_0_4_8_32_s IS
    port (
        inStream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        inStream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        inStream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        inStream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        outStream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        outStream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        outStream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        outStream_TUSER : OUT STD_LOGIC_VECTOR (31 downto 0);
        outStream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        inStream_TVALID : IN STD_LOGIC;
        inStream_TREADY : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        outStream_TVALID : OUT STD_LOGIC;
        outStream_TREADY : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    gzipMulticoreCompressAxiStream_0_4_8_32_U0 : component gzipcMulticoreStreaming_gzipMulticoreCompressAxiStream_0_4_8_32_s
    port map (
        inStream_TDATA => inStream_TDATA,
        inStream_TKEEP => inStream_TKEEP,
        inStream_TSTRB => inStream_TSTRB,
        inStream_TLAST => inStream_TLAST,
        outStream_TDATA => gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TDATA,
        outStream_TKEEP => gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TKEEP,
        outStream_TSTRB => gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TSTRB,
        outStream_TUSER => gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TUSER,
        outStream_TLAST => gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TLAST,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        inStream_TVALID => inStream_TVALID,
        inStream_TREADY => gzipMulticoreCompressAxiStream_0_4_8_32_U0_inStream_TREADY,
        ap_start => gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_start,
        outStream_TVALID => gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TVALID,
        outStream_TREADY => outStream_TREADY,
        ap_done => gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_done,
        ap_ready => gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_ready,
        ap_idle => gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_idle,
        ap_continue => gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_continue);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_continue <= ap_const_logic_1;
    gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_start <= ap_const_logic_1;
    inStream_TREADY <= gzipMulticoreCompressAxiStream_0_4_8_32_U0_inStream_TREADY;
    outStream_TDATA <= gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TDATA;
    outStream_TKEEP <= gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TKEEP;
    outStream_TLAST <= gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TLAST;
    outStream_TSTRB <= gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TSTRB;
    outStream_TUSER <= gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TUSER;
    outStream_TVALID <= gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TVALID;
end behav;
