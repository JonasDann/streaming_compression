-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    huffStream_7_dout : IN STD_LOGIC_VECTOR (17 downto 0);
    huffStream_7_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    huffStream_7_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    huffStream_7_empty_n : IN STD_LOGIC;
    huffStream_7_read : OUT STD_LOGIC;
    mergeStream_7_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    mergeStream_7_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_7_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_7_full_n : IN STD_LOGIC;
    mergeStream_7_write : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv68_0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal huffStream_7_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_phi_mux_last_phi_fu_86_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal mergeStream_7_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal inStVal_data_fu_108_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal inStVal_data_reg_157 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal inStVal_data_23_reg_162 : STD_LOGIC_VECTOR (7 downto 0);
    signal inStVal_strobe_reg_167 : STD_LOGIC_VECTOR (1 downto 0);
    signal loop_continue_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loop_continue_reg_173 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_done : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_idle : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_ready : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_huffStream_7_read : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_din : STD_LOGIC_VECTOR (67 downto 0);
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_write : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o_ap_vld : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o_ap_vld : STD_LOGIC;
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_last_1_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_last_1_out_ap_vld : STD_LOGIC;
    signal last_reg_82 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outVal_fu_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal inVal_fu_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal huffStream_7_read_local : STD_LOGIC;
    signal mergeStream_7_write_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        huffStream_7_dout : IN STD_LOGIC_VECTOR (17 downto 0);
        huffStream_7_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        huffStream_7_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        huffStream_7_empty_n : IN STD_LOGIC;
        huffStream_7_read : OUT STD_LOGIC;
        mergeStream_7_din : OUT STD_LOGIC_VECTOR (67 downto 0);
        mergeStream_7_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        mergeStream_7_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
        mergeStream_7_full_n : IN STD_LOGIC;
        mergeStream_7_write : OUT STD_LOGIC;
        inStVal_data_44 : IN STD_LOGIC_VECTOR (7 downto 0);
        empty : IN STD_LOGIC_VECTOR (7 downto 0);
        inStVal_strobe : IN STD_LOGIC_VECTOR (1 downto 0);
        loop_continue : IN STD_LOGIC_VECTOR (0 downto 0);
        outVal_19_out_i : IN STD_LOGIC_VECTOR (63 downto 0);
        outVal_19_out_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        outVal_19_out_o_ap_vld : OUT STD_LOGIC;
        inVal_1_out_i : IN STD_LOGIC_VECTOR (15 downto 0);
        inVal_1_out_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        inVal_1_out_o_ap_vld : OUT STD_LOGIC;
        last_1_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        last_1_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93 : component gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start,
        ap_done => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_done,
        ap_idle => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_idle,
        ap_ready => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_ready,
        huffStream_7_dout => huffStream_7_dout,
        huffStream_7_num_data_valid => ap_const_lv3_0,
        huffStream_7_fifo_cap => ap_const_lv3_0,
        huffStream_7_empty_n => huffStream_7_empty_n,
        huffStream_7_read => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_huffStream_7_read,
        mergeStream_7_din => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_din,
        mergeStream_7_num_data_valid => ap_const_lv10_0,
        mergeStream_7_fifo_cap => ap_const_lv10_0,
        mergeStream_7_full_n => mergeStream_7_full_n,
        mergeStream_7_write => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_write,
        inStVal_data_44 => inStVal_data_23_reg_162,
        empty => inStVal_data_reg_157,
        inStVal_strobe => inStVal_strobe_reg_167,
        loop_continue => loop_continue_reg_173,
        outVal_19_out_i => outVal_fu_60,
        outVal_19_out_o => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o,
        outVal_19_out_o_ap_vld => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o_ap_vld,
        inVal_1_out_i => inVal_fu_56,
        inVal_1_out_o => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o,
        inVal_1_out_o_ap_vld => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o_ap_vld,
        last_1_out => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_last_1_out,
        last_1_out_ap_vld => grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_last_1_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state2) and (ap_phi_mux_last_phi_fu_86_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_ready = ap_const_logic_1)) then 
                    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    last_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((mergeStream_7_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                last_reg_82 <= grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_last_1_out;
            elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                last_reg_82 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                inStVal_data_23_reg_162 <= huffStream_7_dout(15 downto 8);
                inStVal_data_reg_157 <= inStVal_data_fu_108_p1;
                inStVal_strobe_reg_167 <= huffStream_7_dout(17 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o_ap_vld = ap_const_logic_1))) then
                inVal_fu_56 <= grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                loop_continue_reg_173 <= loop_continue_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o_ap_vld = ap_const_logic_1))) then
                outVal_fu_60 <= grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, mergeStream_7_full_n, ap_CS_fsm_state2, ap_phi_mux_last_phi_fu_86_p4, ap_CS_fsm_state5, ap_block_state2, grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_done, last_reg_82, ap_block_state1, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2) and (ap_phi_mux_last_phi_fu_86_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state2) and (last_reg_82 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((mergeStream_7_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2)
    begin
        if ((ap_const_boolean_1 = ap_block_state2)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_done)
    begin
        if ((grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(mergeStream_7_full_n)
    begin
        if ((mergeStream_7_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(huffStream_7_empty_n, last_reg_82)
    begin
                ap_block_state2 <= ((last_reg_82 = ap_const_lv1_0) and (huffStream_7_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, ap_phi_mux_last_phi_fu_86_p4, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (ap_phi_mux_last_phi_fu_86_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_last_phi_fu_86_p4 <= last_reg_82;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_phi_mux_last_phi_fu_86_p4, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (ap_phi_mux_last_phi_fu_86_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start <= grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg;

    huffStream_7_blk_n_assign_proc : process(huffStream_7_empty_n, ap_CS_fsm_state2, last_reg_82)
    begin
        if (((last_reg_82 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            huffStream_7_blk_n <= huffStream_7_empty_n;
        else 
            huffStream_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    huffStream_7_read_assign_proc : process(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_huffStream_7_read, ap_CS_fsm_state4, huffStream_7_read_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            huffStream_7_read <= grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_huffStream_7_read;
        else 
            huffStream_7_read <= huffStream_7_read_local;
        end if; 
    end process;


    huffStream_7_read_local_assign_proc : process(ap_CS_fsm_state2, ap_block_state2, last_reg_82)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (last_reg_82 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            huffStream_7_read_local <= ap_const_logic_1;
        else 
            huffStream_7_read_local <= ap_const_logic_0;
        end if; 
    end process;

    inStVal_data_fu_108_p1 <= huffStream_7_dout(8 - 1 downto 0);
    loop_continue_fu_132_p2 <= "0" when (inStVal_strobe_reg_167 = ap_const_lv2_0) else "1";

    mergeStream_7_blk_n_assign_proc : process(mergeStream_7_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mergeStream_7_blk_n <= mergeStream_7_full_n;
        else 
            mergeStream_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mergeStream_7_din_assign_proc : process(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_din, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mergeStream_7_din <= grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_din;
        else 
            mergeStream_7_din <= ap_const_lv68_0;
        end if; 
    end process;


    mergeStream_7_write_assign_proc : process(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_write, ap_CS_fsm_state4, mergeStream_7_write_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            mergeStream_7_write <= grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_write;
        else 
            mergeStream_7_write <= mergeStream_7_write_local;
        end if; 
    end process;


    mergeStream_7_write_local_assign_proc : process(mergeStream_7_full_n, ap_CS_fsm_state5)
    begin
        if (((mergeStream_7_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            mergeStream_7_write_local <= ap_const_logic_1;
        else 
            mergeStream_7_write_local <= ap_const_logic_0;
        end if; 
    end process;

end behav;
