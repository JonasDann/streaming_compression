-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity gzipcMulticoreStreaming_huffmanEncoderStatic_23_Pipeline_huffman_loop_lit_blen_fixed59_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 4; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 288
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of gzipcMulticoreStreaming_huffmanEncoderStatic_23_Pipeline_huffman_loop_lit_blen_fixed59_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1000", 1 => "1000", 2 => "1000", 3 => "1000", 
    4 => "1000", 5 => "1000", 6 => "1000", 7 => "1000", 
    8 => "1000", 9 => "1000", 10 => "1000", 11 => "1000", 
    12 => "1000", 13 => "1000", 14 => "1000", 15 => "1000", 
    16 => "1000", 17 => "1000", 18 => "1000", 19 => "1000", 
    20 => "1000", 21 => "1000", 22 => "1000", 23 => "1000", 
    24 => "1000", 25 => "1000", 26 => "1000", 27 => "1000", 
    28 => "1000", 29 => "1000", 30 => "1000", 31 => "1000", 
    32 => "1000", 33 => "1000", 34 => "1000", 35 => "1000", 
    36 => "1000", 37 => "1000", 38 => "1000", 39 => "1000", 
    40 => "1000", 41 => "1000", 42 => "1000", 43 => "1000", 
    44 => "1000", 45 => "1000", 46 => "1000", 47 => "1000", 
    48 => "1000", 49 => "1000", 50 => "1000", 51 => "1000", 
    52 => "1000", 53 => "1000", 54 => "1000", 55 => "1000", 
    56 => "1000", 57 => "1000", 58 => "1000", 59 => "1000", 
    60 => "1000", 61 => "1000", 62 => "1000", 63 => "1000", 
    64 => "1000", 65 => "1000", 66 => "1000", 67 => "1000", 
    68 => "1000", 69 => "1000", 70 => "1000", 71 => "1000", 
    72 => "1000", 73 => "1000", 74 => "1000", 75 => "1000", 
    76 => "1000", 77 => "1000", 78 => "1000", 79 => "1000", 
    80 => "1000", 81 => "1000", 82 => "1000", 83 => "1000", 
    84 => "1000", 85 => "1000", 86 => "1000", 87 => "1000", 
    88 => "1000", 89 => "1000", 90 => "1000", 91 => "1000", 
    92 => "1000", 93 => "1000", 94 => "1000", 95 => "1000", 
    96 => "1000", 97 => "1000", 98 => "1000", 99 => "1000", 
    100 => "1000", 101 => "1000", 102 => "1000", 103 => "1000", 
    104 => "1000", 105 => "1000", 106 => "1000", 107 => "1000", 
    108 => "1000", 109 => "1000", 110 => "1000", 111 => "1000", 
    112 => "1000", 113 => "1000", 114 => "1000", 115 => "1000", 
    116 => "1000", 117 => "1000", 118 => "1000", 119 => "1000", 
    120 => "1000", 121 => "1000", 122 => "1000", 123 => "1000", 
    124 => "1000", 125 => "1000", 126 => "1000", 127 => "1000", 
    128 => "1000", 129 => "1000", 130 => "1000", 131 => "1000", 
    132 => "1000", 133 => "1000", 134 => "1000", 135 => "1000", 
    136 => "1000", 137 => "1000", 138 => "1000", 139 => "1000", 
    140 => "1000", 141 => "1000", 142 => "1000", 143 => "1000", 
    144 => "1001", 145 => "1001", 146 => "1001", 147 => "1001", 
    148 => "1001", 149 => "1001", 150 => "1001", 151 => "1001", 
    152 => "1001", 153 => "1001", 154 => "1001", 155 => "1001", 
    156 => "1001", 157 => "1001", 158 => "1001", 159 => "1001", 
    160 => "1001", 161 => "1001", 162 => "1001", 163 => "1001", 
    164 => "1001", 165 => "1001", 166 => "1001", 167 => "1001", 
    168 => "1001", 169 => "1001", 170 => "1001", 171 => "1001", 
    172 => "1001", 173 => "1001", 174 => "1001", 175 => "1001", 
    176 => "1001", 177 => "1001", 178 => "1001", 179 => "1001", 
    180 => "1001", 181 => "1001", 182 => "1001", 183 => "1001", 
    184 => "1001", 185 => "1001", 186 => "1001", 187 => "1001", 
    188 => "1001", 189 => "1001", 190 => "1001", 191 => "1001", 
    192 => "1001", 193 => "1001", 194 => "1001", 195 => "1001", 
    196 => "1001", 197 => "1001", 198 => "1001", 199 => "1001", 
    200 => "1001", 201 => "1001", 202 => "1001", 203 => "1001", 
    204 => "1001", 205 => "1001", 206 => "1001", 207 => "1001", 
    208 => "1001", 209 => "1001", 210 => "1001", 211 => "1001", 
    212 => "1001", 213 => "1001", 214 => "1001", 215 => "1001", 
    216 => "1001", 217 => "1001", 218 => "1001", 219 => "1001", 
    220 => "1001", 221 => "1001", 222 => "1001", 223 => "1001", 
    224 => "1001", 225 => "1001", 226 => "1001", 227 => "1001", 
    228 => "1001", 229 => "1001", 230 => "1001", 231 => "1001", 
    232 => "1001", 233 => "1001", 234 => "1001", 235 => "1001", 
    236 => "1001", 237 => "1001", 238 => "1001", 239 => "1001", 
    240 => "1001", 241 => "1001", 242 => "1001", 243 => "1001", 
    244 => "1001", 245 => "1001", 246 => "1001", 247 => "1001", 
    248 => "1001", 249 => "1001", 250 => "1001", 251 => "1001", 
    252 => "1001", 253 => "1001", 254 => "1001", 255 => "1001", 
    256 => "0111", 257 => "0111", 258 => "0111", 259 => "0111", 
    260 => "0111", 261 => "0111", 262 => "0111", 263 => "0111", 
    264 => "0111", 265 => "0111", 266 => "0111", 267 => "0111", 
    268 => "0111", 269 => "0111", 270 => "0111", 271 => "0111", 
    272 => "0111", 273 => "0111", 274 => "0111", 275 => "0111", 
    276 => "0111", 277 => "0111", 278 => "0111", 279 => "0111", 
    280 => "1000", 281 => "1000", 282 => "1000", 283 => "1000", 
    284 => "1000", 285 => "1000", 286 => "1000", 287 => "1000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

