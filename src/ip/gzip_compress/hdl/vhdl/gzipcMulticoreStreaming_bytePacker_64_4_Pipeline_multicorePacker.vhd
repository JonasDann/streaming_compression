-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_bytePacker_64_4_Pipeline_multicorePacker is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    packedStream_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    packedStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    packedStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    packedStream_empty_n : IN STD_LOGIC;
    packedStream_read : OUT STD_LOGIC;
    outStream_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    outStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outStream_full_n : IN STD_LOGIC;
    outStream_write : OUT STD_LOGIC;
    outVal_data_7_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    outVal_data_7_out_ap_vld : OUT STD_LOGIC;
    outVal_data_6_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    outVal_data_6_out_ap_vld : OUT STD_LOGIC;
    outVal_data_5_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    outVal_data_5_out_ap_vld : OUT STD_LOGIC;
    outVal_data_4_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    outVal_data_4_out_ap_vld : OUT STD_LOGIC;
    outVal_data_3_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    outVal_data_3_out_ap_vld : OUT STD_LOGIC;
    outVal_data_2_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    outVal_data_2_out_ap_vld : OUT STD_LOGIC;
    outVal_data_1_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    outVal_data_1_out_ap_vld : OUT STD_LOGIC;
    outVal_data_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    outVal_data_out_ap_vld : OUT STD_LOGIC;
    inputWindow_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    inputWindow_out_ap_vld : OUT STD_LOGIC;
    inputIdx_4_out : OUT STD_LOGIC_VECTOR (3 downto 0);
    inputIdx_4_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_bytePacker_64_4_Pipeline_multicorePacker is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_phi_mux_packerDone_phi_fu_258_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_294_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_294_reg_777_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal packedStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal outStream_blk_n : STD_LOGIC;
    signal packerDone_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal packerDone_reg_255_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal inVal_reg_740 : STD_LOGIC_VECTOR (67 downto 0);
    signal inVal_reg_740_pp0_iter1_reg : STD_LOGIC_VECTOR (67 downto 0);
    signal trunc_ln480_fu_271_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln480_reg_745 : STD_LOGIC_VECTOR (3 downto 0);
    signal packerDone_1_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal packerDone_1_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_308_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_755 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln482_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln482_reg_763 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln482_fu_326_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln482_reg_771 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_294_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln493_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln493_reg_781 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal inputIdx_1_fu_132 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal inputIdx_2_fu_330_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal inputIdx_fu_352_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal inputWindow_fu_136 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal inputWindow_2_fu_484_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln494_fu_583_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal outVal_data_fu_140 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal outVal_data_8_fu_490_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal outVal_data_1_fu_144 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal outVal_data_2_fu_148 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal outVal_data_3_fu_152 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal outVal_data_4_fu_156 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal outVal_data_5_fu_160 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal outVal_data_6_fu_164 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal outVal_data_7_fu_168 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal packedStream_read_local : STD_LOGIC;
    signal tmp_s_fu_632_p3 : STD_LOGIC_VECTOR (67 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal outStream_write_local : STD_LOGIC;
    signal zext_ln477_fu_284_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln477_fu_288_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln482_1_fu_294_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln482_fu_316_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln482_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln495_fu_348_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_373_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln482_fu_386_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln482_fu_391_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln482_2_fu_401_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln482_1_fu_396_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln482_1_fu_407_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln482_1_fu_382_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln482_2_fu_413_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln482_fu_425_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_fu_431_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln482_3_fu_417_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln482_4_fu_421_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal shl_ln482_2_fu_448_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln482_fu_454_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln482_fu_460_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln482_2_fu_466_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal select_ln482_3_fu_441_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln482_1_fu_472_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln482_2_fu_478_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal inputWindow_3_fu_573_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_514 : BOOLEAN;
    signal ap_condition_518 : BOOLEAN;
    signal ap_condition_522 : BOOLEAN;
    signal ap_condition_223 : BOOLEAN;
    signal ap_condition_529 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    inputIdx_1_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    inputIdx_1_fu_132 <= ap_const_lv4_0;
                elsif ((ap_const_boolean_1 = ap_condition_522)) then 
                    inputIdx_1_fu_132 <= inputIdx_fu_352_p3;
                elsif ((ap_const_boolean_1 = ap_condition_518)) then 
                    inputIdx_1_fu_132 <= inputIdx_2_fu_330_p2;
                end if;
            end if; 
        end if;
    end process;

    inputWindow_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_223)) then
                if ((tmp_294_reg_777 = ap_const_lv1_1)) then 
                    inputWindow_fu_136 <= zext_ln494_fu_583_p1;
                elsif ((tmp_294_reg_777 = ap_const_lv1_0)) then 
                    inputWindow_fu_136 <= inputWindow_2_fu_484_p2;
                end if;
            end if; 
        end if;
    end process;

    packerDone_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_529)) then 
                    packerDone_reg_255 <= packerDone_1_reg_750;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    packerDone_reg_255 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln482_reg_763 <= icmp_ln482_fu_320_p2;
                inVal_reg_740 <= packedStream_dout;
                inVal_reg_740_pp0_iter1_reg <= inVal_reg_740;
                packerDone_reg_255_pp0_iter1_reg <= packerDone_reg_255;
                    shl_ln_reg_755(6 downto 3) <= shl_ln_fu_308_p3(6 downto 3);
                tmp_294_reg_777 <= inputIdx_2_fu_330_p2(3 downto 3);
                trunc_ln480_reg_745 <= trunc_ln480_fu_271_p1;
                    trunc_ln482_reg_771(6 downto 3) <= trunc_ln482_fu_326_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_0))) then
                outVal_data_1_fu_144 <= inputWindow_2_fu_484_p2(15 downto 8);
                outVal_data_2_fu_148 <= inputWindow_2_fu_484_p2(23 downto 16);
                outVal_data_3_fu_152 <= inputWindow_2_fu_484_p2(31 downto 24);
                outVal_data_4_fu_156 <= inputWindow_2_fu_484_p2(39 downto 32);
                outVal_data_5_fu_160 <= inputWindow_2_fu_484_p2(47 downto 40);
                outVal_data_6_fu_164 <= inputWindow_2_fu_484_p2(55 downto 48);
                outVal_data_7_fu_168 <= inputWindow_2_fu_484_p2(63 downto 56);
                outVal_data_fu_140 <= outVal_data_8_fu_490_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                packerDone_1_reg_750 <= packerDone_1_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_294_reg_777_pp0_iter2_reg <= tmp_294_reg_777;
                trunc_ln493_reg_781 <= trunc_ln493_fu_569_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_755(2 downto 0) <= "000";
    trunc_ln482_reg_771(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln477_fu_288_p2 <= std_logic_vector(unsigned(zext_ln477_fu_284_p1) + unsigned(ap_const_lv5_8));
    add_ln482_fu_302_p2 <= std_logic_vector(unsigned(shl_ln482_1_fu_294_p3) + unsigned(ap_const_lv8_FF));
    and_ln482_1_fu_472_p2 <= (xor_ln482_2_fu_466_p2 and inputWindow_fu_136);
    and_ln482_2_fu_478_p2 <= (select_ln482_3_fu_441_p3 and and_ln482_fu_460_p2);
    and_ln482_fu_460_p2 <= (shl_ln482_2_fu_448_p2 and lshr_ln482_fu_454_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state1_pp0_stage0_iter0, ap_block_state4_pp0_stage0_iter3, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state1_pp0_stage0_iter0, ap_block_state4_pp0_stage0_iter3, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state1_pp0_stage0_iter0, ap_block_state4_pp0_stage0_iter3, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(packedStream_empty_n, ap_phi_mux_packerDone_phi_fu_258_p4)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_phi_mux_packerDone_phi_fu_258_p4 = ap_const_lv1_0) and (packedStream_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(outStream_full_n, tmp_294_reg_777_pp0_iter2_reg)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((tmp_294_reg_777_pp0_iter2_reg = ap_const_lv1_1) and (outStream_full_n = ap_const_logic_0));
    end process;


    ap_condition_223_assign_proc : process(ap_enable_reg_pp0_iter2, packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
                ap_condition_223 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_514_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, packerDone_reg_255)
    begin
                ap_condition_514 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (packerDone_reg_255 = ap_const_lv1_0));
    end process;


    ap_condition_518_assign_proc : process(ap_enable_reg_pp0_iter1, packerDone_reg_255, tmp_294_fu_335_p3)
    begin
                ap_condition_518 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_294_fu_335_p3 = ap_const_lv1_0) and (packerDone_reg_255 = ap_const_lv1_0));
    end process;


    ap_condition_522_assign_proc : process(ap_enable_reg_pp0_iter1, packerDone_reg_255, tmp_294_fu_335_p3)
    begin
                ap_condition_522 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_294_fu_335_p3 = ap_const_lv1_1) and (packerDone_reg_255 = ap_const_lv1_0));
    end process;


    ap_condition_529_assign_proc : process(ap_enable_reg_pp0_iter1, packerDone_reg_255, ap_block_pp0_stage0_11001)
    begin
                ap_condition_529 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (packerDone_reg_255 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_packerDone_phi_fu_258_p4, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_phi_mux_packerDone_phi_fu_258_p4 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, packerDone_reg_255_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter2_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_packerDone_phi_fu_258_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, packerDone_reg_255, packerDone_1_reg_750, ap_loop_init, ap_condition_514)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_514)) then 
                ap_phi_mux_packerDone_phi_fu_258_p4 <= packerDone_1_reg_750;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_packerDone_phi_fu_258_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_packerDone_phi_fu_258_p4 <= packerDone_reg_255;
            end if;
        else 
            ap_phi_mux_packerDone_phi_fu_258_p4 <= packerDone_reg_255;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln482_fu_320_p2 <= "1" when (unsigned(zext_ln482_fu_316_p1) > unsigned(add_ln482_fu_302_p2)) else "0";
    inputIdx_2_fu_330_p2 <= std_logic_vector(unsigned(trunc_ln480_reg_745) + unsigned(inputIdx_1_fu_132));
    inputIdx_4_out <= inputIdx_1_fu_132;

    inputIdx_4_out_ap_vld_assign_proc : process(packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            inputIdx_4_out_ap_vld <= ap_const_logic_1;
        else 
            inputIdx_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    inputIdx_fu_352_p3 <= (ap_const_lv1_0 & trunc_ln495_fu_348_p1);
    inputWindow_2_fu_484_p2 <= (and_ln482_2_fu_478_p2 or and_ln482_1_fu_472_p2);
    inputWindow_3_fu_573_p4 <= inputWindow_2_fu_484_p2(127 downto 64);
    inputWindow_out <= inputWindow_fu_136(64 - 1 downto 0);

    inputWindow_out_ap_vld_assign_proc : process(packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            inputWindow_out_ap_vld <= ap_const_logic_1;
        else 
            inputWindow_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln482_fu_454_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln482_4_fu_421_p1(31-1 downto 0)))));

    outStream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, outStream_full_n, tmp_294_reg_777_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_294_reg_777_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_blk_n <= outStream_full_n;
        else 
            outStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_din <= tmp_s_fu_632_p3;
    outStream_write <= outStream_write_local;

    outStream_write_local_assign_proc : process(ap_enable_reg_pp0_iter3, tmp_294_reg_777_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_294_reg_777_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            outStream_write_local <= ap_const_logic_1;
        else 
            outStream_write_local <= ap_const_logic_0;
        end if; 
    end process;

    outVal_data_1_out <= outVal_data_1_fu_144;

    outVal_data_1_out_ap_vld_assign_proc : process(packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            outVal_data_1_out_ap_vld <= ap_const_logic_1;
        else 
            outVal_data_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outVal_data_2_out <= outVal_data_2_fu_148;

    outVal_data_2_out_ap_vld_assign_proc : process(packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            outVal_data_2_out_ap_vld <= ap_const_logic_1;
        else 
            outVal_data_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outVal_data_3_out <= outVal_data_3_fu_152;

    outVal_data_3_out_ap_vld_assign_proc : process(packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            outVal_data_3_out_ap_vld <= ap_const_logic_1;
        else 
            outVal_data_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outVal_data_4_out <= outVal_data_4_fu_156;

    outVal_data_4_out_ap_vld_assign_proc : process(packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            outVal_data_4_out_ap_vld <= ap_const_logic_1;
        else 
            outVal_data_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outVal_data_5_out <= outVal_data_5_fu_160;

    outVal_data_5_out_ap_vld_assign_proc : process(packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            outVal_data_5_out_ap_vld <= ap_const_logic_1;
        else 
            outVal_data_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outVal_data_6_out <= outVal_data_6_fu_164;

    outVal_data_6_out_ap_vld_assign_proc : process(packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            outVal_data_6_out_ap_vld <= ap_const_logic_1;
        else 
            outVal_data_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outVal_data_7_out <= outVal_data_7_fu_168;

    outVal_data_7_out_ap_vld_assign_proc : process(packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            outVal_data_7_out_ap_vld <= ap_const_logic_1;
        else 
            outVal_data_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outVal_data_8_fu_490_p1 <= inputWindow_2_fu_484_p2(8 - 1 downto 0);
    outVal_data_out <= outVal_data_fu_140;

    outVal_data_out_ap_vld_assign_proc : process(packerDone_reg_255_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (packerDone_reg_255_pp0_iter1_reg = ap_const_lv1_1))) then 
            outVal_data_out_ap_vld <= ap_const_logic_1;
        else 
            outVal_data_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    packedStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, packedStream_empty_n, ap_phi_mux_packerDone_phi_fu_258_p4, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_phi_mux_packerDone_phi_fu_258_p4 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            packedStream_blk_n <= packedStream_empty_n;
        else 
            packedStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    packedStream_read <= packedStream_read_local;

    packedStream_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_packerDone_phi_fu_258_p4, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_packerDone_phi_fu_258_p4 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            packedStream_read_local <= ap_const_logic_1;
        else 
            packedStream_read_local <= ap_const_logic_0;
        end if; 
    end process;

    packerDone_1_fu_275_p2 <= "1" when (trunc_ln480_fu_271_p1 = ap_const_lv4_0) else "0";
    select_ln482_1_fu_396_p3 <= 
        trunc_ln482_reg_771 when (icmp_ln482_reg_763(0) = '1') else 
        shl_ln_reg_755;
    select_ln482_2_fu_401_p3 <= 
        xor_ln482_fu_386_p2 when (icmp_ln482_reg_763(0) = '1') else 
        shl_ln_reg_755;
    select_ln482_3_fu_441_p3 <= 
        tmp_fu_431_p4 when (icmp_ln482_reg_763(0) = '1') else 
        shl_ln482_fu_425_p2;
    select_ln482_fu_391_p3 <= 
        shl_ln_reg_755 when (icmp_ln482_reg_763(0) = '1') else 
        trunc_ln482_reg_771;
    shl_ln482_1_fu_294_p3 <= (add_ln477_fu_288_p2 & ap_const_lv3_0);
    shl_ln482_2_fu_448_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & zext_ln482_3_fu_417_p1(31-1 downto 0)))));
    shl_ln482_fu_425_p2 <= std_logic_vector(shift_left(unsigned(zext_ln482_1_fu_382_p1),to_integer(unsigned('0' & zext_ln482_2_fu_413_p1(31-1 downto 0)))));
    shl_ln_fu_308_p3 <= (inputIdx_1_fu_132 & ap_const_lv3_0);
    tmp_1_fu_373_p4 <= inVal_reg_740_pp0_iter1_reg(67 downto 4);
    tmp_294_fu_335_p3 <= inputIdx_2_fu_330_p2(3 downto 3);
    
    tmp_fu_431_p4_proc : process(shl_ln482_fu_425_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_fu_431_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := shl_ln482_fu_425_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_fu_431_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_fu_431_p4_i) := shl_ln482_fu_425_p2(128-1-tmp_fu_431_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_431_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_s_fu_632_p3 <= (ap_const_lv4_8 & trunc_ln493_reg_781);
    trunc_ln480_fu_271_p1 <= packedStream_dout(4 - 1 downto 0);
    trunc_ln482_fu_326_p1 <= add_ln482_fu_302_p2(7 - 1 downto 0);
    trunc_ln493_fu_569_p1 <= inputWindow_2_fu_484_p2(64 - 1 downto 0);
    trunc_ln495_fu_348_p1 <= inputIdx_2_fu_330_p2(3 - 1 downto 0);
    xor_ln482_1_fu_407_p2 <= (select_ln482_fu_391_p3 xor ap_const_lv7_7F);
    xor_ln482_2_fu_466_p2 <= (ap_const_lv128_lc_3 xor and_ln482_fu_460_p2);
    xor_ln482_fu_386_p2 <= (shl_ln_reg_755 xor ap_const_lv7_7F);
    zext_ln477_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputIdx_1_fu_132),5));
    zext_ln482_1_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_373_p4),128));
    zext_ln482_2_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln482_2_fu_401_p3),128));
    zext_ln482_3_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln482_1_fu_396_p3),128));
    zext_ln482_4_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln482_1_fu_407_p2),128));
    zext_ln482_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_308_p3),8));
    zext_ln494_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inputWindow_3_fu_573_p4),128));
end behav;
