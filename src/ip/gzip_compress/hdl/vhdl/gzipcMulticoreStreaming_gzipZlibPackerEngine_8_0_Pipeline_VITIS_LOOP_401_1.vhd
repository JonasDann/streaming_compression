-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_gzipZlibPackerEngine_8_0_Pipeline_VITIS_LOOP_401_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    mergeStream_6_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    mergeStream_6_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_6_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_6_empty_n : IN STD_LOGIC;
    mergeStream_6_read : OUT STD_LOGIC;
    mergeStream_5_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    mergeStream_5_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_5_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_5_empty_n : IN STD_LOGIC;
    mergeStream_5_read : OUT STD_LOGIC;
    mergeStream_4_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    mergeStream_4_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_4_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_4_empty_n : IN STD_LOGIC;
    mergeStream_4_read : OUT STD_LOGIC;
    mergeStream_3_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    mergeStream_3_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_3_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_3_empty_n : IN STD_LOGIC;
    mergeStream_3_read : OUT STD_LOGIC;
    mergeStream_2_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    mergeStream_2_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_2_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_2_empty_n : IN STD_LOGIC;
    mergeStream_2_read : OUT STD_LOGIC;
    mergeStream_1_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    mergeStream_1_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_1_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_1_empty_n : IN STD_LOGIC;
    mergeStream_1_read : OUT STD_LOGIC;
    mergeStream_0_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    mergeStream_0_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_0_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_0_empty_n : IN STD_LOGIC;
    mergeStream_0_read : OUT STD_LOGIC;
    mergeStream_7_dout : IN STD_LOGIC_VECTOR (67 downto 0);
    mergeStream_7_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_7_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    mergeStream_7_empty_n : IN STD_LOGIC;
    mergeStream_7_read : OUT STD_LOGIC;
    packedStream_din : OUT STD_LOGIC_VECTOR (67 downto 0);
    packedStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    packedStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    packedStream_full_n : IN STD_LOGIC;
    packedStream_write : OUT STD_LOGIC;
    core_1 : IN STD_LOGIC_VECTOR (2 downto 0);
    empty : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of gzipcMulticoreStreaming_gzipZlibPackerEngine_8_0_Pipeline_VITIS_LOOP_401_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal blockDone_reg_184 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal blockDone_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal packedStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mergeStream_0_blk_n : STD_LOGIC;
    signal mergeStream_1_blk_n : STD_LOGIC;
    signal mergeStream_2_blk_n : STD_LOGIC;
    signal mergeStream_3_blk_n : STD_LOGIC;
    signal mergeStream_4_blk_n : STD_LOGIC;
    signal mergeStream_5_blk_n : STD_LOGIC;
    signal mergeStream_6_blk_n : STD_LOGIC;
    signal mergeStream_7_blk_n : STD_LOGIC;
    signal inVal_reg_139 : STD_LOGIC_VECTOR (67 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_phi_mux_inVal_phi_fu_143_p16 : STD_LOGIC_VECTOR (67 downto 0);
    signal ap_phi_reg_pp0_iter0_inVal_reg_139 : STD_LOGIC_VECTOR (67 downto 0);
    signal mergeStream_6_read_local : STD_LOGIC;
    signal mergeStream_5_read_local : STD_LOGIC;
    signal mergeStream_4_read_local : STD_LOGIC;
    signal mergeStream_3_read_local : STD_LOGIC;
    signal mergeStream_2_read_local : STD_LOGIC;
    signal mergeStream_1_read_local : STD_LOGIC;
    signal mergeStream_0_read_local : STD_LOGIC;
    signal mergeStream_7_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal packedStream_write_local : STD_LOGIC;
    signal trunc_ln404_fu_170_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal ap_condition_191 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    inVal_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_191)) then
                if ((core_1 = ap_const_lv3_7)) then 
                    inVal_reg_139 <= mergeStream_7_dout;
                elsif ((core_1 = ap_const_lv3_6)) then 
                    inVal_reg_139 <= mergeStream_6_dout;
                elsif ((core_1 = ap_const_lv3_5)) then 
                    inVal_reg_139 <= mergeStream_5_dout;
                elsif ((core_1 = ap_const_lv3_4)) then 
                    inVal_reg_139 <= mergeStream_4_dout;
                elsif ((core_1 = ap_const_lv3_3)) then 
                    inVal_reg_139 <= mergeStream_3_dout;
                elsif ((core_1 = ap_const_lv3_2)) then 
                    inVal_reg_139 <= mergeStream_2_dout;
                elsif ((core_1 = ap_const_lv3_1)) then 
                    inVal_reg_139 <= mergeStream_1_dout;
                elsif ((core_1 = ap_const_lv3_0)) then 
                    inVal_reg_139 <= mergeStream_0_dout;
                elsif (not((blockDone_fu_174_p2 = ap_const_lv1_1))) then 
                    inVal_reg_139 <= ap_phi_reg_pp0_iter0_inVal_reg_139;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                blockDone_reg_184 <= blockDone_fu_174_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(mergeStream_6_empty_n, mergeStream_5_empty_n, mergeStream_4_empty_n, mergeStream_3_empty_n, mergeStream_2_empty_n, mergeStream_1_empty_n, mergeStream_0_empty_n, mergeStream_7_empty_n, core_1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (((mergeStream_1_empty_n = ap_const_logic_0) and (core_1 = ap_const_lv3_1)) or ((mergeStream_2_empty_n = ap_const_logic_0) and (core_1 = ap_const_lv3_2)) or ((mergeStream_3_empty_n = ap_const_logic_0) and (core_1 = ap_const_lv3_3)) or ((mergeStream_4_empty_n = ap_const_logic_0) and (core_1 = ap_const_lv3_4)) or ((mergeStream_5_empty_n = ap_const_logic_0) and (core_1 = ap_const_lv3_5)) or ((core_1 = ap_const_lv3_6) and (mergeStream_6_empty_n = ap_const_logic_0)) or ((core_1 = ap_const_lv3_7) and (mergeStream_7_empty_n = ap_const_logic_0)) or ((mergeStream_0_empty_n = ap_const_logic_0) and (core_1 = ap_const_lv3_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(packedStream_full_n, blockDone_reg_184)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((blockDone_reg_184 = ap_const_lv1_0) and (packedStream_full_n = ap_const_logic_0));
    end process;


    ap_condition_191_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_191 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, blockDone_fu_174_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (blockDone_fu_174_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_inVal_phi_fu_143_p16_assign_proc : process(mergeStream_6_dout, mergeStream_5_dout, mergeStream_4_dout, mergeStream_3_dout, mergeStream_2_dout, mergeStream_1_dout, mergeStream_0_dout, mergeStream_7_dout, core_1, ap_phi_reg_pp0_iter0_inVal_reg_139)
    begin
        if ((core_1 = ap_const_lv3_7)) then 
            ap_phi_mux_inVal_phi_fu_143_p16 <= mergeStream_7_dout;
        elsif ((core_1 = ap_const_lv3_6)) then 
            ap_phi_mux_inVal_phi_fu_143_p16 <= mergeStream_6_dout;
        elsif ((core_1 = ap_const_lv3_5)) then 
            ap_phi_mux_inVal_phi_fu_143_p16 <= mergeStream_5_dout;
        elsif ((core_1 = ap_const_lv3_4)) then 
            ap_phi_mux_inVal_phi_fu_143_p16 <= mergeStream_4_dout;
        elsif ((core_1 = ap_const_lv3_3)) then 
            ap_phi_mux_inVal_phi_fu_143_p16 <= mergeStream_3_dout;
        elsif ((core_1 = ap_const_lv3_2)) then 
            ap_phi_mux_inVal_phi_fu_143_p16 <= mergeStream_2_dout;
        elsif ((core_1 = ap_const_lv3_1)) then 
            ap_phi_mux_inVal_phi_fu_143_p16 <= mergeStream_1_dout;
        elsif ((core_1 = ap_const_lv3_0)) then 
            ap_phi_mux_inVal_phi_fu_143_p16 <= mergeStream_0_dout;
        else 
            ap_phi_mux_inVal_phi_fu_143_p16 <= ap_phi_reg_pp0_iter0_inVal_reg_139;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_inVal_reg_139 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    blockDone_fu_174_p2 <= "1" when (trunc_ln404_fu_170_p1 = ap_const_lv4_0) else "0";

    mergeStream_0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, mergeStream_0_empty_n, core_1, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mergeStream_0_blk_n <= mergeStream_0_empty_n;
        else 
            mergeStream_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mergeStream_0_read <= mergeStream_0_read_local;

    mergeStream_0_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, core_1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mergeStream_0_read_local <= ap_const_logic_1;
        else 
            mergeStream_0_read_local <= ap_const_logic_0;
        end if; 
    end process;


    mergeStream_1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, mergeStream_1_empty_n, core_1, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mergeStream_1_blk_n <= mergeStream_1_empty_n;
        else 
            mergeStream_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mergeStream_1_read <= mergeStream_1_read_local;

    mergeStream_1_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, core_1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mergeStream_1_read_local <= ap_const_logic_1;
        else 
            mergeStream_1_read_local <= ap_const_logic_0;
        end if; 
    end process;


    mergeStream_2_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, mergeStream_2_empty_n, core_1, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_2) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mergeStream_2_blk_n <= mergeStream_2_empty_n;
        else 
            mergeStream_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mergeStream_2_read <= mergeStream_2_read_local;

    mergeStream_2_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, core_1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_2) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mergeStream_2_read_local <= ap_const_logic_1;
        else 
            mergeStream_2_read_local <= ap_const_logic_0;
        end if; 
    end process;


    mergeStream_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, mergeStream_3_empty_n, core_1, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_3) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mergeStream_3_blk_n <= mergeStream_3_empty_n;
        else 
            mergeStream_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mergeStream_3_read <= mergeStream_3_read_local;

    mergeStream_3_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, core_1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_3) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mergeStream_3_read_local <= ap_const_logic_1;
        else 
            mergeStream_3_read_local <= ap_const_logic_0;
        end if; 
    end process;


    mergeStream_4_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, mergeStream_4_empty_n, core_1, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_4) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mergeStream_4_blk_n <= mergeStream_4_empty_n;
        else 
            mergeStream_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mergeStream_4_read <= mergeStream_4_read_local;

    mergeStream_4_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, core_1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_4) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mergeStream_4_read_local <= ap_const_logic_1;
        else 
            mergeStream_4_read_local <= ap_const_logic_0;
        end if; 
    end process;


    mergeStream_5_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, mergeStream_5_empty_n, core_1, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_5) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mergeStream_5_blk_n <= mergeStream_5_empty_n;
        else 
            mergeStream_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mergeStream_5_read <= mergeStream_5_read_local;

    mergeStream_5_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, core_1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_5) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mergeStream_5_read_local <= ap_const_logic_1;
        else 
            mergeStream_5_read_local <= ap_const_logic_0;
        end if; 
    end process;


    mergeStream_6_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, mergeStream_6_empty_n, core_1, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_6) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mergeStream_6_blk_n <= mergeStream_6_empty_n;
        else 
            mergeStream_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mergeStream_6_read <= mergeStream_6_read_local;

    mergeStream_6_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, core_1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_6) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mergeStream_6_read_local <= ap_const_logic_1;
        else 
            mergeStream_6_read_local <= ap_const_logic_0;
        end if; 
    end process;


    mergeStream_7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, mergeStream_7_empty_n, core_1, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_7) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mergeStream_7_blk_n <= mergeStream_7_empty_n;
        else 
            mergeStream_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mergeStream_7_read <= mergeStream_7_read_local;

    mergeStream_7_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, core_1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((core_1 = ap_const_lv3_7) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mergeStream_7_read_local <= ap_const_logic_1;
        else 
            mergeStream_7_read_local <= ap_const_logic_0;
        end if; 
    end process;


    packedStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, packedStream_full_n, blockDone_reg_184, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (blockDone_reg_184 = ap_const_lv1_0))) then 
            packedStream_blk_n <= packedStream_full_n;
        else 
            packedStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    packedStream_din <= inVal_reg_139;
    packedStream_write <= packedStream_write_local;

    packedStream_write_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, blockDone_reg_184, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (blockDone_reg_184 = ap_const_lv1_0))) then 
            packedStream_write_local <= ap_const_logic_1;
        else 
            packedStream_write_local <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln404_fu_170_p1 <= ap_phi_mux_inVal_phi_fu_143_p16(4 - 1 downto 0);
end behav;
