-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2443_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    checksumStream_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    checksumStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumStream_empty_n : IN STD_LOGIC;
    checksumStream_read : OUT STD_LOGIC;
    in_data_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    crc_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    inPackLen_1_reload : IN STD_LOGIC_VECTOR (4 downto 0);
    crc_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    crc_4_out_ap_vld : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_ZN2xf8security8internalL7table16E_0_0_ce0 : OUT STD_LOGIC;
    p_ZN2xf8security8internalL7table16E_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2443_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln2446_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln2443_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal checksumStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln2443_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2443_reg_257_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln2443_reg_257_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2443_fu_146_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln2443_reg_261 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln2443_reg_261_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln2446_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2447_1_fu_186_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln2447_1_reg_270 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_275 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln2447_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal crc_fu_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal crc_1_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_crc_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal i_fu_64 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln2443_fu_140_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_51 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_data_fu_68 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal checksumStream_read_local : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_ZN2xf8security8internalL7table16E_0_0_ce0_local : STD_LOGIC;
    signal shl_ln_fu_169_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln2447_2_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln2447_fu_180_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2447_fu_203_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln2447_fu_207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln2447_1_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    crc_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    crc_fu_60 <= crc_1_reload;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    crc_fu_60 <= crc_1_fu_220_p2;
                end if;
            end if; 
        end if;
    end process;

    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln2443_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_64 <= add_ln2443_fu_140_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    in_data_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    in_data_fu_68 <= in_data_reload;
                elsif (((icmp_ln2446_reg_266 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    in_data_fu_68 <= checksumStream_dout;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln2443_reg_257 <= icmp_ln2443_fu_134_p2;
                icmp_ln2443_reg_257_pp0_iter1_reg <= icmp_ln2443_reg_257;
                icmp_ln2446_reg_266 <= icmp_ln2446_fu_150_p2;
                trunc_ln2443_reg_261 <= trunc_ln2443_fu_146_p1;
                trunc_ln2443_reg_261_pp0_iter1_reg <= trunc_ln2443_reg_261;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln2443_reg_257_pp0_iter2_reg <= icmp_ln2443_reg_257_pp0_iter1_reg;
                lshr_ln_reg_275 <= ap_sig_allocacmp_crc_load_1(31 downto 8);
                trunc_ln2447_1_reg_270 <= trunc_ln2447_1_fu_186_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln2443_fu_140_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_51) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(checksumStream_empty_n, icmp_ln2446_reg_266)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln2446_reg_266 = ap_const_lv1_1) and (checksumStream_empty_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln2443_fu_134_p2)
    begin
        if (((icmp_ln2443_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter3_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_crc_load_1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, crc_fu_60, crc_1_fu_220_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_sig_allocacmp_crc_load_1 <= crc_1_fu_220_p2;
        else 
            ap_sig_allocacmp_crc_load_1 <= crc_fu_60;
        end if; 
    end process;


    ap_sig_allocacmp_i_51_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_64)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_51 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_51 <= i_fu_64;
        end if; 
    end process;


    checksumStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, checksumStream_empty_n, icmp_ln2446_reg_266, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln2446_reg_266 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            checksumStream_blk_n <= checksumStream_empty_n;
        else 
            checksumStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    checksumStream_read <= checksumStream_read_local;

    checksumStream_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln2446_reg_266, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln2446_reg_266 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            checksumStream_read_local <= ap_const_logic_1;
        else 
            checksumStream_read_local <= ap_const_logic_0;
        end if; 
    end process;

    crc_1_fu_220_p2 <= (zext_ln2447_1_fu_217_p1 xor p_ZN2xf8security8internalL7table16E_0_0_q0);
    crc_4_out <= crc_fu_60;

    crc_4_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln2443_reg_257_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (icmp_ln2443_reg_257_pp0_iter2_reg = ap_const_lv1_1))) then 
            crc_4_out_ap_vld <= ap_const_logic_1;
        else 
            crc_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln2443_fu_134_p2 <= "1" when (ap_sig_allocacmp_i_51 = inPackLen_1_reload) else "0";
    icmp_ln2446_fu_150_p2 <= "1" when (ap_sig_allocacmp_i_51 = ap_const_lv5_0) else "0";
    lshr_ln2447_fu_180_p2 <= std_logic_vector(shift_right(unsigned(in_data_fu_68),to_integer(unsigned('0' & zext_ln2447_2_fu_176_p1(31-1 downto 0)))));
    p_ZN2xf8security8internalL7table16E_0_0_address0 <= zext_ln2447_fu_212_p1(8 - 1 downto 0);
    p_ZN2xf8security8internalL7table16E_0_0_ce0 <= p_ZN2xf8security8internalL7table16E_0_0_ce0_local;

    p_ZN2xf8security8internalL7table16E_0_0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            p_ZN2xf8security8internalL7table16E_0_0_ce0_local <= ap_const_logic_1;
        else 
            p_ZN2xf8security8internalL7table16E_0_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_169_p3 <= (trunc_ln2443_reg_261_pp0_iter1_reg & ap_const_lv3_0);
    trunc_ln2443_fu_146_p1 <= ap_sig_allocacmp_i_51(3 - 1 downto 0);
    trunc_ln2447_1_fu_186_p1 <= lshr_ln2447_fu_180_p2(8 - 1 downto 0);
    trunc_ln2447_fu_203_p1 <= ap_sig_allocacmp_crc_load_1(8 - 1 downto 0);
    xor_ln2447_fu_207_p2 <= (trunc_ln2447_fu_203_p1 xor trunc_ln2447_1_reg_270);
    zext_ln2447_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_275),32));
    zext_ln2447_2_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_169_p3),64));
    zext_ln2447_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln2447_fu_207_p2),64));
end behav;
