-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity gzipcMulticoreStreaming_huffmanEncoderStatic_23_Pipeline_huffman_loop_lit_code_fixed66_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 9; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 288
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of gzipcMulticoreStreaming_huffmanEncoderStatic_23_Pipeline_huffman_loop_lit_code_fixed66_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000001100", 1 => "010001100", 2 => "001001100", 3 => "011001100", 
    4 => "000101100", 5 => "010101100", 6 => "001101100", 7 => "011101100", 
    8 => "000011100", 9 => "010011100", 10 => "001011100", 11 => "011011100", 
    12 => "000111100", 13 => "010111100", 14 => "001111100", 15 => "011111100", 
    16 => "000000010", 17 => "010000010", 18 => "001000010", 19 => "011000010", 
    20 => "000100010", 21 => "010100010", 22 => "001100010", 23 => "011100010", 
    24 => "000010010", 25 => "010010010", 26 => "001010010", 27 => "011010010", 
    28 => "000110010", 29 => "010110010", 30 => "001110010", 31 => "011110010", 
    32 => "000001010", 33 => "010001010", 34 => "001001010", 35 => "011001010", 
    36 => "000101010", 37 => "010101010", 38 => "001101010", 39 => "011101010", 
    40 => "000011010", 41 => "010011010", 42 => "001011010", 43 => "011011010", 
    44 => "000111010", 45 => "010111010", 46 => "001111010", 47 => "011111010", 
    48 => "000000110", 49 => "010000110", 50 => "001000110", 51 => "011000110", 
    52 => "000100110", 53 => "010100110", 54 => "001100110", 55 => "011100110", 
    56 => "000010110", 57 => "010010110", 58 => "001010110", 59 => "011010110", 
    60 => "000110110", 61 => "010110110", 62 => "001110110", 63 => "011110110", 
    64 => "000001110", 65 => "010001110", 66 => "001001110", 67 => "011001110", 
    68 => "000101110", 69 => "010101110", 70 => "001101110", 71 => "011101110", 
    72 => "000011110", 73 => "010011110", 74 => "001011110", 75 => "011011110", 
    76 => "000111110", 77 => "010111110", 78 => "001111110", 79 => "011111110", 
    80 => "000000001", 81 => "010000001", 82 => "001000001", 83 => "011000001", 
    84 => "000100001", 85 => "010100001", 86 => "001100001", 87 => "011100001", 
    88 => "000010001", 89 => "010010001", 90 => "001010001", 91 => "011010001", 
    92 => "000110001", 93 => "010110001", 94 => "001110001", 95 => "011110001", 
    96 => "000001001", 97 => "010001001", 98 => "001001001", 99 => "011001001", 
    100 => "000101001", 101 => "010101001", 102 => "001101001", 103 => "011101001", 
    104 => "000011001", 105 => "010011001", 106 => "001011001", 107 => "011011001", 
    108 => "000111001", 109 => "010111001", 110 => "001111001", 111 => "011111001", 
    112 => "000000101", 113 => "010000101", 114 => "001000101", 115 => "011000101", 
    116 => "000100101", 117 => "010100101", 118 => "001100101", 119 => "011100101", 
    120 => "000010101", 121 => "010010101", 122 => "001010101", 123 => "011010101", 
    124 => "000110101", 125 => "010110101", 126 => "001110101", 127 => "011110101", 
    128 => "000001101", 129 => "010001101", 130 => "001001101", 131 => "011001101", 
    132 => "000101101", 133 => "010101101", 134 => "001101101", 135 => "011101101", 
    136 => "000011101", 137 => "010011101", 138 => "001011101", 139 => "011011101", 
    140 => "000111101", 141 => "010111101", 142 => "001111101", 143 => "011111101", 
    144 => "000010011", 145 => "100010011", 146 => "010010011", 147 => "110010011", 
    148 => "001010011", 149 => "101010011", 150 => "011010011", 151 => "111010011", 
    152 => "000110011", 153 => "100110011", 154 => "010110011", 155 => "110110011", 
    156 => "001110011", 157 => "101110011", 158 => "011110011", 159 => "111110011", 
    160 => "000001011", 161 => "100001011", 162 => "010001011", 163 => "110001011", 
    164 => "001001011", 165 => "101001011", 166 => "011001011", 167 => "111001011", 
    168 => "000101011", 169 => "100101011", 170 => "010101011", 171 => "110101011", 
    172 => "001101011", 173 => "101101011", 174 => "011101011", 175 => "111101011", 
    176 => "000011011", 177 => "100011011", 178 => "010011011", 179 => "110011011", 
    180 => "001011011", 181 => "101011011", 182 => "011011011", 183 => "111011011", 
    184 => "000111011", 185 => "100111011", 186 => "010111011", 187 => "110111011", 
    188 => "001111011", 189 => "101111011", 190 => "011111011", 191 => "111111011", 
    192 => "000000111", 193 => "100000111", 194 => "010000111", 195 => "110000111", 
    196 => "001000111", 197 => "101000111", 198 => "011000111", 199 => "111000111", 
    200 => "000100111", 201 => "100100111", 202 => "010100111", 203 => "110100111", 
    204 => "001100111", 205 => "101100111", 206 => "011100111", 207 => "111100111", 
    208 => "000010111", 209 => "100010111", 210 => "010010111", 211 => "110010111", 
    212 => "001010111", 213 => "101010111", 214 => "011010111", 215 => "111010111", 
    216 => "000110111", 217 => "100110111", 218 => "010110111", 219 => "110110111", 
    220 => "001110111", 221 => "101110111", 222 => "011110111", 223 => "111110111", 
    224 => "000001111", 225 => "100001111", 226 => "010001111", 227 => "110001111", 
    228 => "001001111", 229 => "101001111", 230 => "011001111", 231 => "111001111", 
    232 => "000101111", 233 => "100101111", 234 => "010101111", 235 => "110101111", 
    236 => "001101111", 237 => "101101111", 238 => "011101111", 239 => "111101111", 
    240 => "000011111", 241 => "100011111", 242 => "010011111", 243 => "110011111", 
    244 => "001011111", 245 => "101011111", 246 => "011011111", 247 => "111011111", 
    248 => "000111111", 249 => "100111111", 250 => "010111111", 251 => "110111111", 
    252 => "001111111", 253 => "101111111", 254 => "011111111", 255 => "111111111", 
    256 => "000000000", 257 => "001000000", 258 => "000100000", 259 => "001100000", 
    260 => "000010000", 261 => "001010000", 262 => "000110000", 263 => "001110000", 
    264 => "000001000", 265 => "001001000", 266 => "000101000", 267 => "001101000", 
    268 => "000011000", 269 => "001011000", 270 => "000111000", 271 => "001111000", 
    272 => "000000100", 273 => "001000100", 274 => "000100100", 275 => "001100100", 
    276 => "000010100", 277 => "001010100", 278 => "000110100", 279 => "001110100", 
    280 => "000000011", 281 => "010000011", 282 => "001000011", 283 => "011000011", 
    284 => "000100011", 285 => "010100011", 286 => "001100011", 287 => "011100011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

