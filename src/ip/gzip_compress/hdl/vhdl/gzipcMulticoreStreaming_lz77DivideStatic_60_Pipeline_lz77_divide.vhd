-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_lz77DivideStatic_60_Pipeline_lz77_divide is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    boosterStream_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    boosterStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    boosterStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    boosterStream_empty_n : IN STD_LOGIC;
    boosterStream_read : OUT STD_LOGIC;
    lz77Stream_2_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    lz77Stream_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    lz77Stream_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    lz77Stream_2_full_n : IN STD_LOGIC;
    lz77Stream_2_write : OUT STD_LOGIC;
    outValue_data_sroa_0_0 : IN STD_LOGIC_VECTOR (8 downto 0);
    conv2_i_i164_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    conv2_i_i164_out_ap_vld : OUT STD_LOGIC;
    just_started_4_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    just_started_4_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_lz77DivideStatic_60_Pipeline_lz77_divide is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_0_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_0_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_predicate_op27_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal encodedValue_strobe_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal encodedValue_strobe_reg_344_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal next_state_3_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_state_3_reg_340_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op57_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal encodedValue_strobe_fu_163_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal lz77Stream_2_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal boosterStream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tCh_fu_171_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tCh_reg_348 : STD_LOGIC_VECTOR (7 downto 0);
    signal tLen_fu_175_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tLen_reg_353 : STD_LOGIC_VECTOR (7 downto 0);
    signal tOffset1_2_reg_358 : STD_LOGIC_VECTOR (7 downto 0);
    signal tOffset2_2_reg_363 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln275_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln275_reg_368 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_block_fu_72 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal tOffset1_fu_76 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tOffset2_fu_80 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal next_state_fu_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_next_state_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_i_i164_fu_88 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal zext_ln287_fu_224_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln290_fu_236_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_258_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln283_fu_270_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal boosterStream_read_local : STD_LOGIC;
    signal tmp_172_fu_281_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal lz77Stream_2_write_local : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_310 : BOOLEAN;
    signal ap_condition_313 : BOOLEAN;
    signal ap_condition_309 : BOOLEAN;
    signal ap_condition_321 : BOOLEAN;
    signal ap_condition_324 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    conv2_i_i164_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    conv2_i_i164_fu_88 <= outValue_data_sroa_0_0;
                elsif ((ap_const_boolean_1 = ap_condition_313)) then 
                    conv2_i_i164_fu_88 <= zext_ln283_fu_270_p1;
                elsif ((ap_const_boolean_1 = ap_condition_310)) then 
                    conv2_i_i164_fu_88 <= tmp_s_fu_258_p3;
                elsif (((next_state_3_reg_340 = ap_const_lv32_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    conv2_i_i164_fu_88 <= zext_ln290_fu_236_p1;
                elsif (((next_state_3_reg_340 = ap_const_lv32_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    conv2_i_i164_fu_88 <= zext_ln287_fu_224_p1;
                end if;
            end if; 
        end if;
    end process;

    last_block_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    last_block_fu_72 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_condition_309)) then 
                    last_block_fu_72 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    next_state_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_324)) then 
                    next_state_fu_84(0) <= '0';
                    next_state_fu_84(1) <= '0';
                elsif ((ap_const_boolean_1 = ap_condition_321)) then 
                    next_state_fu_84(0) <= '1';
                    next_state_fu_84(1) <= '0';
                elsif (((ap_sig_allocacmp_next_state_3 = ap_const_lv32_2) and (ap_start_int = ap_const_logic_1))) then 
                    next_state_fu_84(0) <= '0';
                    next_state_fu_84(1) <= '0';
                elsif (((ap_sig_allocacmp_next_state_3 = ap_const_lv32_1) and (ap_start_int = ap_const_logic_1))) then 
                    next_state_fu_84(0) <= '0';
                    next_state_fu_84(1) <= '1';
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    next_state_fu_84(0) <= '0';
                    next_state_fu_84(1) <= '0';
                end if;
            end if; 
        end if;
    end process;

    tOffset1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tOffset1_fu_76 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_condition_309)) then 
                    tOffset1_fu_76 <= tOffset1_2_reg_358;
                end if;
            end if; 
        end if;
    end process;

    tOffset2_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    tOffset2_fu_80 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_condition_309)) then 
                    tOffset2_fu_80 <= tOffset2_2_reg_363;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                encodedValue_strobe_reg_344 <= boosterStream_dout(32 downto 32);
                encodedValue_strobe_reg_344_pp0_iter1_reg <= encodedValue_strobe_reg_344;
                icmp_ln275_reg_368 <= icmp_ln275_fu_205_p2;
                    next_state_3_reg_340(1 downto 0) <= ap_sig_allocacmp_next_state_3(1 downto 0);
                    next_state_3_reg_340_pp0_iter1_reg(1 downto 0) <= next_state_3_reg_340(1 downto 0);
                tCh_reg_348 <= tCh_fu_171_p1;
                tLen_reg_353 <= boosterStream_dout(15 downto 8);
                tOffset1_2_reg_358 <= boosterStream_dout(23 downto 16);
                tOffset2_2_reg_363 <= boosterStream_dout(31 downto 24);
            end if;
        end if;
    end process;
    next_state_3_reg_340(31 downto 2) <= "000000000000000000000000000000";
    next_state_3_reg_340_pp0_iter1_reg(31 downto 2) <= "000000000000000000000000000000";
    next_state_fu_84(31 downto 2) <= "000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state1_pp0_stage0_iter0, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state1_pp0_stage0_iter0, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state1_pp0_stage0_iter0, ap_block_state3_pp0_stage0_iter2, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(boosterStream_empty_n, ap_predicate_op27_read_state1)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_predicate_op27_read_state1 = ap_const_boolean_1) and (boosterStream_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(lz77Stream_2_full_n, ap_predicate_op57_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_predicate_op57_write_state3 = ap_const_boolean_1) and (lz77Stream_2_full_n = ap_const_logic_0));
    end process;


    ap_condition_309_assign_proc : process(ap_enable_reg_pp0_iter1, encodedValue_strobe_reg_344, next_state_3_reg_340)
    begin
                ap_condition_309 <= (not((next_state_3_reg_340 = ap_const_lv32_1)) and not((next_state_3_reg_340 = ap_const_lv32_2)) and (encodedValue_strobe_reg_344 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_310_assign_proc : process(ap_enable_reg_pp0_iter1, encodedValue_strobe_reg_344, next_state_3_reg_340, icmp_ln275_reg_368)
    begin
                ap_condition_310 <= (not((next_state_3_reg_340 = ap_const_lv32_1)) and not((next_state_3_reg_340 = ap_const_lv32_2)) and (encodedValue_strobe_reg_344 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln275_reg_368 = ap_const_lv1_0));
    end process;


    ap_condition_313_assign_proc : process(ap_enable_reg_pp0_iter1, encodedValue_strobe_reg_344, next_state_3_reg_340, icmp_ln275_reg_368)
    begin
                ap_condition_313 <= (not((next_state_3_reg_340 = ap_const_lv32_1)) and not((next_state_3_reg_340 = ap_const_lv32_2)) and (encodedValue_strobe_reg_344 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln275_reg_368 = ap_const_lv1_1));
    end process;


    ap_condition_321_assign_proc : process(encodedValue_strobe_fu_163_p3, icmp_ln275_fu_205_p2, ap_sig_allocacmp_next_state_3, ap_start_int)
    begin
                ap_condition_321 <= (not((ap_sig_allocacmp_next_state_3 = ap_const_lv32_1)) and not((ap_sig_allocacmp_next_state_3 = ap_const_lv32_2)) and (encodedValue_strobe_fu_163_p3 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (icmp_ln275_fu_205_p2 = ap_const_lv1_0));
    end process;


    ap_condition_324_assign_proc : process(encodedValue_strobe_fu_163_p3, icmp_ln275_fu_205_p2, ap_sig_allocacmp_next_state_3, ap_start_int)
    begin
                ap_condition_324 <= (not((ap_sig_allocacmp_next_state_3 = ap_const_lv32_1)) and not((ap_sig_allocacmp_next_state_3 = ap_const_lv32_2)) and (encodedValue_strobe_fu_163_p3 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (icmp_ln275_fu_205_p2 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, encodedValue_strobe_fu_163_p3, ap_sig_allocacmp_next_state_3, ap_start_int)
    begin
        if ((not((ap_sig_allocacmp_next_state_3 = ap_const_lv32_1)) and not((ap_sig_allocacmp_next_state_3 = ap_const_lv32_2)) and (encodedValue_strobe_fu_163_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op27_read_state1_assign_proc : process(ap_sig_allocacmp_next_state_3)
    begin
                ap_predicate_op27_read_state1 <= (not((ap_sig_allocacmp_next_state_3 = ap_const_lv32_1)) and not((ap_sig_allocacmp_next_state_3 = ap_const_lv32_2)));
    end process;


    ap_predicate_op57_write_state3_assign_proc : process(encodedValue_strobe_reg_344_pp0_iter1_reg, next_state_3_reg_340_pp0_iter1_reg)
    begin
                ap_predicate_op57_write_state3 <= ((next_state_3_reg_340_pp0_iter1_reg = ap_const_lv32_2) or ((next_state_3_reg_340_pp0_iter1_reg = ap_const_lv32_1) or (encodedValue_strobe_reg_344_pp0_iter1_reg = ap_const_lv1_1)));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_next_state_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, next_state_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_next_state_3 <= ap_const_lv32_0_1;
        else 
            ap_sig_allocacmp_next_state_3 <= next_state_fu_84;
        end if; 
    end process;


    boosterStream_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, boosterStream_empty_n, ap_predicate_op27_read_state1, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op27_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            boosterStream_blk_n <= boosterStream_empty_n;
        else 
            boosterStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    boosterStream_read <= boosterStream_read_local;

    boosterStream_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op27_read_state1, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op27_read_state1 = ap_const_boolean_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            boosterStream_read_local <= ap_const_logic_1;
        else 
            boosterStream_read_local <= ap_const_logic_0;
        end if; 
    end process;

    conv2_i_i164_out <= conv2_i_i164_fu_88;

    conv2_i_i164_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, encodedValue_strobe_reg_344, next_state_3_reg_340, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if ((not((next_state_3_reg_340 = ap_const_lv32_1)) and not((next_state_3_reg_340 = ap_const_lv32_2)) and (encodedValue_strobe_reg_344 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            conv2_i_i164_out_ap_vld <= ap_const_logic_1;
        else 
            conv2_i_i164_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    encodedValue_strobe_fu_163_p3 <= boosterStream_dout(32 downto 32);
    icmp_ln275_fu_205_p2 <= "1" when (tLen_fu_175_p4 = ap_const_lv8_0) else "0";
    just_started_4_out <= last_block_fu_72;

    just_started_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, encodedValue_strobe_reg_344, next_state_3_reg_340, ap_block_pp0_stage0_11001, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if ((not((next_state_3_reg_340 = ap_const_lv32_1)) and not((next_state_3_reg_340 = ap_const_lv32_2)) and (encodedValue_strobe_reg_344 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            just_started_4_out_ap_vld <= ap_const_logic_1;
        else 
            just_started_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    lz77Stream_2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, lz77Stream_2_full_n, ap_predicate_op57_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op57_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lz77Stream_2_blk_n <= lz77Stream_2_full_n;
        else 
            lz77Stream_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    lz77Stream_2_din <= tmp_172_fu_281_p3;
    lz77Stream_2_write <= lz77Stream_2_write_local;

    lz77Stream_2_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op57_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op57_write_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lz77Stream_2_write_local <= ap_const_logic_1;
        else 
            lz77Stream_2_write_local <= ap_const_logic_0;
        end if; 
    end process;

    tCh_fu_171_p1 <= boosterStream_dout(8 - 1 downto 0);
    tLen_fu_175_p4 <= boosterStream_dout(15 downto 8);
    tmp_172_fu_281_p3 <= (ap_const_lv1_1 & conv2_i_i164_fu_88);
    tmp_s_fu_258_p3 <= (ap_const_lv1_1 & tLen_reg_353);
    zext_ln283_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tCh_reg_348),9));
    zext_ln287_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tOffset1_fu_76),9));
    zext_ln290_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tOffset2_fu_80),9));
end behav;
