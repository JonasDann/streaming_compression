-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_huffmanProcessingUnit_31_Pipeline_hf_proc_static_main is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    lz77Stream_3_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    lz77Stream_3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    lz77Stream_3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    lz77Stream_3_empty_n : IN STD_LOGIC;
    lz77Stream_3_read : OUT STD_LOGIC;
    encodedOutStream_din : OUT STD_LOGIC_VECTOR (32 downto 0);
    encodedOutStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    encodedOutStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    encodedOutStream_full_n : IN STD_LOGIC;
    encodedOutStream_write : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (8 downto 0);
    outValue_data_70_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    outValue_data_70_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_huffmanProcessingUnit_31_Pipeline_hf_proc_static_main is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_phi_mux_done_phi_fu_116_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal next_state_load_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal tokenFlag_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op63_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal lz77Stream_3_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal encodedOutStream_blk_n : STD_LOGIC;
    signal done_reg_112 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal next_state_load_load_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tokenFlag_fu_175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal outValue_data_44_fu_199_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal outValue_data_46_fu_251_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal done_237_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal done_237_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_outValue_data_47_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_outValue_data_47_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_outValue_data_47_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal inValue_in_in_in_fu_70 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal trunc_ln242_fu_183_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal outValue_strobe_fu_74 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_state_fu_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outValue_data_fu_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal outValue_data_43_fu_220_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal outValue_data_45_fu_281_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal lz77Stream_3_read_local : STD_LOGIC;
    signal tmp_s_fu_317_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal encodedOutStream_write_local : STD_LOGIC;
    signal zext_ln222_fu_168_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln262_fu_195_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln257_fu_216_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln247_fu_247_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_273_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal nextValue_strobe_fu_187_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_141 : BOOLEAN;
    signal ap_condition_119 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_outValue_data_47_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_119)) then
                if ((ap_const_boolean_1 = ap_condition_141)) then 
                    ap_phi_reg_pp0_iter2_outValue_data_47_reg_124 <= outValue_data_46_fu_251_p5;
                elsif (((ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (next_state_load_load_fu_172_p1 = ap_const_lv32_3))) then 
                    ap_phi_reg_pp0_iter2_outValue_data_47_reg_124 <= outValue_data_44_fu_199_p5;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_outValue_data_47_reg_124 <= ap_phi_reg_pp0_iter1_outValue_data_47_reg_124;
                end if;
            end if; 
        end if;
    end process;

    done_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (done_reg_112 = ap_const_lv1_0))) then 
                done_reg_112 <= done_237_reg_383;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                done_reg_112 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    inValue_in_in_in_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    inValue_in_in_in_fu_70 <= empty;
                elsif (((ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    inValue_in_in_in_fu_70 <= trunc_ln242_fu_183_p1;
                end if;
            end if; 
        end if;
    end process;

    next_state_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tokenFlag_fu_175_p3 = ap_const_lv1_1) and (next_state_load_load_fu_172_p1 = ap_const_lv32_0))) then 
                next_state_fu_78(0) <= '0';
                next_state_fu_78(1) <= '1';
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (tokenFlag_fu_175_p3 = ap_const_lv1_0) and (next_state_load_load_fu_172_p1 = ap_const_lv32_0)) or ((ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (next_state_load_load_fu_172_p1 = ap_const_lv32_3)))) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
                next_state_fu_78(0) <= '0';
                next_state_fu_78(1) <= '0';
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (next_state_load_load_fu_172_p1 = ap_const_lv32_2))) then 
                next_state_fu_78(0) <= '1';
                next_state_fu_78(1) <= '1';
            end if; 
        end if;
    end process;

    outValue_data_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tokenFlag_fu_175_p3 = ap_const_lv1_1) and (next_state_load_load_fu_172_p1 = ap_const_lv32_0))) then 
                outValue_data_fu_82 <= outValue_data_45_fu_281_p5;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (tokenFlag_fu_175_p3 = ap_const_lv1_0) and (next_state_load_load_fu_172_p1 = ap_const_lv32_0)) or ((ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (next_state_load_load_fu_172_p1 = ap_const_lv32_3)))) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
                outValue_data_fu_82 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (next_state_load_load_fu_172_p1 = ap_const_lv32_2))) then 
                outValue_data_fu_82 <= outValue_data_43_fu_220_p5;
            end if; 
        end if;
    end process;

    outValue_strobe_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                outValue_strobe_fu_74 <= ap_const_lv1_1;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (next_state_load_load_fu_172_p1 = ap_const_lv32_2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (next_state_load_load_fu_172_p1 = ap_const_lv32_3)))) then 
                outValue_strobe_fu_74 <= grp_fu_139_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_outValue_data_47_reg_124 <= ap_phi_reg_pp0_iter0_outValue_data_47_reg_124;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                done_237_reg_383 <= done_237_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    next_state_load_reg_365(1 downto 0) <= next_state_fu_78(1 downto 0);
                tokenFlag_reg_369 <= zext_ln222_fu_168_p1(8 downto 8);
            end if;
        end if;
    end process;
    next_state_load_reg_365(31 downto 2) <= "000000000000000000000000000000";
    next_state_fu_78(31 downto 2) <= "000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(lz77Stream_3_empty_n, ap_phi_mux_done_phi_fu_116_p4)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (lz77Stream_3_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(encodedOutStream_full_n, ap_predicate_op63_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_predicate_op63_write_state3 = ap_const_boolean_1) and (encodedOutStream_full_n = ap_const_logic_0));
    end process;


    ap_condition_119_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_119 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_141_assign_proc : process(ap_phi_mux_done_phi_fu_116_p4, next_state_load_load_fu_172_p1, tokenFlag_fu_175_p3)
    begin
                ap_condition_141 <= ((ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (tokenFlag_fu_175_p3 = ap_const_lv1_0) and (next_state_load_load_fu_172_p1 = ap_const_lv32_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_phi_mux_done_phi_fu_116_p4, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_done_phi_fu_116_p4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, done_reg_112, done_237_reg_383)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (done_reg_112 = ap_const_lv1_0))) then 
            ap_phi_mux_done_phi_fu_116_p4 <= done_237_reg_383;
        else 
            ap_phi_mux_done_phi_fu_116_p4 <= done_reg_112;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_outValue_data_47_reg_124 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op63_write_state3_assign_proc : process(next_state_load_reg_365, tokenFlag_reg_369)
    begin
                ap_predicate_op63_write_state3 <= ((next_state_load_reg_365 = ap_const_lv32_3) or ((tokenFlag_reg_369 = ap_const_lv1_0) and (next_state_load_reg_365 = ap_const_lv32_0)));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    done_237_fu_303_p2 <= (nextValue_strobe_fu_187_p3 xor ap_const_lv1_1);

    encodedOutStream_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, encodedOutStream_full_n, ap_predicate_op63_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op63_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            encodedOutStream_blk_n <= encodedOutStream_full_n;
        else 
            encodedOutStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    encodedOutStream_din <= tmp_s_fu_317_p3;
    encodedOutStream_write <= encodedOutStream_write_local;

    encodedOutStream_write_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op63_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op63_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            encodedOutStream_write_local <= ap_const_logic_1;
        else 
            encodedOutStream_write_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_139_p2 <= (outValue_strobe_fu_74 xor ap_const_lv1_1);

    lz77Stream_3_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, lz77Stream_3_empty_n, ap_phi_mux_done_phi_fu_116_p4, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lz77Stream_3_blk_n <= lz77Stream_3_empty_n;
        else 
            lz77Stream_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    lz77Stream_3_read <= lz77Stream_3_read_local;

    lz77Stream_3_read_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_phi_mux_done_phi_fu_116_p4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lz77Stream_3_read_local <= ap_const_logic_1;
        else 
            lz77Stream_3_read_local <= ap_const_logic_0;
        end if; 
    end process;

    nextValue_strobe_fu_187_p3 <= lz77Stream_3_dout(9 downto 9);
    next_state_load_load_fu_172_p1 <= next_state_fu_78;
    outValue_data_43_fu_220_p5 <= (outValue_data_fu_82(31 downto 24) & trunc_ln257_fu_216_p1 & outValue_data_fu_82(15 downto 0));
    outValue_data_44_fu_199_p5 <= (trunc_ln262_fu_195_p1 & outValue_data_fu_82(23 downto 0));
    outValue_data_45_fu_281_p5 <= (outValue_data_fu_82(31 downto 16) & tmp_fu_273_p3);
    outValue_data_46_fu_251_p5 <= (outValue_data_fu_82(31 downto 8) & trunc_ln247_fu_247_p1);
    outValue_data_70_out <= outValue_data_fu_82;

    outValue_data_70_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_done_phi_fu_116_p4, ap_loop_exit_ready, ap_block_pp0_stage0_11001)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_done_phi_fu_116_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            outValue_data_70_out_ap_vld <= ap_const_logic_1;
        else 
            outValue_data_70_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_273_p3 <= (trunc_ln247_fu_247_p1 & ap_const_lv8_0);
    tmp_s_fu_317_p3 <= (outValue_strobe_fu_74 & ap_phi_reg_pp0_iter2_outValue_data_47_reg_124);
    tokenFlag_fu_175_p3 <= zext_ln222_fu_168_p1(8 downto 8);
    trunc_ln242_fu_183_p1 <= lz77Stream_3_dout(9 - 1 downto 0);
    trunc_ln247_fu_247_p1 <= inValue_in_in_in_fu_70(8 - 1 downto 0);
    trunc_ln257_fu_216_p1 <= inValue_in_in_in_fu_70(8 - 1 downto 0);
    trunc_ln262_fu_195_p1 <= inValue_in_in_in_fu_70(8 - 1 downto 0);
    zext_ln222_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inValue_in_in_in_fu_70),10));
end behav;
