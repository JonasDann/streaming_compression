-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_lz77DivideStatic_60 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    boosterStream_dout : IN STD_LOGIC_VECTOR (32 downto 0);
    boosterStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    boosterStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    boosterStream_empty_n : IN STD_LOGIC;
    boosterStream_read : OUT STD_LOGIC;
    lz77Stream_2_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    lz77Stream_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    lz77Stream_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    lz77Stream_2_full_n : IN STD_LOGIC;
    lz77Stream_2_write : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_lz77DivideStatic_60 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lz77Stream_2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_start : STD_LOGIC;
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_done : STD_LOGIC;
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_idle : STD_LOGIC;
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_ready : STD_LOGIC;
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_boosterStream_read : STD_LOGIC;
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_lz77Stream_2_din : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_lz77Stream_2_write : STD_LOGIC;
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_conv2_i_i164_out : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_conv2_i_i164_out_ap_vld : STD_LOGIC;
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_just_started_4_out : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_just_started_4_out_ap_vld : STD_LOGIC;
    signal ap_phi_mux_last_block_phi_fu_55_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal last_block_reg_51 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal outValue_data_sroa_0_0_fu_32 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal tmp_s_fu_83_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal lz77Stream_2_write_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_lz77DivideStatic_60_Pipeline_lz77_divide IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        boosterStream_dout : IN STD_LOGIC_VECTOR (32 downto 0);
        boosterStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        boosterStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        boosterStream_empty_n : IN STD_LOGIC;
        boosterStream_read : OUT STD_LOGIC;
        lz77Stream_2_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        lz77Stream_2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        lz77Stream_2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        lz77Stream_2_full_n : IN STD_LOGIC;
        lz77Stream_2_write : OUT STD_LOGIC;
        outValue_data_sroa_0_0 : IN STD_LOGIC_VECTOR (8 downto 0);
        conv2_i_i164_out : OUT STD_LOGIC_VECTOR (8 downto 0);
        conv2_i_i164_out_ap_vld : OUT STD_LOGIC;
        just_started_4_out : OUT STD_LOGIC_VECTOR (0 downto 0);
        just_started_4_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62 : component gzipcMulticoreStreaming_lz77DivideStatic_60_Pipeline_lz77_divide
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_start,
        ap_done => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_done,
        ap_idle => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_idle,
        ap_ready => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_ready,
        boosterStream_dout => boosterStream_dout,
        boosterStream_num_data_valid => ap_const_lv3_0,
        boosterStream_fifo_cap => ap_const_lv3_0,
        boosterStream_empty_n => boosterStream_empty_n,
        boosterStream_read => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_boosterStream_read,
        lz77Stream_2_din => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_lz77Stream_2_din,
        lz77Stream_2_num_data_valid => ap_const_lv3_0,
        lz77Stream_2_fifo_cap => ap_const_lv3_0,
        lz77Stream_2_full_n => lz77Stream_2_full_n,
        lz77Stream_2_write => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_lz77Stream_2_write,
        outValue_data_sroa_0_0 => outValue_data_sroa_0_0_fu_32,
        conv2_i_i164_out => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_conv2_i_i164_out,
        conv2_i_i164_out_ap_vld => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_conv2_i_i164_out_ap_vld,
        just_started_4_out => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_just_started_4_out,
        just_started_4_out_ap_vld => grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_just_started_4_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_phi_mux_last_block_phi_fu_55_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_phi_mux_last_block_phi_fu_55_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_ready = ap_const_logic_1)) then 
                    grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    last_block_reg_51_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((lz77Stream_2_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                last_block_reg_51 <= grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_just_started_4_out;
            elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                last_block_reg_51 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((lz77Stream_2_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                outValue_data_sroa_0_0_fu_32 <= grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_conv2_i_i164_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, lz77Stream_2_full_n, ap_CS_fsm_state4, grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_done, ap_phi_mux_last_block_phi_fu_55_p4, ap_block_state1, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_phi_mux_last_block_phi_fu_55_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((lz77Stream_2_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_done)
    begin
        if ((grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(lz77Stream_2_full_n)
    begin
        if ((lz77Stream_2_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_phi_mux_last_block_phi_fu_55_p4, ap_CS_fsm_state2)
    begin
        if (((ap_phi_mux_last_block_phi_fu_55_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_last_block_phi_fu_55_p4 <= last_block_reg_51;

    ap_ready_assign_proc : process(ap_phi_mux_last_block_phi_fu_55_p4, ap_CS_fsm_state2)
    begin
        if (((ap_phi_mux_last_block_phi_fu_55_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    boosterStream_read_assign_proc : process(grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_boosterStream_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            boosterStream_read <= grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_boosterStream_read;
        else 
            boosterStream_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_start <= grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_ap_start_reg;

    lz77Stream_2_blk_n_assign_proc : process(lz77Stream_2_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            lz77Stream_2_blk_n <= lz77Stream_2_full_n;
        else 
            lz77Stream_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    lz77Stream_2_din_assign_proc : process(grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_lz77Stream_2_din, ap_CS_fsm_state3, tmp_s_fu_83_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lz77Stream_2_din <= grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_lz77Stream_2_din;
        else 
            lz77Stream_2_din <= tmp_s_fu_83_p3;
        end if; 
    end process;


    lz77Stream_2_write_assign_proc : process(grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_lz77Stream_2_write, ap_CS_fsm_state3, lz77Stream_2_write_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lz77Stream_2_write <= grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_lz77Stream_2_write;
        else 
            lz77Stream_2_write <= lz77Stream_2_write_local;
        end if; 
    end process;


    lz77Stream_2_write_local_assign_proc : process(lz77Stream_2_full_n, ap_CS_fsm_state4)
    begin
        if (((lz77Stream_2_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            lz77Stream_2_write_local <= ap_const_logic_1;
        else 
            lz77Stream_2_write_local <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_83_p3 <= (ap_const_lv1_0 & grp_lz77DivideStatic_60_Pipeline_lz77_divide_fu_62_conv2_i_i164_out);
end behav;
