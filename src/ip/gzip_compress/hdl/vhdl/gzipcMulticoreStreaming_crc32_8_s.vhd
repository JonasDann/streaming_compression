-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gzipcMulticoreStreaming_crc32_8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    checksumInitStream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    checksumInitStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumInitStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumInitStream_empty_n : IN STD_LOGIC;
    checksumInitStream_read : OUT STD_LOGIC;
    checksumStream_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    checksumStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumStream_empty_n : IN STD_LOGIC;
    checksumStream_read : OUT STD_LOGIC;
    checksumSizeStream_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    checksumSizeStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumSizeStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    checksumSizeStream_empty_n : IN STD_LOGIC;
    checksumSizeStream_read : OUT STD_LOGIC;
    checksumOutStream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    checksumOutStream_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    checksumOutStream_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    checksumOutStream_full_n : IN STD_LOGIC;
    checksumOutStream_write : OUT STD_LOGIC );
end;


architecture behav of gzipcMulticoreStreaming_crc32_8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal p_ZN2xf8security8internalL7table16E_0_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_ZN2xf8security8internalL7table16E_0_0_ce0 : STD_LOGIC;
    signal p_ZN2xf8security8internalL7table16E_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal checksumInitStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal checksumSizeStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln2442_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal checksumOutStream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal endInPackLenStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endInPackLenStrm_empty_n : STD_LOGIC;
    signal inPackLen_reg_272 : STD_LOGIC_VECTOR (4 downto 0);
    signal endOutStrm_full_n : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal crc_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln2442_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state10 : BOOLEAN;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_done : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_idle : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_ready : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumSizeStream_read : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumStream_read : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out_ap_vld : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out_ap_vld : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_in_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_in_data_out_ap_vld : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_ce0 : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_done : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_idle : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_ready : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_checksumStream_read : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out_ap_vld : STD_LOGIC;
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_ce0 : STD_LOGIC;
    signal e_1_reg_143 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_crc_4_phi_fu_155_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal crc_4_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal endInPackLenStrm_full_n : STD_LOGIC;
    signal endInPackLenStrm_din_local : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal endInPackLenStrm_write_local : STD_LOGIC;
    signal endInPackLenStrm_read_local : STD_LOGIC;
    signal checksumSizeStream_read_local : STD_LOGIC;
    signal checksumInitStream_read_local : STD_LOGIC;
    signal endOutStrm_din_local : STD_LOGIC_VECTOR (0 downto 0);
    signal endOutStrm_write_local : STD_LOGIC;
    signal xor_ln2452_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal checksumOutStream_write_local : STD_LOGIC;
    signal endOutStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endOutStrm_empty_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal endOutStrm_read_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        checksumSizeStream_dout : IN STD_LOGIC_VECTOR (4 downto 0);
        checksumSizeStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumSizeStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumSizeStream_empty_n : IN STD_LOGIC;
        checksumSizeStream_read : OUT STD_LOGIC;
        checksumStream_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        checksumStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumStream_empty_n : IN STD_LOGIC;
        checksumStream_read : OUT STD_LOGIC;
        inPackLen : IN STD_LOGIC_VECTOR (4 downto 0);
        crc : IN STD_LOGIC_VECTOR (31 downto 0);
        inPackLen_1_out : OUT STD_LOGIC_VECTOR (4 downto 0);
        inPackLen_1_out_ap_vld : OUT STD_LOGIC;
        crc_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        crc_1_out_ap_vld : OUT STD_LOGIC;
        in_data_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        in_data_out_ap_vld : OUT STD_LOGIC;
        p_ZN2xf8security8internalL7table16E_0_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_ZN2xf8security8internalL7table16E_0_0_ce0 : OUT STD_LOGIC;
        p_ZN2xf8security8internalL7table16E_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2443_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        checksumStream_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        checksumStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        checksumStream_empty_n : IN STD_LOGIC;
        checksumStream_read : OUT STD_LOGIC;
        in_data_reload : IN STD_LOGIC_VECTOR (63 downto 0);
        crc_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
        inPackLen_1_reload : IN STD_LOGIC_VECTOR (4 downto 0);
        crc_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        crc_4_out_ap_vld : OUT STD_LOGIC;
        p_ZN2xf8security8internalL7table16E_0_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_ZN2xf8security8internalL7table16E_0_0_ce0 : OUT STD_LOGIC;
        p_ZN2xf8security8internalL7table16E_0_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gzipcMulticoreStreaming_crc32_8_s_p_ZN2xf8security8internalL7table16E_0_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gzipcMulticoreStreaming_fifo_w1_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    p_ZN2xf8security8internalL7table16E_0_0_U : component gzipcMulticoreStreaming_crc32_8_s_p_ZN2xf8security8internalL7table16E_0_0_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => p_ZN2xf8security8internalL7table16E_0_0_address0,
        ce0 => p_ZN2xf8security8internalL7table16E_0_0_ce0,
        q0 => p_ZN2xf8security8internalL7table16E_0_0_q0);

    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161 : component gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start,
        ap_done => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_done,
        ap_idle => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_idle,
        ap_ready => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_ready,
        checksumSizeStream_dout => checksumSizeStream_dout,
        checksumSizeStream_num_data_valid => ap_const_lv3_0,
        checksumSizeStream_fifo_cap => ap_const_lv3_0,
        checksumSizeStream_empty_n => checksumSizeStream_empty_n,
        checksumSizeStream_read => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumSizeStream_read,
        checksumStream_dout => checksumStream_dout,
        checksumStream_num_data_valid => ap_const_lv3_0,
        checksumStream_fifo_cap => ap_const_lv3_0,
        checksumStream_empty_n => checksumStream_empty_n,
        checksumStream_read => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumStream_read,
        inPackLen => inPackLen_reg_272,
        crc => crc_reg_277,
        inPackLen_1_out => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out,
        inPackLen_1_out_ap_vld => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out_ap_vld,
        crc_1_out => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out,
        crc_1_out_ap_vld => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out_ap_vld,
        in_data_out => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_in_data_out,
        in_data_out_ap_vld => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_in_data_out_ap_vld,
        p_ZN2xf8security8internalL7table16E_0_0_address0 => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_address0,
        p_ZN2xf8security8internalL7table16E_0_0_ce0 => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_ce0,
        p_ZN2xf8security8internalL7table16E_0_0_q0 => p_ZN2xf8security8internalL7table16E_0_0_q0);

    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190 : component gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2443_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start,
        ap_done => grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_done,
        ap_idle => grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_idle,
        ap_ready => grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_ready,
        checksumStream_dout => checksumStream_dout,
        checksumStream_num_data_valid => ap_const_lv3_0,
        checksumStream_fifo_cap => ap_const_lv3_0,
        checksumStream_empty_n => checksumStream_empty_n,
        checksumStream_read => grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_checksumStream_read,
        in_data_reload => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_in_data_out,
        crc_1_reload => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out,
        inPackLen_1_reload => grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out,
        crc_4_out => grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out,
        crc_4_out_ap_vld => grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out_ap_vld,
        p_ZN2xf8security8internalL7table16E_0_0_address0 => grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_address0,
        p_ZN2xf8security8internalL7table16E_0_0_ce0 => grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_ce0,
        p_ZN2xf8security8internalL7table16E_0_0_q0 => p_ZN2xf8security8internalL7table16E_0_0_q0);

    endInPackLenStrm_fifo_U : component gzipcMulticoreStreaming_fifo_w1_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => endInPackLenStrm_din_local,
        if_full_n => endInPackLenStrm_full_n,
        if_write => endInPackLenStrm_write_local,
        if_dout => endInPackLenStrm_dout,
        if_empty_n => endInPackLenStrm_empty_n,
        if_read => endInPackLenStrm_read_local);

    endOutStrm_fifo_U : component gzipcMulticoreStreaming_fifo_w1_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => endOutStrm_din_local,
        if_full_n => endOutStrm_full_n,
        if_write => endOutStrm_write_local,
        if_dout => endOutStrm_dout,
        if_empty_n => endOutStrm_empty_n,
        if_read => endOutStrm_read_local);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_ready = ap_const_logic_1)) then 
                    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln2442_fu_214_p2 = ap_const_lv1_0))) then 
                    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_ready = ap_const_logic_1)) then 
                    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    crc_4_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln2442_fu_214_p2 = ap_const_lv1_1))) then 
                crc_4_reg_152 <= grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out;
            elsif (((icmp_ln2442_reg_291 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10))) then 
                crc_4_reg_152 <= grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then
                crc_reg_277 <= checksumInitStream_dout;
                inPackLen_reg_272 <= checksumSizeStream_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (endInPackLenStrm_empty_n = ap_const_logic_1)))) then
                e_1_reg_143 <= endInPackLenStrm_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                icmp_ln2442_reg_291 <= icmp_ln2442_fu_214_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state3, endInPackLenStrm_empty_n, ap_block_state4, icmp_ln2442_fu_214_p2, ap_CS_fsm_state8, ap_block_state10, grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_done, grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_done, e_1_reg_143, ap_CS_fsm_state6, ap_CS_fsm_state9, endInPackLenStrm_full_n, ap_block_state1, ap_CS_fsm_state2, endOutStrm_empty_n, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((endInPackLenStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (endInPackLenStrm_empty_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((e_1_reg_143 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((e_1_reg_143 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln2442_fu_214_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10)
    begin
        if ((ap_const_boolean_1 = ap_block_state10)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(endOutStrm_empty_n)
    begin
        if ((endOutStrm_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(endOutStrm_empty_n)
    begin
        if ((endOutStrm_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(endInPackLenStrm_full_n)
    begin
        if ((endInPackLenStrm_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(endInPackLenStrm_empty_n)
    begin
        if ((endInPackLenStrm_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4)
    begin
        if ((ap_const_boolean_1 = ap_block_state4)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_done)
    begin
        if ((grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_done)
    begin
        if ((grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, endInPackLenStrm_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (endInPackLenStrm_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state10_assign_proc : process(checksumSizeStream_empty_n, checksumOutStream_full_n, icmp_ln2442_reg_291, endInPackLenStrm_empty_n, endOutStrm_full_n)
    begin
                ap_block_state10 <= ((checksumOutStream_full_n = ap_const_logic_0) or (endOutStrm_full_n = ap_const_logic_0) or (endInPackLenStrm_empty_n = ap_const_logic_0) or ((icmp_ln2442_reg_291 = ap_const_lv1_0) and (checksumSizeStream_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state4_assign_proc : process(checksumInitStream_empty_n, checksumSizeStream_empty_n, endOutStrm_full_n, e_1_reg_143)
    begin
                ap_block_state4 <= (((e_1_reg_143 = ap_const_lv1_0) and (checksumInitStream_empty_n = ap_const_logic_0)) or ((e_1_reg_143 = ap_const_lv1_0) and (checksumSizeStream_empty_n = ap_const_logic_0)) or ((e_1_reg_143 = ap_const_lv1_1) and (endOutStrm_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, endOutStrm_empty_n, ap_CS_fsm_state12)
    begin
        if (((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_crc_4_phi_fu_155_p4_assign_proc : process(ap_CS_fsm_state10, icmp_ln2442_reg_291, grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out, crc_4_reg_152)
    begin
        if (((icmp_ln2442_reg_291 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_phi_mux_crc_4_phi_fu_155_p4 <= grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out;
        else 
            ap_phi_mux_crc_4_phi_fu_155_p4 <= crc_4_reg_152;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    checksumInitStream_blk_n_assign_proc : process(checksumInitStream_empty_n, ap_CS_fsm_state4, e_1_reg_143)
    begin
        if (((e_1_reg_143 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            checksumInitStream_blk_n <= checksumInitStream_empty_n;
        else 
            checksumInitStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    checksumInitStream_read <= checksumInitStream_read_local;

    checksumInitStream_read_local_assign_proc : process(ap_CS_fsm_state4, ap_block_state4, e_1_reg_143)
    begin
        if (((e_1_reg_143 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then 
            checksumInitStream_read_local <= ap_const_logic_1;
        else 
            checksumInitStream_read_local <= ap_const_logic_0;
        end if; 
    end process;


    checksumOutStream_blk_n_assign_proc : process(checksumOutStream_full_n, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            checksumOutStream_blk_n <= checksumOutStream_full_n;
        else 
            checksumOutStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    checksumOutStream_din <= xor_ln2452_fu_224_p2;
    checksumOutStream_write <= checksumOutStream_write_local;

    checksumOutStream_write_local_assign_proc : process(ap_CS_fsm_state10, ap_block_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10))) then 
            checksumOutStream_write_local <= ap_const_logic_1;
        else 
            checksumOutStream_write_local <= ap_const_logic_0;
        end if; 
    end process;


    checksumSizeStream_blk_n_assign_proc : process(checksumSizeStream_empty_n, ap_CS_fsm_state4, ap_CS_fsm_state10, icmp_ln2442_reg_291, e_1_reg_143)
    begin
        if ((((icmp_ln2442_reg_291 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((e_1_reg_143 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            checksumSizeStream_blk_n <= checksumSizeStream_empty_n;
        else 
            checksumSizeStream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    checksumSizeStream_read_assign_proc : process(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumSizeStream_read, ap_CS_fsm_state6, checksumSizeStream_read_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            checksumSizeStream_read <= grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumSizeStream_read;
        else 
            checksumSizeStream_read <= checksumSizeStream_read_local;
        end if; 
    end process;


    checksumSizeStream_read_local_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, icmp_ln2442_reg_291, ap_block_state4, ap_block_state10, e_1_reg_143)
    begin
        if ((((icmp_ln2442_reg_291 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10)) or ((e_1_reg_143 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4)))) then 
            checksumSizeStream_read_local <= ap_const_logic_1;
        else 
            checksumSizeStream_read_local <= ap_const_logic_0;
        end if; 
    end process;


    checksumStream_read_assign_proc : process(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumStream_read, grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_checksumStream_read, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            checksumStream_read <= grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_checksumStream_read;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            checksumStream_read <= grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumStream_read;
        else 
            checksumStream_read <= ap_const_logic_0;
        end if; 
    end process;


    endInPackLenStrm_din_local_assign_proc : process(ap_CS_fsm_state1, endInPackLenStrm_full_n, ap_block_state1, ap_CS_fsm_state2)
    begin
        if (((endInPackLenStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            endInPackLenStrm_din_local <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            endInPackLenStrm_din_local <= ap_const_lv1_0;
        else 
            endInPackLenStrm_din_local <= "X";
        end if; 
    end process;


    endInPackLenStrm_read_local_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state3, endInPackLenStrm_empty_n, ap_block_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (endInPackLenStrm_empty_n = ap_const_logic_1)))) then 
            endInPackLenStrm_read_local <= ap_const_logic_1;
        else 
            endInPackLenStrm_read_local <= ap_const_logic_0;
        end if; 
    end process;


    endInPackLenStrm_write_local_assign_proc : process(ap_CS_fsm_state1, endInPackLenStrm_full_n, ap_block_state1, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1)) or ((endInPackLenStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            endInPackLenStrm_write_local <= ap_const_logic_1;
        else 
            endInPackLenStrm_write_local <= ap_const_logic_0;
        end if; 
    end process;


    endOutStrm_din_local_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, ap_block_state4, ap_block_state10, e_1_reg_143)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10))) then 
            endOutStrm_din_local <= ap_const_lv1_0;
        elsif (((e_1_reg_143 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4))) then 
            endOutStrm_din_local <= ap_const_lv1_1;
        else 
            endOutStrm_din_local <= "X";
        end if; 
    end process;


    endOutStrm_read_local_assign_proc : process(endOutStrm_empty_n, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            endOutStrm_read_local <= ap_const_logic_1;
        else 
            endOutStrm_read_local <= ap_const_logic_0;
        end if; 
    end process;


    endOutStrm_write_local_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, ap_block_state4, ap_block_state10, e_1_reg_143)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10)) or ((e_1_reg_143 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4)))) then 
            endOutStrm_write_local <= ap_const_logic_1;
        else 
            endOutStrm_write_local <= ap_const_logic_0;
        end if; 
    end process;

    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start <= grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg;
    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start <= grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg;
    icmp_ln2442_fu_214_p2 <= "1" when (grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out = ap_const_lv5_0) else "0";

    internal_ap_ready_assign_proc : process(endOutStrm_empty_n, ap_CS_fsm_state12)
    begin
        if (((endOutStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    p_ZN2xf8security8internalL7table16E_0_0_address0_assign_proc : process(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_address0, grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_address0, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_ZN2xf8security8internalL7table16E_0_0_address0 <= grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_ZN2xf8security8internalL7table16E_0_0_address0 <= grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_address0;
        else 
            p_ZN2xf8security8internalL7table16E_0_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    p_ZN2xf8security8internalL7table16E_0_0_ce0_assign_proc : process(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_ce0, grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_ce0, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            p_ZN2xf8security8internalL7table16E_0_0_ce0 <= grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            p_ZN2xf8security8internalL7table16E_0_0_ce0 <= grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_ce0;
        else 
            p_ZN2xf8security8internalL7table16E_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln2452_fu_224_p2 <= (ap_phi_mux_crc_4_phi_fu_155_p4 xor ap_const_lv32_FFFFFFFF);
end behav;
