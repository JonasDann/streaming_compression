// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_lzBestMatchFilter_6_32768_49_Pipeline_lz_bestMatchFilter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        compressedStream_dout,
        compressedStream_num_data_valid,
        compressedStream_fifo_cap,
        compressedStream_empty_n,
        compressedStream_read,
        compressedStream1_din,
        compressedStream1_num_data_valid,
        compressedStream1_fifo_cap,
        compressedStream1_full_n,
        compressedStream1_write,
        empty_65,
        empty,
        phi_ln366_out,
        phi_ln366_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [32:0] compressedStream_dout;
input  [2:0] compressedStream_num_data_valid;
input  [2:0] compressedStream_fifo_cap;
input   compressedStream_empty_n;
output   compressedStream_read;
output  [32:0] compressedStream1_din;
input  [2:0] compressedStream1_num_data_valid;
input  [2:0] compressedStream1_fifo_cap;
input   compressedStream1_full_n;
output   compressedStream1_write;
input  [31:0] empty_65;
input  [32:0] empty;
output  [31:0] phi_ln366_out;
output   phi_ln366_out_ap_vld;

reg ap_idle;
reg phi_ln366_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] nextVal_strobe_fu_117_p3;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    compressedStream_blk_n;
wire    ap_block_pp0_stage0;
reg    compressedStream1_blk_n;
wire   [31:0] outValue_data_18_fu_166_p3;
reg   [31:0] outValue_data_18_reg_214;
reg    ap_block_pp0_stage0_11001;
reg   [32:0] nextVal_data_104_in_fu_60;
wire    ap_loop_init;
reg   [31:0] outValue_data_fu_64;
wire   [31:0] trunc_ln369_fu_113_p1;
reg    compressedStream_read_local;
wire   [32:0] tmp_s_fu_184_p3;
reg    ap_block_pp0_stage0_01001;
reg    compressedStream1_write_local;
wire   [7:0] match_length_fu_128_p4;
wire   [7:0] compareLen_fu_138_p4;
wire   [0:0] icmp_ln396_fu_148_p2;
wire   [31:0] outValue_data_17_fu_154_p5;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 nextVal_data_104_in_fu_60 = 33'd0;
#0 outValue_data_fu_64 = 32'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            nextVal_data_104_in_fu_60 <= empty;
        end else if (((nextVal_strobe_fu_117_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            nextVal_data_104_in_fu_60 <= compressedStream_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outValue_data_fu_64 <= empty_65;
        end else if (((nextVal_strobe_fu_117_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            outValue_data_fu_64 <= trunc_ln369_fu_113_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outValue_data_18_reg_214 <= outValue_data_18_fu_166_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (nextVal_strobe_fu_117_p3 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        compressedStream1_blk_n = compressedStream1_full_n;
    end else begin
        compressedStream1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        compressedStream1_write_local = 1'b1;
    end else begin
        compressedStream1_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (nextVal_strobe_fu_117_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compressedStream_blk_n = compressedStream_empty_n;
    end else begin
        compressedStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (nextVal_strobe_fu_117_p3 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        compressedStream_read_local = 1'b1;
    end else begin
        compressedStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (nextVal_strobe_fu_117_p3 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln366_out_ap_vld = 1'b1;
    end else begin
        phi_ln366_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((nextVal_strobe_fu_117_p3 == 1'd1) & (compressedStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (compressedStream1_full_n == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_ready = ap_ready_sig;

assign compareLen_fu_138_p4 = {{nextVal_data_104_in_fu_60[15:8]}};

assign compressedStream1_din = tmp_s_fu_184_p3;

assign compressedStream1_write = compressedStream1_write_local;

assign compressedStream_read = compressedStream_read_local;

assign icmp_ln396_fu_148_p2 = ((match_length_fu_128_p4 < compareLen_fu_138_p4) ? 1'b1 : 1'b0);

assign match_length_fu_128_p4 = {{outValue_data_fu_64[15:8]}};

assign nextVal_strobe_fu_117_p3 = nextVal_data_104_in_fu_60[32'd32];

assign outValue_data_17_fu_154_p5 = {{24'd0}, {outValue_data_fu_64[7:0]}};

assign outValue_data_18_fu_166_p3 = ((icmp_ln396_fu_148_p2[0:0] == 1'b1) ? outValue_data_17_fu_154_p5 : outValue_data_fu_64);

assign phi_ln366_out = outValue_data_fu_64;

assign tmp_s_fu_184_p3 = {{1'd1}, {outValue_data_18_reg_214}};

assign trunc_ln369_fu_113_p1 = nextVal_data_104_in_fu_60[31:0];

endmodule //gzipcMulticoreStreaming_lzBestMatchFilter_6_32768_49_Pipeline_lz_bestMatchFilter
