// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_multicoreDistributor_unsigned_int_64_4_8_4096_64_0_Pipeline_init_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        coreStream_dout,
        coreStream_num_data_valid,
        coreStream_fifo_cap,
        coreStream_empty_n,
        coreStream_read,
        storedBufferStream_din,
        storedBufferStream_full_n,
        storedBufferStream_write,
        readSize_out,
        readSize_out_ap_vld,
        last_out,
        last_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [67:0] coreStream_dout;
input  [2:0] coreStream_num_data_valid;
input  [2:0] coreStream_fifo_cap;
input   coreStream_empty_n;
output   coreStream_read;
output  [67:0] storedBufferStream_din;
input   storedBufferStream_full_n;
output   storedBufferStream_write;
output  [7:0] readSize_out;
output   readSize_out_ap_vld;
output  [0:0] last_out;
output   last_out_ap_vld;

reg ap_idle;
reg readSize_out_ap_vld;
reg last_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg   [0:0] and_ln203_reg_182;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] and_ln203_fu_118_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    coreStream_blk_n;
wire    ap_block_pp0_stage0;
reg    storedBufferStream_blk_n;
reg   [0:0] last_reg_82;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] last_2_fu_142_p2;
reg   [0:0] ap_phi_mux_last_phi_fu_85_p4;
wire    ap_loop_init;
reg   [3:0] i_fu_46;
wire   [3:0] i_5_fu_124_p2;
reg   [3:0] ap_sig_allocacmp_i_4;
reg   [7:0] readSize_fu_50;
wire   [7:0] readSize_3_fu_152_p2;
reg    coreStream_read_local;
reg    ap_block_pp0_stage0_01001;
reg    storedBufferStream_write_local;
wire   [0:0] icmp_ln203_fu_106_p2;
wire   [0:0] xor_ln203_fu_112_p2;
wire   [3:0] strobe_fu_138_p1;
wire   [7:0] zext_ln208_fu_148_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_197;
reg    ap_condition_203;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_fu_46 = 4'd0;
#0 readSize_fu_50 = 8'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((1'd1 == and_ln203_fu_118_p2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_46 <= i_5_fu_124_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_46 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_203)) begin
            last_reg_82 <= last_2_fu_142_p2;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            last_reg_82 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            readSize_fu_50 <= 8'd0;
        end else if (((1'd1 == and_ln203_reg_182) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            readSize_fu_50 <= readSize_3_fu_152_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln203_reg_182 <= and_ln203_fu_118_p2;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln203_fu_118_p2) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_197)) begin
            ap_phi_mux_last_phi_fu_85_p4 = last_2_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_last_phi_fu_85_p4 = 1'd0;
        end else begin
            ap_phi_mux_last_phi_fu_85_p4 = last_reg_82;
        end
    end else begin
        ap_phi_mux_last_phi_fu_85_p4 = last_reg_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_4 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln203_reg_182) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coreStream_blk_n = coreStream_empty_n;
    end else begin
        coreStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln203_reg_182) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        coreStream_read_local = 1'b1;
    end else begin
        coreStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'd0 == and_ln203_fu_118_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        last_out_ap_vld = 1'b1;
    end else begin
        last_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'd0 == and_ln203_fu_118_p2) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        readSize_out_ap_vld = 1'b1;
    end else begin
        readSize_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln203_reg_182) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        storedBufferStream_blk_n = storedBufferStream_full_n;
    end else begin
        storedBufferStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln203_reg_182) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        storedBufferStream_write_local = 1'b1;
    end else begin
        storedBufferStream_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln203_fu_118_p2 = (xor_ln203_fu_112_p2 & icmp_ln203_fu_106_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((storedBufferStream_full_n == 1'b0) & (1'd1 == and_ln203_reg_182)) | ((1'd1 == and_ln203_reg_182) & (coreStream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_197 = ((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln203_reg_182) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_203 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln203_reg_182) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign coreStream_read = coreStream_read_local;

assign i_5_fu_124_p2 = (ap_sig_allocacmp_i_4 + 4'd1);

assign icmp_ln203_fu_106_p2 = ((ap_sig_allocacmp_i_4 < 4'd9) ? 1'b1 : 1'b0);

assign last_2_fu_142_p2 = ((strobe_fu_138_p1 == 4'd0) ? 1'b1 : 1'b0);

assign last_out = last_reg_82;

assign readSize_3_fu_152_p2 = (zext_ln208_fu_148_p1 + readSize_fu_50);

assign readSize_out = readSize_fu_50;

assign storedBufferStream_din = coreStream_dout;

assign storedBufferStream_write = storedBufferStream_write_local;

assign strobe_fu_138_p1 = coreStream_dout[3:0];

assign xor_ln203_fu_112_p2 = (ap_phi_mux_last_phi_fu_85_p4 ^ 1'd1);

assign zext_ln208_fu_148_p1 = strobe_fu_138_p1;

endmodule //gzipcMulticoreStreaming_multicoreDistributor_unsigned_int_64_4_8_4096_64_0_Pipeline_init_loop
