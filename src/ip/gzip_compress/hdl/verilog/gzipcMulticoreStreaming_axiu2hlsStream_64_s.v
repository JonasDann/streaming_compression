// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_axiu2hlsStream_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        inStream_TDATA,
        inStream_TVALID,
        inStream_TREADY,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TLAST,
        inStream_din,
        inStream_num_data_valid,
        inStream_fifo_cap,
        inStream_full_n,
        inStream_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] inStream_TDATA;
input   inStream_TVALID;
output   inStream_TREADY;
input  [7:0] inStream_TKEEP;
input  [7:0] inStream_TSTRB;
input  [0:0] inStream_TLAST;
output  [67:0] inStream_din;
input  [2:0] inStream_num_data_valid;
input  [2:0] inStream_fifo_cap;
input   inStream_full_n;
output   inStream_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[67:0] inStream_din;
reg inStream_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    inStream_TDATA_blk_n;
reg    inStream_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [63:0] inData_data_reg_175;
reg    ap_block_state1;
reg   [7:0] inData_keep_reg_180;
reg   [0:0] inData_last_reg_185;
wire    grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_start;
wire    grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_done;
wire    grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_idle;
wire    grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_ready;
wire   [67:0] grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_inStream_din;
wire    grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_inStream_write;
wire    grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_inStream_TREADY;
wire   [63:0] grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_tmpVal_19_out;
wire    grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_tmpVal_19_out_ap_vld;
wire   [7:0] grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_keep_2_out;
wire    grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_keep_2_out_ap_vld;
wire    grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_start;
wire    grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_done;
wire    grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_idle;
wire    grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_ready;
wire   [3:0] grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_cntr_out;
wire    grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_cntr_out_ap_vld;
reg    grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_start_reg;
reg   [6:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [3:0] cntr_loc_fu_58;
wire   [67:0] p_s_fu_136_p3;
reg   [67:0] inStream_din_local;
wire   [67:0] zext_ln183_fu_152_p1;
reg    inStream_write_local;
wire   [64:0] tmp_s_fu_145_p3;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
wire    regslice_both_inStream_V_data_V_U_apdone_blk;
wire   [63:0] inStream_TDATA_int_regslice;
wire    inStream_TVALID_int_regslice;
reg    inStream_TREADY_int_regslice;
wire    regslice_both_inStream_V_data_V_U_ack_in;
wire    regslice_both_inStream_V_keep_V_U_apdone_blk;
wire   [7:0] inStream_TKEEP_int_regslice;
wire    regslice_both_inStream_V_keep_V_U_vld_out;
wire    regslice_both_inStream_V_keep_V_U_ack_in;
wire    regslice_both_inStream_V_strb_V_U_apdone_blk;
wire   [7:0] inStream_TSTRB_int_regslice;
wire    regslice_both_inStream_V_strb_V_U_vld_out;
wire    regslice_both_inStream_V_strb_V_U_ack_in;
wire    regslice_both_inStream_V_last_V_U_apdone_blk;
wire   [0:0] inStream_TLAST_int_regslice;
wire    regslice_both_inStream_V_last_V_U_vld_out;
wire    regslice_both_inStream_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_start_reg = 1'b0;
#0 grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_start_reg = 1'b0;
end

gzipcMulticoreStreaming_axiu2hlsStream_64_Pipeline_axi2Hls grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_start),
    .ap_done(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_done),
    .ap_idle(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_idle),
    .ap_ready(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_ready),
    .inStream_TVALID(inStream_TVALID_int_regslice),
    .inStream_din(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_inStream_din),
    .inStream_num_data_valid(3'd0),
    .inStream_fifo_cap(3'd0),
    .inStream_full_n(inStream_full_n),
    .inStream_write(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_inStream_write),
    .inData_data(inData_data_reg_175),
    .inData_keep(inData_keep_reg_180),
    .inData_last(inData_last_reg_185),
    .inStream_TDATA(inStream_TDATA_int_regslice),
    .inStream_TREADY(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_inStream_TREADY),
    .inStream_TKEEP(inStream_TKEEP_int_regslice),
    .inStream_TSTRB(inStream_TSTRB_int_regslice),
    .inStream_TLAST(inStream_TLAST_int_regslice),
    .tmpVal_19_out(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_tmpVal_19_out),
    .tmpVal_19_out_ap_vld(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_tmpVal_19_out_ap_vld),
    .keep_2_out(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_keep_2_out),
    .keep_2_out_ap_vld(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_keep_2_out_ap_vld)
);

gzipcMulticoreStreaming_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3 grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_start),
    .ap_done(grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_done),
    .ap_idle(grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_idle),
    .ap_ready(grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_ready),
    .keep_2_reload(grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_keep_2_out),
    .cntr_out(grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_cntr_out),
    .cntr_out_ap_vld(grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_cntr_out_ap_vld)
);

gzipcMulticoreStreaming_regslice_both #(
    .DataWidth( 64 ))
regslice_both_inStream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inStream_TDATA),
    .vld_in(inStream_TVALID),
    .ack_in(regslice_both_inStream_V_data_V_U_ack_in),
    .data_out(inStream_TDATA_int_regslice),
    .vld_out(inStream_TVALID_int_regslice),
    .ack_out(inStream_TREADY_int_regslice),
    .apdone_blk(regslice_both_inStream_V_data_V_U_apdone_blk)
);

gzipcMulticoreStreaming_regslice_both #(
    .DataWidth( 8 ))
regslice_both_inStream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inStream_TKEEP),
    .vld_in(inStream_TVALID),
    .ack_in(regslice_both_inStream_V_keep_V_U_ack_in),
    .data_out(inStream_TKEEP_int_regslice),
    .vld_out(regslice_both_inStream_V_keep_V_U_vld_out),
    .ack_out(inStream_TREADY_int_regslice),
    .apdone_blk(regslice_both_inStream_V_keep_V_U_apdone_blk)
);

gzipcMulticoreStreaming_regslice_both #(
    .DataWidth( 8 ))
regslice_both_inStream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inStream_TSTRB),
    .vld_in(inStream_TVALID),
    .ack_in(regslice_both_inStream_V_strb_V_U_ack_in),
    .data_out(inStream_TSTRB_int_regslice),
    .vld_out(regslice_both_inStream_V_strb_V_U_vld_out),
    .ack_out(inStream_TREADY_int_regslice),
    .apdone_blk(regslice_both_inStream_V_strb_V_U_apdone_blk)
);

gzipcMulticoreStreaming_regslice_both #(
    .DataWidth( 1 ))
regslice_both_inStream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inStream_TLAST),
    .vld_in(inStream_TVALID),
    .ack_in(regslice_both_inStream_V_last_V_U_ack_in),
    .data_out(inStream_TLAST_int_regslice),
    .vld_out(regslice_both_inStream_V_last_V_U_vld_out),
    .ack_out(inStream_TREADY_int_regslice),
    .apdone_blk(regslice_both_inStream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((inStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_start_reg <= 1'b1;
        end else if ((grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_ready == 1'b1)) begin
            grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_NS_fsm_state2))) begin
            grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_start_reg <= 1'b1;
        end else if ((grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_ready == 1'b1)) begin
            grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_cntr_out_ap_vld == 1'b1))) begin
        cntr_loc_fu_58 <= grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_cntr_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        inData_data_reg_175 <= inStream_TDATA_int_regslice;
        inData_keep_reg_180 <= inStream_TKEEP_int_regslice;
        inData_last_reg_185 <= inStream_TLAST_int_regslice;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_full_n == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((inStream_full_n == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((inStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inStream_TDATA_blk_n = inStream_TVALID_int_regslice;
    end else begin
        inStream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        inStream_TREADY_int_regslice = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        inStream_TREADY_int_regslice = grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_inStream_TREADY;
    end else begin
        inStream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        inStream_blk_n = inStream_full_n;
    end else begin
        inStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inStream_din = grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_inStream_din;
    end else begin
        inStream_din = inStream_din_local;
    end
end

always @ (*) begin
    if ((inStream_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            inStream_din_local = zext_ln183_fu_152_p1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            inStream_din_local = p_s_fu_136_p3;
        end else begin
            inStream_din_local = 'bx;
        end
    end else begin
        inStream_din_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inStream_write = grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_inStream_write;
    end else begin
        inStream_write = inStream_write_local;
    end
end

always @ (*) begin
    if ((((inStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((inStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)))) begin
        inStream_write_local = 1'b1;
    end else begin
        inStream_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((inStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((inStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((inStream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (inStream_TVALID_int_regslice == 1'b0) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_start = grp_axiu2hlsStream_64_Pipeline_VITIS_LOOP_176_3_fu_108_ap_start_reg;

assign grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_start = grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_ap_start_reg;

assign inStream_TREADY = regslice_both_inStream_V_data_V_U_ack_in;

assign p_s_fu_136_p3 = {{cntr_loc_fu_58}, {grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_tmpVal_19_out}};

assign start_out = real_start;

assign tmp_s_fu_145_p3 = {{1'd0}, {grp_axiu2hlsStream_64_Pipeline_axi2Hls_fu_89_tmpVal_19_out}};

assign zext_ln183_fu_152_p1 = tmp_s_fu_145_p3;

endmodule //gzipcMulticoreStreaming_axiu2hlsStream_64_s
