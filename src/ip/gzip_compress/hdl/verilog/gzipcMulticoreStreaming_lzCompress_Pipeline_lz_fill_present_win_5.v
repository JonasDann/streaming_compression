// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_lzCompress_Pipeline_lz_fill_present_win_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        downStream_2_dout,
        downStream_2_num_data_valid,
        downStream_2_fifo_cap,
        downStream_2_empty_n,
        downStream_2_read,
        present_window_109,
        present_window_108,
        present_window_107,
        present_window_106,
        present_window,
        empty,
        present_window_114_out,
        present_window_114_out_ap_vld,
        present_window_113_out,
        present_window_113_out_ap_vld,
        present_window_112_out,
        present_window_112_out_ap_vld,
        present_window_111_out,
        present_window_111_out_ap_vld,
        present_window_110_out,
        present_window_110_out_ap_vld,
        p_out,
        p_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] downStream_2_dout;
input  [5:0] downStream_2_num_data_valid;
input  [5:0] downStream_2_fifo_cap;
input   downStream_2_empty_n;
output   downStream_2_read;
input  [7:0] present_window_109;
input  [7:0] present_window_108;
input  [7:0] present_window_107;
input  [7:0] present_window_106;
input  [7:0] present_window;
input  [7:0] empty;
output  [7:0] present_window_114_out;
output   present_window_114_out_ap_vld;
output  [7:0] present_window_113_out;
output   present_window_113_out_ap_vld;
output  [7:0] present_window_112_out;
output   present_window_112_out_ap_vld;
output  [7:0] present_window_111_out;
output   present_window_111_out_ap_vld;
output  [7:0] present_window_110_out;
output   present_window_110_out_ap_vld;
output  [7:0] p_out;
output   p_out_ap_vld;

reg ap_idle;
reg present_window_114_out_ap_vld;
reg present_window_113_out_ap_vld;
reg present_window_112_out_ap_vld;
reg present_window_111_out_ap_vld;
reg present_window_110_out_ap_vld;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln253_reg_342;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln253_fu_214_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    downStream_2_blk_n;
wire    ap_block_pp0_stage0;
reg   [2:0] iIdx_3_reg_338;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] iIdx_fu_64;
wire   [2:0] add_ln257_fu_220_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_iIdx_3;
reg   [7:0] present_window_17_fu_68;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [7:0] present_window_18_fu_72;
reg   [7:0] present_window_19_fu_76;
reg   [7:0] present_window_20_fu_80;
wire   [7:0] trunc_ln257_fu_235_p1;
reg   [7:0] present_window_21_fu_84;
reg   [7:0] present_window_22_fu_88;
reg    downStream_2_read_local;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_227;
reg    ap_condition_230;
reg    ap_condition_233;
reg    ap_condition_237;
reg    ap_condition_243;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 iIdx_fu_64 = 3'd0;
#0 present_window_17_fu_68 = 8'd0;
#0 present_window_18_fu_72 = 8'd0;
#0 present_window_19_fu_76 = 8'd0;
#0 present_window_20_fu_80 = 8'd0;
#0 present_window_21_fu_84 = 8'd0;
#0 present_window_22_fu_88 = 8'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln253_fu_214_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            iIdx_fu_64 <= add_ln257_fu_220_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            iIdx_fu_64 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            present_window_17_fu_68 <= present_window;
        end else if ((1'b1 == ap_condition_227)) begin
            present_window_17_fu_68 <= present_window_20_fu_80;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            present_window_18_fu_72 <= present_window_106;
        end else if ((1'b1 == ap_condition_230)) begin
            present_window_18_fu_72 <= present_window_20_fu_80;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            present_window_19_fu_76 <= present_window_107;
        end else if ((1'b1 == ap_condition_233)) begin
            present_window_19_fu_76 <= present_window_20_fu_80;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            present_window_20_fu_80 <= empty;
        end else if (((icmp_ln253_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            present_window_20_fu_80 <= trunc_ln257_fu_235_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            present_window_21_fu_84 <= present_window_108;
        end else if ((1'b1 == ap_condition_237)) begin
            present_window_21_fu_84 <= present_window_20_fu_80;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            present_window_22_fu_88 <= present_window_109;
        end else if ((1'b1 == ap_condition_243)) begin
            present_window_22_fu_88 <= present_window_20_fu_80;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        iIdx_3_reg_338 <= ap_sig_allocacmp_iIdx_3;
        icmp_ln253_reg_342 <= icmp_ln253_fu_214_p2;
    end
end

always @ (*) begin
    if (((icmp_ln253_fu_214_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_iIdx_3 = 3'd0;
    end else begin
        ap_sig_allocacmp_iIdx_3 = iIdx_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln253_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        downStream_2_blk_n = downStream_2_empty_n;
    end else begin
        downStream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln253_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        downStream_2_read_local = 1'b1;
    end else begin
        downStream_2_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln253_reg_342 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln253_reg_342 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        present_window_110_out_ap_vld = 1'b1;
    end else begin
        present_window_110_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln253_reg_342 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        present_window_111_out_ap_vld = 1'b1;
    end else begin
        present_window_111_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln253_reg_342 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        present_window_112_out_ap_vld = 1'b1;
    end else begin
        present_window_112_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln253_reg_342 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        present_window_113_out_ap_vld = 1'b1;
    end else begin
        present_window_113_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln253_reg_342 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        present_window_114_out_ap_vld = 1'b1;
    end else begin
        present_window_114_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln257_fu_220_p2 = (ap_sig_allocacmp_iIdx_3 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln253_reg_342 == 1'd0) & (downStream_2_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_227 = ((iIdx_3_reg_338 == 3'd0) & (icmp_ln253_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_230 = ((iIdx_3_reg_338 == 3'd1) & (icmp_ln253_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_233 = ((iIdx_3_reg_338 == 3'd2) & (icmp_ln253_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_237 = ((iIdx_3_reg_338 == 3'd3) & (icmp_ln253_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_243 = (~(iIdx_3_reg_338 == 3'd3) & ~(iIdx_3_reg_338 == 3'd2) & ~(iIdx_3_reg_338 == 3'd1) & ~(iIdx_3_reg_338 == 3'd0) & (icmp_ln253_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign downStream_2_read = downStream_2_read_local;

assign icmp_ln253_fu_214_p2 = ((ap_sig_allocacmp_iIdx_3 == 3'd5) ? 1'b1 : 1'b0);

assign p_out = present_window_20_fu_80;

assign present_window_110_out = present_window_17_fu_68;

assign present_window_111_out = present_window_18_fu_72;

assign present_window_112_out = present_window_19_fu_76;

assign present_window_113_out = present_window_21_fu_84;

assign present_window_114_out = present_window_22_fu_88;

assign trunc_ln257_fu_235_p1 = downStream_2_dout[7:0];

endmodule //gzipcMulticoreStreaming_lzCompress_Pipeline_lz_fill_present_win_5
