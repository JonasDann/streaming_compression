// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_crc32_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        checksumInitStream_dout,
        checksumInitStream_num_data_valid,
        checksumInitStream_fifo_cap,
        checksumInitStream_empty_n,
        checksumInitStream_read,
        checksumStream_dout,
        checksumStream_num_data_valid,
        checksumStream_fifo_cap,
        checksumStream_empty_n,
        checksumStream_read,
        checksumSizeStream_dout,
        checksumSizeStream_num_data_valid,
        checksumSizeStream_fifo_cap,
        checksumSizeStream_empty_n,
        checksumSizeStream_read,
        checksumOutStream_din,
        checksumOutStream_num_data_valid,
        checksumOutStream_fifo_cap,
        checksumOutStream_full_n,
        checksumOutStream_write
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] checksumInitStream_dout;
input  [2:0] checksumInitStream_num_data_valid;
input  [2:0] checksumInitStream_fifo_cap;
input   checksumInitStream_empty_n;
output   checksumInitStream_read;
input  [63:0] checksumStream_dout;
input  [2:0] checksumStream_num_data_valid;
input  [2:0] checksumStream_fifo_cap;
input   checksumStream_empty_n;
output   checksumStream_read;
input  [4:0] checksumSizeStream_dout;
input  [2:0] checksumSizeStream_num_data_valid;
input  [2:0] checksumSizeStream_fifo_cap;
input   checksumSizeStream_empty_n;
output   checksumSizeStream_read;
output  [31:0] checksumOutStream_din;
input  [5:0] checksumOutStream_num_data_valid;
input  [5:0] checksumOutStream_fifo_cap;
input   checksumOutStream_full_n;
output   checksumOutStream_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg checksumStream_read;
reg checksumSizeStream_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [7:0] p_ZN2xf8security8internalL7table16E_0_0_address0;
reg    p_ZN2xf8security8internalL7table16E_0_0_ce0;
wire   [31:0] p_ZN2xf8security8internalL7table16E_0_0_q0;
reg    checksumInitStream_blk_n;
wire    ap_CS_fsm_state4;
reg    checksumSizeStream_blk_n;
wire    ap_CS_fsm_state10;
reg   [0:0] icmp_ln2442_reg_291;
reg    checksumOutStream_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] endInPackLenStrm_dout;
wire    endInPackLenStrm_empty_n;
reg   [4:0] inPackLen_reg_272;
wire    endOutStrm_full_n;
reg    ap_block_state4;
reg   [31:0] crc_reg_277;
wire   [0:0] icmp_ln2442_fu_214_p2;
wire    ap_CS_fsm_state8;
reg    ap_block_state10;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_done;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_idle;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_ready;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumSizeStream_read;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumStream_read;
wire   [4:0] grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out_ap_vld;
wire   [31:0] grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out_ap_vld;
wire   [63:0] grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_in_data_out;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_in_data_out_ap_vld;
wire   [7:0] grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_address0;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_ce0;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_done;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_idle;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_ready;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_checksumStream_read;
wire   [31:0] grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out_ap_vld;
wire   [7:0] grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_address0;
wire    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_ce0;
reg   [0:0] e_1_reg_143;
reg   [31:0] ap_phi_mux_crc_4_phi_fu_155_p4;
reg   [31:0] crc_4_reg_152;
reg    grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    endInPackLenStrm_full_n;
reg   [0:0] endInPackLenStrm_din_local;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
reg    endInPackLenStrm_write_local;
reg    endInPackLenStrm_read_local;
reg    checksumSizeStream_read_local;
reg    checksumInitStream_read_local;
reg   [0:0] endOutStrm_din_local;
reg    endOutStrm_write_local;
wire   [31:0] xor_ln2452_fu_224_p2;
reg    checksumOutStream_write_local;
wire   [0:0] endOutStrm_dout;
wire    endOutStrm_empty_n;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg    endOutStrm_read_local;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
#0 grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg = 1'b0;
#0 grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg = 1'b0;
end

gzipcMulticoreStreaming_crc32_8_s_p_ZN2xf8security8internalL7table16E_0_0_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
p_ZN2xf8security8internalL7table16E_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZN2xf8security8internalL7table16E_0_0_address0),
    .ce0(p_ZN2xf8security8internalL7table16E_0_0_ce0),
    .q0(p_ZN2xf8security8internalL7table16E_0_0_q0)
);

gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4 grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start),
    .ap_done(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_done),
    .ap_idle(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_idle),
    .ap_ready(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_ready),
    .checksumSizeStream_dout(checksumSizeStream_dout),
    .checksumSizeStream_num_data_valid(3'd0),
    .checksumSizeStream_fifo_cap(3'd0),
    .checksumSizeStream_empty_n(checksumSizeStream_empty_n),
    .checksumSizeStream_read(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumSizeStream_read),
    .checksumStream_dout(checksumStream_dout),
    .checksumStream_num_data_valid(3'd0),
    .checksumStream_fifo_cap(3'd0),
    .checksumStream_empty_n(checksumStream_empty_n),
    .checksumStream_read(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumStream_read),
    .inPackLen(inPackLen_reg_272),
    .crc(crc_reg_277),
    .inPackLen_1_out(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out),
    .inPackLen_1_out_ap_vld(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out_ap_vld),
    .crc_1_out(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out),
    .crc_1_out_ap_vld(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out_ap_vld),
    .in_data_out(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_in_data_out),
    .in_data_out_ap_vld(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_in_data_out_ap_vld),
    .p_ZN2xf8security8internalL7table16E_0_0_address0(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_address0),
    .p_ZN2xf8security8internalL7table16E_0_0_ce0(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_ce0),
    .p_ZN2xf8security8internalL7table16E_0_0_q0(p_ZN2xf8security8internalL7table16E_0_0_q0)
);

gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2443_7 grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start),
    .ap_done(grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_done),
    .ap_idle(grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_idle),
    .ap_ready(grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_ready),
    .checksumStream_dout(checksumStream_dout),
    .checksumStream_num_data_valid(3'd0),
    .checksumStream_fifo_cap(3'd0),
    .checksumStream_empty_n(checksumStream_empty_n),
    .checksumStream_read(grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_checksumStream_read),
    .in_data_reload(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_in_data_out),
    .crc_1_reload(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out),
    .inPackLen_1_reload(grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out),
    .crc_4_out(grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out),
    .crc_4_out_ap_vld(grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out_ap_vld),
    .p_ZN2xf8security8internalL7table16E_0_0_address0(grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_address0),
    .p_ZN2xf8security8internalL7table16E_0_0_ce0(grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_ce0),
    .p_ZN2xf8security8internalL7table16E_0_0_q0(p_ZN2xf8security8internalL7table16E_0_0_q0)
);

gzipcMulticoreStreaming_fifo_w1_d4_S endInPackLenStrm_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(endInPackLenStrm_din_local),
    .if_full_n(endInPackLenStrm_full_n),
    .if_write(endInPackLenStrm_write_local),
    .if_dout(endInPackLenStrm_dout),
    .if_empty_n(endInPackLenStrm_empty_n),
    .if_read(endInPackLenStrm_read_local)
);

gzipcMulticoreStreaming_fifo_w1_d4_S endOutStrm_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(endOutStrm_din_local),
    .if_full_n(endOutStrm_full_n),
    .if_write(endOutStrm_write_local),
    .if_dout(endOutStrm_dout),
    .if_empty_n(endOutStrm_empty_n),
    .if_read(endOutStrm_read_local)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((endOutStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg <= 1'b1;
        end else if ((grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_ready == 1'b1)) begin
            grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln2442_fu_214_p2 == 1'd0))) begin
            grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg <= 1'b1;
        end else if ((grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_ready == 1'b1)) begin
            grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln2442_fu_214_p2 == 1'd1))) begin
        crc_4_reg_152 <= grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_crc_1_out;
    end else if (((icmp_ln2442_reg_291 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10))) begin
        crc_4_reg_152 <= grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
        crc_reg_277 <= checksumInitStream_dout;
        inPackLen_reg_272 <= checksumSizeStream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10)) | ((1'b1 == ap_CS_fsm_state3) & (endInPackLenStrm_empty_n == 1'b1)))) begin
        e_1_reg_143 <= endInPackLenStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        icmp_ln2442_reg_291 <= icmp_ln2442_fu_214_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state10)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((endOutStrm_empty_n == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((endOutStrm_empty_n == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((endInPackLenStrm_full_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((endInPackLenStrm_empty_n == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_done == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((endOutStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2442_reg_291 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_phi_mux_crc_4_phi_fu_155_p4 = grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_crc_4_out;
    end else begin
        ap_phi_mux_crc_4_phi_fu_155_p4 = crc_4_reg_152;
    end
end

always @ (*) begin
    if (((e_1_reg_143 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        checksumInitStream_blk_n = checksumInitStream_empty_n;
    end else begin
        checksumInitStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((e_1_reg_143 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
        checksumInitStream_read_local = 1'b1;
    end else begin
        checksumInitStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        checksumOutStream_blk_n = checksumOutStream_full_n;
    end else begin
        checksumOutStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10))) begin
        checksumOutStream_write_local = 1'b1;
    end else begin
        checksumOutStream_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln2442_reg_291 == 1'd0) & (1'b1 == ap_CS_fsm_state10)) | ((e_1_reg_143 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        checksumSizeStream_blk_n = checksumSizeStream_empty_n;
    end else begin
        checksumSizeStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        checksumSizeStream_read = grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumSizeStream_read;
    end else begin
        checksumSizeStream_read = checksumSizeStream_read_local;
    end
end

always @ (*) begin
    if ((((icmp_ln2442_reg_291 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10)) | ((e_1_reg_143 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4)))) begin
        checksumSizeStream_read_local = 1'b1;
    end else begin
        checksumSizeStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        checksumStream_read = grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_checksumStream_read;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        checksumStream_read = grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_checksumStream_read;
    end else begin
        checksumStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((endInPackLenStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        endInPackLenStrm_din_local = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        endInPackLenStrm_din_local = 1'd0;
    end else begin
        endInPackLenStrm_din_local = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10)) | ((1'b1 == ap_CS_fsm_state3) & (endInPackLenStrm_empty_n == 1'b1)))) begin
        endInPackLenStrm_read_local = 1'b1;
    end else begin
        endInPackLenStrm_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1)) | ((endInPackLenStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        endInPackLenStrm_write_local = 1'b1;
    end else begin
        endInPackLenStrm_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10))) begin
        endOutStrm_din_local = 1'd0;
    end else if (((e_1_reg_143 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
        endOutStrm_din_local = 1'd1;
    end else begin
        endOutStrm_din_local = 'bx;
    end
end

always @ (*) begin
    if ((((endOutStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((endOutStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        endOutStrm_read_local = 1'b1;
    end else begin
        endOutStrm_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10)) | ((e_1_reg_143 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4)))) begin
        endOutStrm_write_local = 1'b1;
    end else begin
        endOutStrm_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((endOutStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_ZN2xf8security8internalL7table16E_0_0_address0 = grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_ZN2xf8security8internalL7table16E_0_0_address0 = grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_address0;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_ZN2xf8security8internalL7table16E_0_0_ce0 = grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_p_ZN2xf8security8internalL7table16E_0_0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_ZN2xf8security8internalL7table16E_0_0_ce0 = grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_p_ZN2xf8security8internalL7table16E_0_0_ce0;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((endInPackLenStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (endInPackLenStrm_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((e_1_reg_143 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((e_1_reg_143 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln2442_fu_214_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'b0 == ap_block_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((endOutStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((endOutStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (endInPackLenStrm_full_n == 1'b0) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state10 = ((checksumOutStream_full_n == 1'b0) | (endOutStrm_full_n == 1'b0) | (endInPackLenStrm_empty_n == 1'b0) | ((icmp_ln2442_reg_291 == 1'd0) & (checksumSizeStream_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4 = (((e_1_reg_143 == 1'd0) & (checksumInitStream_empty_n == 1'b0)) | ((e_1_reg_143 == 1'd0) & (checksumSizeStream_empty_n == 1'b0)) | ((e_1_reg_143 == 1'd1) & (endOutStrm_full_n == 1'b0)));
end

assign ap_ready = internal_ap_ready;

assign checksumInitStream_read = checksumInitStream_read_local;

assign checksumOutStream_din = xor_ln2452_fu_224_p2;

assign checksumOutStream_write = checksumOutStream_write_local;

assign grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start = grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_ap_start_reg;

assign grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start = grp_crc32_8_Pipeline_VITIS_LOOP_2443_7_fu_190_ap_start_reg;

assign icmp_ln2442_fu_214_p2 = ((grp_crc32_8_Pipeline_VITIS_LOOP_2412_4_fu_161_inPackLen_1_out == 5'd0) ? 1'b1 : 1'b0);

assign start_out = real_start;

assign xor_ln2452_fu_224_p2 = (ap_phi_mux_crc_4_phi_fu_155_p4 ^ 32'd4294967295);

endmodule //gzipcMulticoreStreaming_crc32_8_s
