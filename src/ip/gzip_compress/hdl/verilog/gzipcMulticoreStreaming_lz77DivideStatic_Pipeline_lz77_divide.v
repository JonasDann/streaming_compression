// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_lz77DivideStatic_Pipeline_lz77_divide (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        boosterStream_dout,
        boosterStream_num_data_valid,
        boosterStream_fifo_cap,
        boosterStream_empty_n,
        boosterStream_read,
        lz77Stream_0_din,
        lz77Stream_0_num_data_valid,
        lz77Stream_0_fifo_cap,
        lz77Stream_0_full_n,
        lz77Stream_0_write,
        outValue_data_sroa_0_0,
        conv2_i_i164_out,
        conv2_i_i164_out_ap_vld,
        just_started_out,
        just_started_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [32:0] boosterStream_dout;
input  [2:0] boosterStream_num_data_valid;
input  [2:0] boosterStream_fifo_cap;
input   boosterStream_empty_n;
output   boosterStream_read;
output  [9:0] lz77Stream_0_din;
input  [2:0] lz77Stream_0_num_data_valid;
input  [2:0] lz77Stream_0_fifo_cap;
input   lz77Stream_0_full_n;
output   lz77Stream_0_write;
input  [8:0] outValue_data_sroa_0_0;
output  [8:0] conv2_i_i164_out;
output   conv2_i_i164_out_ap_vld;
output  [0:0] just_started_out;
output   just_started_out_ap_vld;

reg ap_idle;
reg conv2_i_i164_out_ap_vld;
reg just_started_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_predicate_op27_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] encodedValue_strobe_reg_344;
reg   [0:0] encodedValue_strobe_reg_344_pp0_iter1_reg;
reg   [31:0] next_state_1_reg_340;
reg   [31:0] next_state_1_reg_340_pp0_iter1_reg;
reg    ap_predicate_op57_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] encodedValue_strobe_fu_163_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    lz77Stream_0_blk_n;
wire    ap_block_pp0_stage0;
reg    boosterStream_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] tCh_fu_171_p1;
reg   [7:0] tCh_reg_348;
wire   [7:0] tLen_fu_175_p4;
reg   [7:0] tLen_reg_353;
reg   [7:0] tOffset1_1_reg_358;
reg   [7:0] tOffset2_1_reg_363;
wire   [0:0] icmp_ln275_fu_205_p2;
reg   [0:0] icmp_ln275_reg_368;
reg   [0:0] last_block_fu_72;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [7:0] tOffset1_fu_76;
reg   [7:0] tOffset2_fu_80;
reg   [31:0] next_state_fu_84;
reg   [31:0] ap_sig_allocacmp_next_state_1;
reg   [8:0] conv2_i_i164_fu_88;
wire   [8:0] zext_ln287_fu_224_p1;
wire   [8:0] zext_ln290_fu_236_p1;
wire   [8:0] tmp_s_fu_258_p3;
wire   [8:0] zext_ln283_fu_270_p1;
reg    boosterStream_read_local;
wire   [9:0] tmp_170_fu_281_p3;
reg    ap_block_pp0_stage0_01001;
reg    lz77Stream_0_write_local;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_310;
reg    ap_condition_313;
reg    ap_condition_309;
reg    ap_condition_321;
reg    ap_condition_324;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 last_block_fu_72 = 1'd0;
#0 tOffset1_fu_76 = 8'd0;
#0 tOffset2_fu_80 = 8'd0;
#0 next_state_fu_84 = 32'd0;
#0 conv2_i_i164_fu_88 = 9'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            conv2_i_i164_fu_88 <= outValue_data_sroa_0_0;
        end else if ((1'b1 == ap_condition_313)) begin
            conv2_i_i164_fu_88 <= zext_ln283_fu_270_p1;
        end else if ((1'b1 == ap_condition_310)) begin
            conv2_i_i164_fu_88 <= tmp_s_fu_258_p3;
        end else if (((next_state_1_reg_340 == 32'd2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            conv2_i_i164_fu_88 <= zext_ln290_fu_236_p1;
        end else if (((next_state_1_reg_340 == 32'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            conv2_i_i164_fu_88 <= zext_ln287_fu_224_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            last_block_fu_72 <= 1'd1;
        end else if ((1'b1 == ap_condition_309)) begin
            last_block_fu_72 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_324)) begin
                        next_state_fu_84[0] <= 1'b0;
            next_state_fu_84[1] <= 1'b0;
        end else if ((1'b1 == ap_condition_321)) begin
                        next_state_fu_84[0] <= 1'b1;
            next_state_fu_84[1] <= 1'b0;
        end else if (((ap_sig_allocacmp_next_state_1 == 32'd2) & (ap_start_int == 1'b1))) begin
                        next_state_fu_84[0] <= 1'b0;
            next_state_fu_84[1] <= 1'b0;
        end else if (((ap_sig_allocacmp_next_state_1 == 32'd1) & (ap_start_int == 1'b1))) begin
                        next_state_fu_84[0] <= 1'b0;
            next_state_fu_84[1] <= 1'b1;
        end else if ((ap_loop_init == 1'b1)) begin
                        next_state_fu_84[0] <= 1'b0;
            next_state_fu_84[1] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tOffset1_fu_76 <= 8'd0;
        end else if ((1'b1 == ap_condition_309)) begin
            tOffset1_fu_76 <= tOffset1_1_reg_358;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tOffset2_fu_80 <= 8'd0;
        end else if ((1'b1 == ap_condition_309)) begin
            tOffset2_fu_80 <= tOffset2_1_reg_363;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        encodedValue_strobe_reg_344 <= boosterStream_dout[32'd32];
        encodedValue_strobe_reg_344_pp0_iter1_reg <= encodedValue_strobe_reg_344;
        icmp_ln275_reg_368 <= icmp_ln275_fu_205_p2;
        next_state_1_reg_340[1 : 0] <= ap_sig_allocacmp_next_state_1[1 : 0];
        next_state_1_reg_340_pp0_iter1_reg[1 : 0] <= next_state_1_reg_340[1 : 0];
        tCh_reg_348 <= tCh_fu_171_p1;
        tLen_reg_353 <= {{boosterStream_dout[15:8]}};
        tOffset1_1_reg_358 <= {{boosterStream_dout[23:16]}};
        tOffset2_1_reg_363 <= {{boosterStream_dout[31:24]}};
    end
end

always @ (*) begin
    if ((~(ap_sig_allocacmp_next_state_1 == 32'd1) & ~(ap_sig_allocacmp_next_state_1 == 32'd2) & (encodedValue_strobe_fu_163_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_next_state_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_next_state_1 = next_state_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op27_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        boosterStream_blk_n = boosterStream_empty_n;
    end else begin
        boosterStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op27_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        boosterStream_read_local = 1'b1;
    end else begin
        boosterStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(next_state_1_reg_340 == 32'd1) & ~(next_state_1_reg_340 == 32'd2) & (encodedValue_strobe_reg_344 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        conv2_i_i164_out_ap_vld = 1'b1;
    end else begin
        conv2_i_i164_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(next_state_1_reg_340 == 32'd1) & ~(next_state_1_reg_340 == 32'd2) & (encodedValue_strobe_reg_344 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        just_started_out_ap_vld = 1'b1;
    end else begin
        just_started_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op57_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lz77Stream_0_blk_n = lz77Stream_0_full_n;
    end else begin
        lz77Stream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op57_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lz77Stream_0_write_local = 1'b1;
    end else begin
        lz77Stream_0_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_predicate_op27_read_state1 == 1'b1) & (boosterStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op57_write_state3 == 1'b1) & (lz77Stream_0_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_309 = (~(next_state_1_reg_340 == 32'd1) & ~(next_state_1_reg_340 == 32'd2) & (encodedValue_strobe_reg_344 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_310 = (~(next_state_1_reg_340 == 32'd1) & ~(next_state_1_reg_340 == 32'd2) & (encodedValue_strobe_reg_344 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln275_reg_368 == 1'd0));
end

always @ (*) begin
    ap_condition_313 = (~(next_state_1_reg_340 == 32'd1) & ~(next_state_1_reg_340 == 32'd2) & (encodedValue_strobe_reg_344 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln275_reg_368 == 1'd1));
end

always @ (*) begin
    ap_condition_321 = (~(ap_sig_allocacmp_next_state_1 == 32'd1) & ~(ap_sig_allocacmp_next_state_1 == 32'd2) & (encodedValue_strobe_fu_163_p3 == 1'd1) & (ap_start_int == 1'b1) & (icmp_ln275_fu_205_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_324 = (~(ap_sig_allocacmp_next_state_1 == 32'd1) & ~(ap_sig_allocacmp_next_state_1 == 32'd2) & (encodedValue_strobe_fu_163_p3 == 1'd1) & (ap_start_int == 1'b1) & (icmp_ln275_fu_205_p2 == 1'd1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op27_read_state1 = (~(ap_sig_allocacmp_next_state_1 == 32'd1) & ~(ap_sig_allocacmp_next_state_1 == 32'd2));
end

always @ (*) begin
    ap_predicate_op57_write_state3 = ((next_state_1_reg_340_pp0_iter1_reg == 32'd2) | ((next_state_1_reg_340_pp0_iter1_reg == 32'd1) | (encodedValue_strobe_reg_344_pp0_iter1_reg == 1'd1)));
end

assign ap_ready = ap_ready_sig;

assign boosterStream_read = boosterStream_read_local;

assign conv2_i_i164_out = conv2_i_i164_fu_88;

assign encodedValue_strobe_fu_163_p3 = boosterStream_dout[32'd32];

assign icmp_ln275_fu_205_p2 = ((tLen_fu_175_p4 == 8'd0) ? 1'b1 : 1'b0);

assign just_started_out = last_block_fu_72;

assign lz77Stream_0_din = tmp_170_fu_281_p3;

assign lz77Stream_0_write = lz77Stream_0_write_local;

assign tCh_fu_171_p1 = boosterStream_dout[7:0];

assign tLen_fu_175_p4 = {{boosterStream_dout[15:8]}};

assign tmp_170_fu_281_p3 = {{1'd1}, {conv2_i_i164_fu_88}};

assign tmp_s_fu_258_p3 = {{1'd1}, {tLen_reg_353}};

assign zext_ln283_fu_270_p1 = tCh_reg_348;

assign zext_ln287_fu_224_p1 = tOffset1_fu_76;

assign zext_ln290_fu_236_p1 = tOffset2_fu_80;

always @ (posedge ap_clk) begin
    next_state_1_reg_340[31:2] <= 30'b000000000000000000000000000000;
    next_state_1_reg_340_pp0_iter1_reg[31:2] <= 30'b000000000000000000000000000000;
    next_state_fu_84[31:2] <= 30'b000000000000000000000000000000;
end

endmodule //gzipcMulticoreStreaming_lz77DivideStatic_Pipeline_lz77_divide
