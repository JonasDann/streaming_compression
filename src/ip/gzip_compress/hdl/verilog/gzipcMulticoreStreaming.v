// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gzipcMulticoreStreaming_gzipcMulticoreStreaming,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.406500,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=112,HLS_SYN_DSP=0,HLS_SYN_FF=44643,HLS_SYN_LUT=85274,HLS_VERSION=2024_1}" *)

module gzipcMulticoreStreaming (
        inStream_TDATA,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TLAST,
        outStream_TDATA,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        ap_clk,
        ap_rst_n,
        inStream_TVALID,
        inStream_TREADY,
        outStream_TVALID,
        outStream_TREADY
);


input  [63:0] inStream_TDATA;
input  [7:0] inStream_TKEEP;
input  [7:0] inStream_TSTRB;
input  [0:0] inStream_TLAST;
output  [63:0] outStream_TDATA;
output  [7:0] outStream_TKEEP;
output  [7:0] outStream_TSTRB;
output  [31:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
input   ap_clk;
input   ap_rst_n;
input   inStream_TVALID;
output   inStream_TREADY;
output   outStream_TVALID;
input   outStream_TREADY;

wire   [63:0] gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TDATA;
wire   [7:0] gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TKEEP;
wire   [7:0] gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TSTRB;
wire   [31:0] gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TUSER;
wire   [0:0] gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TLAST;
 reg    ap_rst_n_inv;
wire    gzipMulticoreCompressAxiStream_0_4_8_32_U0_inStream_TREADY;
wire    gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_start;
wire    gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TVALID;
wire    gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_done;
wire    gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_ready;
wire    gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_idle;
wire    gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_continue;

gzipcMulticoreStreaming_gzipMulticoreCompressAxiStream_0_4_8_32_s gzipMulticoreCompressAxiStream_0_4_8_32_U0(
    .inStream_TDATA(inStream_TDATA),
    .inStream_TKEEP(inStream_TKEEP),
    .inStream_TSTRB(inStream_TSTRB),
    .inStream_TLAST(inStream_TLAST),
    .outStream_TDATA(gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TDATA),
    .outStream_TKEEP(gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TKEEP),
    .outStream_TSTRB(gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TSTRB),
    .outStream_TUSER(gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TUSER),
    .outStream_TLAST(gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TLAST),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .inStream_TVALID(inStream_TVALID),
    .inStream_TREADY(gzipMulticoreCompressAxiStream_0_4_8_32_U0_inStream_TREADY),
    .ap_start(gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_start),
    .outStream_TVALID(gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TVALID),
    .outStream_TREADY(outStream_TREADY),
    .ap_done(gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_done),
    .ap_ready(gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_ready),
    .ap_idle(gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_idle),
    .ap_continue(gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_continue)
);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_continue = 1'b1;

assign gzipMulticoreCompressAxiStream_0_4_8_32_U0_ap_start = 1'b1;

assign inStream_TREADY = gzipMulticoreCompressAxiStream_0_4_8_32_U0_inStream_TREADY;

assign outStream_TDATA = gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TDATA;

assign outStream_TKEEP = gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TKEEP;

assign outStream_TLAST = gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TLAST;

assign outStream_TSTRB = gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TSTRB;

assign outStream_TUSER = gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TUSER;

assign outStream_TVALID = gzipMulticoreCompressAxiStream_0_4_8_32_U0_outStream_TVALID;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "gzipcMulticoreStreaming_hls_deadlock_detector.vh"
// synthesis translate_on

reg find_kernel_block = 0;
// synthesis translate_off
`include "gzipcMulticoreStreaming_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //gzipcMulticoreStreaming

