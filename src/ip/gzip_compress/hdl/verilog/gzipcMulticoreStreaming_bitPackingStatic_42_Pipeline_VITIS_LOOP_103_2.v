// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_bitPackingStatic_42_Pipeline_VITIS_LOOP_103_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        huffStream_6_din,
        huffStream_6_num_data_valid,
        huffStream_6_fifo_cap,
        huffStream_6_full_n,
        huffStream_6_write,
        packedBits,
        outValue_data_106_reload,
        zext_ln42,
        outValue_data_111_out,
        outValue_data_111_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [17:0] huffStream_6_din;
input  [2:0] huffStream_6_num_data_valid;
input  [2:0] huffStream_6_fifo_cap;
input   huffStream_6_full_n;
output   huffStream_6_write;
input  [63:0] packedBits;
input  [7:0] outValue_data_106_reload;
input  [7:0] zext_ln42;
output  [7:0] outValue_data_111_out;
output   outValue_data_111_out_ap_vld;

reg ap_idle;
reg outValue_data_111_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln103_fu_138_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    huffStream_6_blk_n;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln108_fu_160_p2;
reg   [0:0] icmp_ln108_reg_275;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] outValue_data_fu_72;
wire   [7:0] outValue_data_76_fu_211_p3;
wire    ap_loop_init;
reg   [63:0] packedBits_1_fu_76;
wire   [63:0] zext_ln105_fu_193_p1;
reg   [8:0] i_fu_80;
wire   [8:0] i_55_fu_166_p2;
reg   [8:0] ap_sig_allocacmp_i_54;
wire   [17:0] p_0_fu_225_p4;
reg    ap_block_pp0_stage0_01001;
reg    huffStream_6_write_local;
wire   [8:0] zext_ln42_cast_fu_116_p1;
wire   [8:0] sub_ln108_fu_144_p2;
wire   [4:0] tmp_fu_150_p4;
wire   [47:0] packedBits_2_fu_183_p4;
wire   [7:0] outValue_data_75_fu_201_p4;
wire   [1:0] select_ln114_fu_218_p3;
wire   [7:0] outValue_data_74_fu_197_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 outValue_data_fu_72 = 8'd0;
#0 packedBits_1_fu_76 = 64'd0;
#0 i_fu_80 = 9'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln103_fu_138_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_80 <= i_55_fu_166_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_80 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            outValue_data_fu_72 <= outValue_data_106_reload;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            outValue_data_fu_72 <= outValue_data_76_fu_211_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            packedBits_1_fu_76 <= packedBits;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            packedBits_1_fu_76 <= zext_ln105_fu_193_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln108_reg_275 <= icmp_ln108_fu_160_p2;
    end
end

always @ (*) begin
    if (((icmp_ln103_fu_138_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_54 = 9'd0;
    end else begin
        ap_sig_allocacmp_i_54 = i_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffStream_6_blk_n = huffStream_6_full_n;
    end else begin
        huffStream_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffStream_6_write_local = 1'b1;
    end else begin
        huffStream_6_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln103_fu_138_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outValue_data_111_out_ap_vld = 1'b1;
    end else begin
        outValue_data_111_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (huffStream_6_full_n == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign huffStream_6_din = p_0_fu_225_p4;

assign huffStream_6_write = huffStream_6_write_local;

assign i_55_fu_166_p2 = (ap_sig_allocacmp_i_54 + 9'd16);

assign icmp_ln103_fu_138_p2 = ((ap_sig_allocacmp_i_54 < zext_ln42_cast_fu_116_p1) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_160_p2 = ((tmp_fu_150_p4 == 5'd0) ? 1'b1 : 1'b0);

assign outValue_data_111_out = outValue_data_fu_72;

assign outValue_data_74_fu_197_p1 = packedBits_1_fu_76[7:0];

assign outValue_data_75_fu_201_p4 = {{packedBits_1_fu_76[15:8]}};

assign outValue_data_76_fu_211_p3 = ((icmp_ln108_reg_275[0:0] == 1'b1) ? outValue_data_fu_72 : outValue_data_75_fu_201_p4);

assign p_0_fu_225_p4 = {{{select_ln114_fu_218_p3}, {outValue_data_76_fu_211_p3}}, {outValue_data_74_fu_197_p1}};

assign packedBits_2_fu_183_p4 = {{packedBits_1_fu_76[63:16]}};

assign select_ln114_fu_218_p3 = ((icmp_ln108_reg_275[0:0] == 1'b1) ? 2'd1 : 2'd2);

assign sub_ln108_fu_144_p2 = (zext_ln42_cast_fu_116_p1 - ap_sig_allocacmp_i_54);

assign tmp_fu_150_p4 = {{sub_ln108_fu_144_p2[8:4]}};

assign zext_ln105_fu_193_p1 = packedBits_2_fu_183_p4;

assign zext_ln42_cast_fu_116_p1 = zext_ln42;

endmodule //gzipcMulticoreStreaming_bitPackingStatic_42_Pipeline_VITIS_LOOP_103_2
