// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        checksumSizeStream_dout,
        checksumSizeStream_num_data_valid,
        checksumSizeStream_fifo_cap,
        checksumSizeStream_empty_n,
        checksumSizeStream_read,
        checksumStream_dout,
        checksumStream_num_data_valid,
        checksumStream_fifo_cap,
        checksumStream_empty_n,
        checksumStream_read,
        inPackLen,
        crc,
        inPackLen_1_out,
        inPackLen_1_out_ap_vld,
        crc_1_out,
        crc_1_out_ap_vld,
        in_data_out,
        in_data_out_ap_vld,
        p_ZN2xf8security8internalL7table16E_0_0_address0,
        p_ZN2xf8security8internalL7table16E_0_0_ce0,
        p_ZN2xf8security8internalL7table16E_0_0_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] checksumSizeStream_dout;
input  [2:0] checksumSizeStream_num_data_valid;
input  [2:0] checksumSizeStream_fifo_cap;
input   checksumSizeStream_empty_n;
output   checksumSizeStream_read;
input  [63:0] checksumStream_dout;
input  [2:0] checksumStream_num_data_valid;
input  [2:0] checksumStream_fifo_cap;
input   checksumStream_empty_n;
output   checksumStream_read;
input  [4:0] inPackLen;
input  [31:0] crc;
output  [4:0] inPackLen_1_out;
output   inPackLen_1_out_ap_vld;
output  [31:0] crc_1_out;
output   crc_1_out_ap_vld;
output  [63:0] in_data_out;
output   in_data_out_ap_vld;
output  [7:0] p_ZN2xf8security8internalL7table16E_0_0_address0;
output   p_ZN2xf8security8internalL7table16E_0_0_ce0;
input  [31:0] p_ZN2xf8security8internalL7table16E_0_0_q0;

reg ap_idle;
reg inPackLen_1_out_ap_vld;
reg crc_1_out_ap_vld;
reg in_data_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln2412_fu_276_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] p_ZN2xf8security8internalL7table16E_0_1_address0;
wire   [31:0] p_ZN2xf8security8internalL7table16E_0_1_q0;
wire   [7:0] p_ZN2xf8security8internalL7table16E_0_2_address0;
wire   [31:0] p_ZN2xf8security8internalL7table16E_0_2_q0;
wire   [7:0] p_ZN2xf8security8internalL7table16E_0_3_address0;
wire   [31:0] p_ZN2xf8security8internalL7table16E_0_3_q0;
wire   [7:0] p_ZN2xf8security8internalL7table16E_0_4_address0;
wire   [31:0] p_ZN2xf8security8internalL7table16E_0_4_q0;
wire   [7:0] p_ZN2xf8security8internalL7table16E_0_5_address0;
wire   [31:0] p_ZN2xf8security8internalL7table16E_0_5_q0;
wire   [7:0] p_ZN2xf8security8internalL7table16E_0_6_address0;
wire   [31:0] p_ZN2xf8security8internalL7table16E_0_6_q0;
wire   [7:0] p_ZN2xf8security8internalL7table16E_0_7_address0;
wire   [31:0] p_ZN2xf8security8internalL7table16E_0_7_q0;
reg    checksumStream_blk_n;
wire    ap_block_pp0_stage0;
reg    checksumSizeStream_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] inPackLen_2_reg_493;
reg   [4:0] inPackLen_2_reg_493_pp0_iter1_reg;
reg   [0:0] icmp_ln2412_reg_498;
reg   [0:0] icmp_ln2412_reg_498_pp0_iter1_reg;
wire   [31:0] trunc_ln2421_fu_287_p1;
reg   [31:0] trunc_ln2421_reg_502;
wire   [31:0] xor_ln2429_2_fu_430_p2;
reg   [31:0] xor_ln2429_2_reg_547;
wire   [63:0] zext_ln2425_fu_301_p1;
wire   [63:0] zext_ln2429_fu_316_p1;
wire   [63:0] zext_ln2429_1_fu_331_p1;
wire   [63:0] zext_ln2429_2_fu_346_p1;
wire   [63:0] zext_ln2429_3_fu_374_p1;
wire   [63:0] zext_ln2429_4_fu_389_p1;
wire   [63:0] zext_ln2429_5_fu_404_p1;
wire   [63:0] zext_ln2429_6_fu_413_p1;
reg   [63:0] in_data_fu_102;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [31:0] crc_1_fu_106;
wire   [31:0] crc_3_fu_454_p2;
reg   [31:0] ap_sig_allocacmp_crc_1_load;
wire    ap_loop_init;
reg   [4:0] inPackLen_1_fu_110;
reg   [4:0] ap_sig_allocacmp_inPackLen_2;
reg    checksumSizeStream_read_local;
reg    checksumStream_read_local;
reg    ap_block_pp0_stage0_01001;
reg    p_ZN2xf8security8internalL7table16E_0_0_ce0_local;
reg    p_ZN2xf8security8internalL7table16E_0_1_ce0_local;
reg    p_ZN2xf8security8internalL7table16E_0_2_ce0_local;
reg    p_ZN2xf8security8internalL7table16E_0_3_ce0_local;
reg    p_ZN2xf8security8internalL7table16E_0_4_ce0_local;
reg    p_ZN2xf8security8internalL7table16E_0_5_ce0_local;
reg    p_ZN2xf8security8internalL7table16E_0_6_ce0_local;
reg    p_ZN2xf8security8internalL7table16E_0_7_ce0_local;
wire   [7:0] tmp_s_fu_291_p4;
wire   [7:0] tmp_210_fu_306_p4;
wire   [7:0] tmp_211_fu_321_p4;
wire   [7:0] tmp_212_fu_336_p4;
wire   [31:0] inTmp_fu_359_p2;
wire   [7:0] tmp_213_fu_364_p4;
wire   [7:0] tmp_214_fu_379_p4;
wire   [7:0] tmp_215_fu_394_p4;
wire   [7:0] trunc_ln2429_fu_409_p1;
wire   [31:0] xor_ln2429_1_fu_424_p2;
wire   [31:0] xor_ln2429_fu_418_p2;
wire   [31:0] xor_ln2429_4_fu_442_p2;
wire   [31:0] xor_ln2429_3_fu_436_p2;
wire   [31:0] xor_ln2429_5_fu_448_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 in_data_fu_102 = 64'd0;
#0 crc_1_fu_106 = 32'd0;
#0 inPackLen_1_fu_110 = 5'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4_p_ZN2xf8security8internalL7table16E_0_1_RObkb #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
p_ZN2xf8security8internalL7table16E_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZN2xf8security8internalL7table16E_0_1_address0),
    .ce0(p_ZN2xf8security8internalL7table16E_0_1_ce0_local),
    .q0(p_ZN2xf8security8internalL7table16E_0_1_q0)
);

gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4_p_ZN2xf8security8internalL7table16E_0_2_ROcud #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
p_ZN2xf8security8internalL7table16E_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZN2xf8security8internalL7table16E_0_2_address0),
    .ce0(p_ZN2xf8security8internalL7table16E_0_2_ce0_local),
    .q0(p_ZN2xf8security8internalL7table16E_0_2_q0)
);

gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4_p_ZN2xf8security8internalL7table16E_0_3_ROdEe #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
p_ZN2xf8security8internalL7table16E_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZN2xf8security8internalL7table16E_0_3_address0),
    .ce0(p_ZN2xf8security8internalL7table16E_0_3_ce0_local),
    .q0(p_ZN2xf8security8internalL7table16E_0_3_q0)
);

gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4_p_ZN2xf8security8internalL7table16E_0_4_ROeOg #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
p_ZN2xf8security8internalL7table16E_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZN2xf8security8internalL7table16E_0_4_address0),
    .ce0(p_ZN2xf8security8internalL7table16E_0_4_ce0_local),
    .q0(p_ZN2xf8security8internalL7table16E_0_4_q0)
);

gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4_p_ZN2xf8security8internalL7table16E_0_5_ROfYi #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
p_ZN2xf8security8internalL7table16E_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZN2xf8security8internalL7table16E_0_5_address0),
    .ce0(p_ZN2xf8security8internalL7table16E_0_5_ce0_local),
    .q0(p_ZN2xf8security8internalL7table16E_0_5_q0)
);

gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4_p_ZN2xf8security8internalL7table16E_0_6_ROg8j #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
p_ZN2xf8security8internalL7table16E_0_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZN2xf8security8internalL7table16E_0_6_address0),
    .ce0(p_ZN2xf8security8internalL7table16E_0_6_ce0_local),
    .q0(p_ZN2xf8security8internalL7table16E_0_6_q0)
);

gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4_p_ZN2xf8security8internalL7table16E_0_7_ROhbi #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
p_ZN2xf8security8internalL7table16E_0_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(p_ZN2xf8security8internalL7table16E_0_7_address0),
    .ce0(p_ZN2xf8security8internalL7table16E_0_7_ce0_local),
    .q0(p_ZN2xf8security8internalL7table16E_0_7_q0)
);

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            crc_1_fu_106 <= crc;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            crc_1_fu_106 <= crc_3_fu_454_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln2412_fu_276_p2 == 1'd1) & (ap_start_int == 1'b1))) begin
            inPackLen_1_fu_110 <= checksumSizeStream_dout;
        end else if ((ap_loop_init == 1'b1)) begin
            inPackLen_1_fu_110 <= inPackLen;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln2412_reg_498 <= icmp_ln2412_fu_276_p2;
        icmp_ln2412_reg_498_pp0_iter1_reg <= icmp_ln2412_reg_498;
        inPackLen_2_reg_493_pp0_iter1_reg <= inPackLen_2_reg_493;
        trunc_ln2421_reg_502 <= trunc_ln2421_fu_287_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inPackLen_2_reg_493 <= ap_sig_allocacmp_inPackLen_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_fu_102 <= checksumStream_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        xor_ln2429_2_reg_547 <= xor_ln2429_2_fu_430_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln2412_fu_276_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_sig_allocacmp_crc_1_load = crc_3_fu_454_p2;
    end else begin
        ap_sig_allocacmp_crc_1_load = crc_1_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_inPackLen_2 = inPackLen;
    end else begin
        ap_sig_allocacmp_inPackLen_2 = inPackLen_1_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln2412_fu_276_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        checksumSizeStream_blk_n = checksumSizeStream_empty_n;
    end else begin
        checksumSizeStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2412_fu_276_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        checksumSizeStream_read_local = 1'b1;
    end else begin
        checksumSizeStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        checksumStream_blk_n = checksumStream_empty_n;
    end else begin
        checksumStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        checksumStream_read_local = 1'b1;
    end else begin
        checksumStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (icmp_ln2412_reg_498_pp0_iter1_reg == 1'd0))) begin
        crc_1_out_ap_vld = 1'b1;
    end else begin
        crc_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (icmp_ln2412_reg_498_pp0_iter1_reg == 1'd0))) begin
        inPackLen_1_out_ap_vld = 1'b1;
    end else begin
        inPackLen_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (icmp_ln2412_reg_498_pp0_iter1_reg == 1'd0))) begin
        in_data_out_ap_vld = 1'b1;
    end else begin
        in_data_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZN2xf8security8internalL7table16E_0_0_ce0_local = 1'b1;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZN2xf8security8internalL7table16E_0_1_ce0_local = 1'b1;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZN2xf8security8internalL7table16E_0_2_ce0_local = 1'b1;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_ZN2xf8security8internalL7table16E_0_3_ce0_local = 1'b1;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_ZN2xf8security8internalL7table16E_0_4_ce0_local = 1'b1;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_4_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_ZN2xf8security8internalL7table16E_0_5_ce0_local = 1'b1;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_ZN2xf8security8internalL7table16E_0_6_ce0_local = 1'b1;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_6_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_ZN2xf8security8internalL7table16E_0_7_ce0_local = 1'b1;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((icmp_ln2412_fu_276_p2 == 1'd1) & (checksumSizeStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (checksumStream_empty_n == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign checksumSizeStream_read = checksumSizeStream_read_local;

assign checksumStream_read = checksumStream_read_local;

assign crc_1_out = crc_1_fu_106;

assign crc_3_fu_454_p2 = (xor_ln2429_5_fu_448_p2 ^ xor_ln2429_2_reg_547);

assign icmp_ln2412_fu_276_p2 = ((ap_sig_allocacmp_inPackLen_2 == 5'd8) ? 1'b1 : 1'b0);

assign inPackLen_1_out = inPackLen_2_reg_493_pp0_iter1_reg;

assign inTmp_fu_359_p2 = (trunc_ln2421_reg_502 ^ ap_sig_allocacmp_crc_1_load);

assign in_data_out = in_data_fu_102;

assign p_ZN2xf8security8internalL7table16E_0_0_address0 = zext_ln2425_fu_301_p1;

assign p_ZN2xf8security8internalL7table16E_0_0_ce0 = p_ZN2xf8security8internalL7table16E_0_0_ce0_local;

assign p_ZN2xf8security8internalL7table16E_0_1_address0 = zext_ln2429_fu_316_p1;

assign p_ZN2xf8security8internalL7table16E_0_2_address0 = zext_ln2429_1_fu_331_p1;

assign p_ZN2xf8security8internalL7table16E_0_3_address0 = zext_ln2429_2_fu_346_p1;

assign p_ZN2xf8security8internalL7table16E_0_4_address0 = zext_ln2429_3_fu_374_p1;

assign p_ZN2xf8security8internalL7table16E_0_5_address0 = zext_ln2429_4_fu_389_p1;

assign p_ZN2xf8security8internalL7table16E_0_6_address0 = zext_ln2429_5_fu_404_p1;

assign p_ZN2xf8security8internalL7table16E_0_7_address0 = zext_ln2429_6_fu_413_p1;

assign tmp_210_fu_306_p4 = {{checksumStream_dout[55:48]}};

assign tmp_211_fu_321_p4 = {{checksumStream_dout[47:40]}};

assign tmp_212_fu_336_p4 = {{checksumStream_dout[39:32]}};

assign tmp_213_fu_364_p4 = {{inTmp_fu_359_p2[31:24]}};

assign tmp_214_fu_379_p4 = {{inTmp_fu_359_p2[23:16]}};

assign tmp_215_fu_394_p4 = {{inTmp_fu_359_p2[15:8]}};

assign tmp_s_fu_291_p4 = {{checksumStream_dout[63:56]}};

assign trunc_ln2421_fu_287_p1 = checksumStream_dout[31:0];

assign trunc_ln2429_fu_409_p1 = inTmp_fu_359_p2[7:0];

assign xor_ln2429_1_fu_424_p2 = (p_ZN2xf8security8internalL7table16E_0_3_q0 ^ p_ZN2xf8security8internalL7table16E_0_2_q0);

assign xor_ln2429_2_fu_430_p2 = (xor_ln2429_fu_418_p2 ^ xor_ln2429_1_fu_424_p2);

assign xor_ln2429_3_fu_436_p2 = (p_ZN2xf8security8internalL7table16E_0_5_q0 ^ p_ZN2xf8security8internalL7table16E_0_4_q0);

assign xor_ln2429_4_fu_442_p2 = (p_ZN2xf8security8internalL7table16E_0_7_q0 ^ p_ZN2xf8security8internalL7table16E_0_6_q0);

assign xor_ln2429_5_fu_448_p2 = (xor_ln2429_4_fu_442_p2 ^ xor_ln2429_3_fu_436_p2);

assign xor_ln2429_fu_418_p2 = (p_ZN2xf8security8internalL7table16E_0_1_q0 ^ p_ZN2xf8security8internalL7table16E_0_0_q0);

assign zext_ln2425_fu_301_p1 = tmp_s_fu_291_p4;

assign zext_ln2429_1_fu_331_p1 = tmp_211_fu_321_p4;

assign zext_ln2429_2_fu_346_p1 = tmp_212_fu_336_p4;

assign zext_ln2429_3_fu_374_p1 = tmp_213_fu_364_p4;

assign zext_ln2429_4_fu_389_p1 = tmp_214_fu_379_p4;

assign zext_ln2429_5_fu_404_p1 = tmp_215_fu_394_p4;

assign zext_ln2429_6_fu_413_p1 = trunc_ln2429_fu_409_p1;

assign zext_ln2429_fu_316_p1 = tmp_210_fu_306_p4;

endmodule //gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2412_4
