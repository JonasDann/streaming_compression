// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_bytePacker_64_4_Pipeline_multicorePacker (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        packedStream_dout,
        packedStream_num_data_valid,
        packedStream_fifo_cap,
        packedStream_empty_n,
        packedStream_read,
        outStream_din,
        outStream_num_data_valid,
        outStream_fifo_cap,
        outStream_full_n,
        outStream_write,
        outVal_data_7_out,
        outVal_data_7_out_ap_vld,
        outVal_data_6_out,
        outVal_data_6_out_ap_vld,
        outVal_data_5_out,
        outVal_data_5_out_ap_vld,
        outVal_data_4_out,
        outVal_data_4_out_ap_vld,
        outVal_data_3_out,
        outVal_data_3_out_ap_vld,
        outVal_data_2_out,
        outVal_data_2_out_ap_vld,
        outVal_data_1_out,
        outVal_data_1_out_ap_vld,
        outVal_data_out,
        outVal_data_out_ap_vld,
        inputWindow_out,
        inputWindow_out_ap_vld,
        inputIdx_4_out,
        inputIdx_4_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [67:0] packedStream_dout;
input  [2:0] packedStream_num_data_valid;
input  [2:0] packedStream_fifo_cap;
input   packedStream_empty_n;
output   packedStream_read;
output  [67:0] outStream_din;
input  [2:0] outStream_num_data_valid;
input  [2:0] outStream_fifo_cap;
input   outStream_full_n;
output   outStream_write;
output  [7:0] outVal_data_7_out;
output   outVal_data_7_out_ap_vld;
output  [7:0] outVal_data_6_out;
output   outVal_data_6_out_ap_vld;
output  [7:0] outVal_data_5_out;
output   outVal_data_5_out_ap_vld;
output  [7:0] outVal_data_4_out;
output   outVal_data_4_out_ap_vld;
output  [7:0] outVal_data_3_out;
output   outVal_data_3_out_ap_vld;
output  [7:0] outVal_data_2_out;
output   outVal_data_2_out_ap_vld;
output  [7:0] outVal_data_1_out;
output   outVal_data_1_out_ap_vld;
output  [7:0] outVal_data_out;
output   outVal_data_out_ap_vld;
output  [63:0] inputWindow_out;
output   inputWindow_out_ap_vld;
output  [3:0] inputIdx_4_out;
output   inputIdx_4_out_ap_vld;

reg ap_idle;
reg outVal_data_7_out_ap_vld;
reg outVal_data_6_out_ap_vld;
reg outVal_data_5_out_ap_vld;
reg outVal_data_4_out_ap_vld;
reg outVal_data_3_out_ap_vld;
reg outVal_data_2_out_ap_vld;
reg outVal_data_1_out_ap_vld;
reg outVal_data_out_ap_vld;
reg inputWindow_out_ap_vld;
reg inputIdx_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg   [0:0] ap_phi_mux_packerDone_phi_fu_258_p4;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_294_reg_777;
reg   [0:0] tmp_294_reg_777_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    packedStream_blk_n;
wire    ap_block_pp0_stage0;
reg    outStream_blk_n;
reg   [0:0] packerDone_reg_255;
reg   [0:0] packerDone_reg_255_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg   [67:0] inVal_reg_740;
reg   [67:0] inVal_reg_740_pp0_iter1_reg;
wire   [3:0] trunc_ln480_fu_271_p1;
reg   [3:0] trunc_ln480_reg_745;
wire   [0:0] packerDone_1_fu_275_p2;
reg   [0:0] packerDone_1_reg_750;
wire   [6:0] shl_ln_fu_308_p3;
reg   [6:0] shl_ln_reg_755;
wire   [0:0] icmp_ln482_fu_320_p2;
reg   [0:0] icmp_ln482_reg_763;
wire   [6:0] trunc_ln482_fu_326_p1;
reg   [6:0] trunc_ln482_reg_771;
wire   [0:0] tmp_294_fu_335_p3;
wire   [63:0] trunc_ln493_fu_569_p1;
reg   [63:0] trunc_ln493_reg_781;
reg    ap_condition_exit_pp0_iter2_stage0;
wire    ap_loop_init;
reg   [3:0] inputIdx_1_fu_132;
wire   [3:0] inputIdx_2_fu_330_p2;
wire   [3:0] inputIdx_fu_352_p3;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [127:0] inputWindow_fu_136;
wire   [127:0] inputWindow_2_fu_484_p2;
wire   [127:0] zext_ln494_fu_583_p1;
reg   [7:0] outVal_data_fu_140;
wire   [7:0] outVal_data_8_fu_490_p1;
reg   [7:0] outVal_data_1_fu_144;
reg   [7:0] outVal_data_2_fu_148;
reg   [7:0] outVal_data_3_fu_152;
reg   [7:0] outVal_data_4_fu_156;
reg   [7:0] outVal_data_5_fu_160;
reg   [7:0] outVal_data_6_fu_164;
reg   [7:0] outVal_data_7_fu_168;
reg    packedStream_read_local;
wire   [67:0] tmp_s_fu_632_p3;
reg    ap_block_pp0_stage0_01001;
reg    outStream_write_local;
wire   [4:0] zext_ln477_fu_284_p1;
wire   [4:0] add_ln477_fu_288_p2;
wire   [7:0] shl_ln482_1_fu_294_p3;
wire   [7:0] zext_ln482_fu_316_p1;
wire   [7:0] add_ln482_fu_302_p2;
wire   [2:0] trunc_ln495_fu_348_p1;
wire   [63:0] tmp_1_fu_373_p4;
wire   [6:0] xor_ln482_fu_386_p2;
wire   [6:0] select_ln482_fu_391_p3;
wire   [6:0] select_ln482_2_fu_401_p3;
wire   [6:0] select_ln482_1_fu_396_p3;
wire   [6:0] xor_ln482_1_fu_407_p2;
wire   [127:0] zext_ln482_1_fu_382_p1;
wire   [127:0] zext_ln482_2_fu_413_p1;
wire   [127:0] shl_ln482_fu_425_p2;
reg   [127:0] tmp_fu_431_p4;
wire   [127:0] zext_ln482_3_fu_417_p1;
wire   [127:0] zext_ln482_4_fu_421_p1;
wire   [127:0] shl_ln482_2_fu_448_p2;
wire   [127:0] lshr_ln482_fu_454_p2;
wire   [127:0] and_ln482_fu_460_p2;
wire   [127:0] xor_ln482_2_fu_466_p2;
wire   [127:0] select_ln482_3_fu_441_p3;
wire   [127:0] and_ln482_1_fu_472_p2;
wire   [127:0] and_ln482_2_fu_478_p2;
wire   [63:0] inputWindow_3_fu_573_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_514;
reg    ap_condition_518;
reg    ap_condition_522;
reg    ap_condition_223;
reg    ap_condition_529;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 inputIdx_1_fu_132 = 4'd0;
#0 inputWindow_fu_136 = 128'd0;
#0 outVal_data_fu_140 = 8'd0;
#0 outVal_data_1_fu_144 = 8'd0;
#0 outVal_data_2_fu_148 = 8'd0;
#0 outVal_data_3_fu_152 = 8'd0;
#0 outVal_data_4_fu_156 = 8'd0;
#0 outVal_data_5_fu_160 = 8'd0;
#0 outVal_data_6_fu_164 = 8'd0;
#0 outVal_data_7_fu_168 = 8'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            inputIdx_1_fu_132 <= 4'd0;
        end else if ((1'b1 == ap_condition_522)) begin
            inputIdx_1_fu_132 <= inputIdx_fu_352_p3;
        end else if ((1'b1 == ap_condition_518)) begin
            inputIdx_1_fu_132 <= inputIdx_2_fu_330_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_223)) begin
        if ((tmp_294_reg_777 == 1'd1)) begin
            inputWindow_fu_136 <= zext_ln494_fu_583_p1;
        end else if ((tmp_294_reg_777 == 1'd0)) begin
            inputWindow_fu_136 <= inputWindow_2_fu_484_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_529)) begin
            packerDone_reg_255 <= packerDone_1_reg_750;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            packerDone_reg_255 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln482_reg_763 <= icmp_ln482_fu_320_p2;
        inVal_reg_740 <= packedStream_dout;
        inVal_reg_740_pp0_iter1_reg <= inVal_reg_740;
        packerDone_reg_255_pp0_iter1_reg <= packerDone_reg_255;
        shl_ln_reg_755[6 : 3] <= shl_ln_fu_308_p3[6 : 3];
        tmp_294_reg_777 <= inputIdx_2_fu_330_p2[32'd3];
        trunc_ln480_reg_745 <= trunc_ln480_fu_271_p1;
        trunc_ln482_reg_771[6 : 3] <= trunc_ln482_fu_326_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd0))) begin
        outVal_data_1_fu_144 <= {{inputWindow_2_fu_484_p2[15:8]}};
        outVal_data_2_fu_148 <= {{inputWindow_2_fu_484_p2[23:16]}};
        outVal_data_3_fu_152 <= {{inputWindow_2_fu_484_p2[31:24]}};
        outVal_data_4_fu_156 <= {{inputWindow_2_fu_484_p2[39:32]}};
        outVal_data_5_fu_160 <= {{inputWindow_2_fu_484_p2[47:40]}};
        outVal_data_6_fu_164 <= {{inputWindow_2_fu_484_p2[55:48]}};
        outVal_data_7_fu_168 <= {{inputWindow_2_fu_484_p2[63:56]}};
        outVal_data_fu_140 <= outVal_data_8_fu_490_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        packerDone_1_reg_750 <= packerDone_1_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_294_reg_777_pp0_iter2_reg <= tmp_294_reg_777;
        trunc_ln493_reg_781 <= trunc_ln493_fu_569_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_phi_mux_packerDone_phi_fu_258_p4 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_514)) begin
            ap_phi_mux_packerDone_phi_fu_258_p4 = packerDone_1_reg_750;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_packerDone_phi_fu_258_p4 = 1'd0;
        end else begin
            ap_phi_mux_packerDone_phi_fu_258_p4 = packerDone_reg_255;
        end
    end else begin
        ap_phi_mux_packerDone_phi_fu_258_p4 = packerDone_reg_255;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        inputIdx_4_out_ap_vld = 1'b1;
    end else begin
        inputIdx_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        inputWindow_out_ap_vld = 1'b1;
    end else begin
        inputWindow_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_294_reg_777_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_blk_n = outStream_full_n;
    end else begin
        outStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_294_reg_777_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        outStream_write_local = 1'b1;
    end else begin
        outStream_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        outVal_data_1_out_ap_vld = 1'b1;
    end else begin
        outVal_data_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        outVal_data_2_out_ap_vld = 1'b1;
    end else begin
        outVal_data_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        outVal_data_3_out_ap_vld = 1'b1;
    end else begin
        outVal_data_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        outVal_data_4_out_ap_vld = 1'b1;
    end else begin
        outVal_data_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        outVal_data_5_out_ap_vld = 1'b1;
    end else begin
        outVal_data_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        outVal_data_6_out_ap_vld = 1'b1;
    end else begin
        outVal_data_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        outVal_data_7_out_ap_vld = 1'b1;
    end else begin
        outVal_data_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd1))) begin
        outVal_data_out_ap_vld = 1'b1;
    end else begin
        outVal_data_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_phi_mux_packerDone_phi_fu_258_p4 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        packedStream_blk_n = packedStream_empty_n;
    end else begin
        packedStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_packerDone_phi_fu_258_p4 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        packedStream_read_local = 1'b1;
    end else begin
        packedStream_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln477_fu_288_p2 = (zext_ln477_fu_284_p1 + 5'd8);

assign add_ln482_fu_302_p2 = ($signed(shl_ln482_1_fu_294_p3) + $signed(8'd255));

assign and_ln482_1_fu_472_p2 = (xor_ln482_2_fu_466_p2 & inputWindow_fu_136);

assign and_ln482_2_fu_478_p2 = (select_ln482_3_fu_441_p3 & and_ln482_fu_460_p2);

assign and_ln482_fu_460_p2 = (shl_ln482_2_fu_448_p2 & lshr_ln482_fu_454_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_phi_mux_packerDone_phi_fu_258_p4 == 1'd0) & (packedStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((tmp_294_reg_777_pp0_iter2_reg == 1'd1) & (outStream_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_223 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (packerDone_reg_255_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_514 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (packerDone_reg_255 == 1'd0));
end

always @ (*) begin
    ap_condition_518 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_294_fu_335_p3 == 1'd0) & (packerDone_reg_255 == 1'd0));
end

always @ (*) begin
    ap_condition_522 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_294_fu_335_p3 == 1'd1) & (packerDone_reg_255 == 1'd0));
end

always @ (*) begin
    ap_condition_529 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (packerDone_reg_255 == 1'd0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln482_fu_320_p2 = ((zext_ln482_fu_316_p1 > add_ln482_fu_302_p2) ? 1'b1 : 1'b0);

assign inputIdx_2_fu_330_p2 = (trunc_ln480_reg_745 + inputIdx_1_fu_132);

assign inputIdx_4_out = inputIdx_1_fu_132;

assign inputIdx_fu_352_p3 = {{1'd0}, {trunc_ln495_fu_348_p1}};

assign inputWindow_2_fu_484_p2 = (and_ln482_2_fu_478_p2 | and_ln482_1_fu_472_p2);

assign inputWindow_3_fu_573_p4 = {{inputWindow_2_fu_484_p2[127:64]}};

assign inputWindow_out = inputWindow_fu_136[63:0];

assign lshr_ln482_fu_454_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln482_4_fu_421_p1;

assign outStream_din = tmp_s_fu_632_p3;

assign outStream_write = outStream_write_local;

assign outVal_data_1_out = outVal_data_1_fu_144;

assign outVal_data_2_out = outVal_data_2_fu_148;

assign outVal_data_3_out = outVal_data_3_fu_152;

assign outVal_data_4_out = outVal_data_4_fu_156;

assign outVal_data_5_out = outVal_data_5_fu_160;

assign outVal_data_6_out = outVal_data_6_fu_164;

assign outVal_data_7_out = outVal_data_7_fu_168;

assign outVal_data_8_fu_490_p1 = inputWindow_2_fu_484_p2[7:0];

assign outVal_data_out = outVal_data_fu_140;

assign packedStream_read = packedStream_read_local;

assign packerDone_1_fu_275_p2 = ((trunc_ln480_fu_271_p1 == 4'd0) ? 1'b1 : 1'b0);

assign select_ln482_1_fu_396_p3 = ((icmp_ln482_reg_763[0:0] == 1'b1) ? trunc_ln482_reg_771 : shl_ln_reg_755);

assign select_ln482_2_fu_401_p3 = ((icmp_ln482_reg_763[0:0] == 1'b1) ? xor_ln482_fu_386_p2 : shl_ln_reg_755);

assign select_ln482_3_fu_441_p3 = ((icmp_ln482_reg_763[0:0] == 1'b1) ? tmp_fu_431_p4 : shl_ln482_fu_425_p2);

assign select_ln482_fu_391_p3 = ((icmp_ln482_reg_763[0:0] == 1'b1) ? shl_ln_reg_755 : trunc_ln482_reg_771);

assign shl_ln482_1_fu_294_p3 = {{add_ln477_fu_288_p2}, {3'd0}};

assign shl_ln482_2_fu_448_p2 = 128'd340282366920938463463374607431768211455 << zext_ln482_3_fu_417_p1;

assign shl_ln482_fu_425_p2 = zext_ln482_1_fu_382_p1 << zext_ln482_2_fu_413_p1;

assign shl_ln_fu_308_p3 = {{inputIdx_1_fu_132}, {3'd0}};

assign tmp_1_fu_373_p4 = {{inVal_reg_740_pp0_iter1_reg[67:4]}};

assign tmp_294_fu_335_p3 = inputIdx_2_fu_330_p2[32'd3];

integer ap_tvar_int_0;

always @ (shl_ln482_fu_425_p2) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_fu_431_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_431_p4[ap_tvar_int_0] = shl_ln482_fu_425_p2[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_s_fu_632_p3 = {{4'd8}, {trunc_ln493_reg_781}};

assign trunc_ln480_fu_271_p1 = packedStream_dout[3:0];

assign trunc_ln482_fu_326_p1 = add_ln482_fu_302_p2[6:0];

assign trunc_ln493_fu_569_p1 = inputWindow_2_fu_484_p2[63:0];

assign trunc_ln495_fu_348_p1 = inputIdx_2_fu_330_p2[2:0];

assign xor_ln482_1_fu_407_p2 = (select_ln482_fu_391_p3 ^ 7'd127);

assign xor_ln482_2_fu_466_p2 = (128'd340282366920938463463374607431768211455 ^ and_ln482_fu_460_p2);

assign xor_ln482_fu_386_p2 = (shl_ln_reg_755 ^ 7'd127);

assign zext_ln477_fu_284_p1 = inputIdx_1_fu_132;

assign zext_ln482_1_fu_382_p1 = tmp_1_fu_373_p4;

assign zext_ln482_2_fu_413_p1 = select_ln482_2_fu_401_p3;

assign zext_ln482_3_fu_417_p1 = select_ln482_1_fu_396_p3;

assign zext_ln482_4_fu_421_p1 = xor_ln482_1_fu_407_p2;

assign zext_ln482_fu_316_p1 = shl_ln_fu_308_p3;

assign zext_ln494_fu_583_p1 = inputWindow_3_fu_573_p4;

always @ (posedge ap_clk) begin
    shl_ln_reg_755[2:0] <= 3'b000;
    trunc_ln482_reg_771[2:0] <= 3'b111;
end

endmodule //gzipcMulticoreStreaming_bytePacker_64_4_Pipeline_multicorePacker
