// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_bitPackingStatic_33_Pipeline_bitpack (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hufCodeStream_dout,
        hufCodeStream_num_data_valid,
        hufCodeStream_fifo_cap,
        hufCodeStream_empty_n,
        hufCodeStream_read,
        huffStream_3_din,
        huffStream_3_num_data_valid,
        huffStream_3_fifo_cap,
        huffStream_3_full_n,
        huffStream_3_write,
        empty,
        outValue_data,
        outValue_data_136_out,
        outValue_data_136_out_ap_vld,
        outValue_data_135_out,
        outValue_data_135_out_ap_vld,
        localBits_out,
        localBits_out_ap_vld,
        last_block_out,
        last_block_out_ap_vld,
        localBits_idx_out,
        localBits_idx_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [19:0] hufCodeStream_dout;
input  [2:0] hufCodeStream_num_data_valid;
input  [2:0] hufCodeStream_fifo_cap;
input   hufCodeStream_empty_n;
output   hufCodeStream_read;
output  [17:0] huffStream_3_din;
input  [2:0] huffStream_3_num_data_valid;
input  [2:0] huffStream_3_fifo_cap;
input   huffStream_3_full_n;
output   huffStream_3_write;
input  [19:0] empty;
input  [7:0] outValue_data;
output  [7:0] outValue_data_136_out;
output   outValue_data_136_out_ap_vld;
output  [7:0] outValue_data_135_out;
output   outValue_data_135_out_ap_vld;
output  [31:0] localBits_out;
output   localBits_out_ap_vld;
output  [0:0] last_block_out;
output   last_block_out_ap_vld;
output  [7:0] localBits_idx_out;
output   localBits_idx_out_ap_vld;

reg ap_idle;
reg outValue_data_136_out_ap_vld;
reg outValue_data_135_out_ap_vld;
reg localBits_out_ap_vld;
reg last_block_out_ap_vld;
reg localBits_idx_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] inValue_strobe_fu_215_p3;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln57_reg_582;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    hufCodeStream_blk_n;
wire    ap_block_pp0_stage0;
reg    huffStream_3_blk_n;
reg   [0:0] last_block_reg_174;
reg    ap_block_pp0_stage0_11001;
reg   [19:0] inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550;
reg   [19:0] inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550_pp0_iter1_reg;
reg   [0:0] inValue_strobe_reg_556;
reg   [0:0] inValue_strobe_reg_556_pp0_iter1_reg;
wire   [0:0] icmp_ln54_fu_268_p2;
reg   [0:0] icmp_ln54_reg_560;
wire   [4:0] trunc_ln54_fu_274_p1;
reg   [4:0] trunc_ln54_reg_568;
wire   [4:0] trunc_ln54_5_fu_278_p1;
reg   [4:0] trunc_ln54_5_reg_576;
wire   [0:0] icmp_ln57_fu_298_p2;
reg   [0:0] ap_phi_mux_last_block_phi_fu_178_p4;
wire    ap_loop_init;
reg   [7:0] localBits_idx_fu_94;
wire   [7:0] localBits_idx_22_fu_304_p2;
wire   [7:0] localBits_idx_21_fu_282_p2;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [31:0] localBits_fu_98;
wire   [31:0] zext_ln59_fu_444_p1;
wire   [31:0] localBits_11_fu_428_p2;
reg   [19:0] inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102;
reg   [19:0] ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load;
reg   [7:0] outValue_data_94_fu_106;
wire   [7:0] outValue_data_96_fu_448_p1;
reg   [7:0] outValue_data_95_fu_110;
reg    hufCodeStream_read_local;
wire   [17:0] tmp_s_fu_466_p3;
reg    ap_block_pp0_stage0_01001;
reg    huffStream_3_write_local;
wire   [3:0] tmp_223_fu_231_p4;
wire   [4:0] zext_ln54_9_fu_244_p1;
wire   [4:0] add_ln54_fu_252_p2;
wire   [9:0] zext_ln54_fu_248_p1;
wire  signed [9:0] sext_ln54_fu_258_p1;
wire   [9:0] add_ln54_4_fu_262_p2;
wire   [7:0] zext_ln53_fu_240_p1;
wire   [3:0] tmp_309_fu_288_p4;
wire   [14:0] trunc_ln50_fu_323_p1;
wire   [4:0] xor_ln54_fu_330_p2;
wire   [4:0] select_ln54_fu_335_p3;
wire   [4:0] select_ln54_14_fu_345_p3;
wire   [4:0] select_ln54_13_fu_340_p3;
wire   [4:0] xor_ln54_9_fu_351_p2;
wire   [31:0] zext_ln54_8_fu_326_p1;
wire   [31:0] zext_ln54_15_fu_357_p1;
wire   [31:0] shl_ln54_fu_369_p2;
reg   [31:0] tmp_308_fu_375_p4;
wire   [31:0] zext_ln54_16_fu_361_p1;
wire   [31:0] zext_ln54_17_fu_365_p1;
wire   [31:0] shl_ln54_5_fu_392_p2;
wire   [31:0] lshr_ln54_fu_398_p2;
wire   [31:0] and_ln54_fu_404_p2;
wire   [31:0] xor_ln54_10_fu_410_p2;
wire   [31:0] select_ln54_15_fu_385_p3;
wire   [31:0] and_ln54_9_fu_416_p2;
wire   [31:0] and_ln54_10_fu_422_p2;
wire   [15:0] localBits_9_fu_434_p4;
wire   [15:0] trunc_ln65_fu_462_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 localBits_idx_fu_94 = 8'd0;
#0 localBits_fu_98 = 32'd0;
#0 inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102 = 20'd0;
#0 outValue_data_94_fu_106 = 8'd0;
#0 outValue_data_95_fu_110 = 8'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((inValue_strobe_fu_215_p3 == 1'd1) & (ap_start_int == 1'b1))) begin
            inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102 <= hufCodeStream_dout;
        end else if ((ap_loop_init == 1'b1)) begin
            inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102 <= empty;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (inValue_strobe_reg_556_pp0_iter1_reg == 1'd1))) begin
        last_block_reg_174 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        last_block_reg_174 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            localBits_fu_98 <= 32'd0;
        end else if (((icmp_ln57_reg_582 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            localBits_fu_98 <= localBits_11_fu_428_p2;
        end else if (((icmp_ln57_reg_582 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            localBits_fu_98 <= zext_ln59_fu_444_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            localBits_idx_fu_94 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln57_fu_298_p2 == 1'd1))) begin
            localBits_idx_fu_94 <= localBits_idx_21_fu_282_p2;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln57_fu_298_p2 == 1'd0))) begin
            localBits_idx_fu_94 <= localBits_idx_22_fu_304_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            outValue_data_94_fu_106 <= 8'd0;
        end else if (((icmp_ln57_reg_582 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            outValue_data_94_fu_106 <= outValue_data_96_fu_448_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            outValue_data_95_fu_110 <= outValue_data;
        end else if (((icmp_ln57_reg_582 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            outValue_data_95_fu_110 <= {{localBits_11_fu_428_p2[15:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln54_reg_560 <= icmp_ln54_fu_268_p2;
        icmp_ln57_reg_582 <= icmp_ln57_fu_298_p2;
        inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550 <= ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load;
        inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550_pp0_iter1_reg <= inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550;
        inValue_strobe_reg_556 <= ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load[32'd19];
        inValue_strobe_reg_556_pp0_iter1_reg <= inValue_strobe_reg_556;
        trunc_ln54_5_reg_576 <= trunc_ln54_5_fu_278_p1;
        trunc_ln54_reg_568 <= trunc_ln54_fu_274_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (inValue_strobe_fu_215_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (inValue_strobe_reg_556_pp0_iter1_reg == 1'd1))) begin
        ap_phi_mux_last_block_phi_fu_178_p4 = 1'd0;
    end else begin
        ap_phi_mux_last_block_phi_fu_178_p4 = last_block_reg_174;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load = empty;
    end else begin
        ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load = inValue_data_bitlen_sroa_0_0_239_in_in_in_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (inValue_strobe_fu_215_p3 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hufCodeStream_blk_n = hufCodeStream_empty_n;
    end else begin
        hufCodeStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (inValue_strobe_fu_215_p3 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hufCodeStream_read_local = 1'b1;
    end else begin
        hufCodeStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln57_reg_582 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        huffStream_3_blk_n = huffStream_3_full_n;
    end else begin
        huffStream_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln57_reg_582 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        huffStream_3_write_local = 1'b1;
    end else begin
        huffStream_3_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (inValue_strobe_reg_556 == 1'd0))) begin
        last_block_out_ap_vld = 1'b1;
    end else begin
        last_block_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (inValue_strobe_reg_556 == 1'd0))) begin
        localBits_idx_out_ap_vld = 1'b1;
    end else begin
        localBits_idx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (inValue_strobe_reg_556 == 1'd0))) begin
        localBits_out_ap_vld = 1'b1;
    end else begin
        localBits_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (inValue_strobe_reg_556 == 1'd0))) begin
        outValue_data_135_out_ap_vld = 1'b1;
    end else begin
        outValue_data_135_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (inValue_strobe_reg_556 == 1'd0))) begin
        outValue_data_136_out_ap_vld = 1'b1;
    end else begin
        outValue_data_136_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_4_fu_262_p2 = ($signed(zext_ln54_fu_248_p1) + $signed(sext_ln54_fu_258_p1));

assign add_ln54_fu_252_p2 = ($signed(zext_ln54_9_fu_244_p1) + $signed(5'd31));

assign and_ln54_10_fu_422_p2 = (select_ln54_15_fu_385_p3 & and_ln54_fu_404_p2);

assign and_ln54_9_fu_416_p2 = (xor_ln54_10_fu_410_p2 & localBits_fu_98);

assign and_ln54_fu_404_p2 = (shl_ln54_5_fu_392_p2 & lshr_ln54_fu_398_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((inValue_strobe_fu_215_p3 == 1'd1) & (hufCodeStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((icmp_ln57_reg_582 == 1'd0) & (huffStream_3_full_n == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign hufCodeStream_read = hufCodeStream_read_local;

assign huffStream_3_din = tmp_s_fu_466_p3;

assign huffStream_3_write = huffStream_3_write_local;

assign icmp_ln54_fu_268_p2 = ((zext_ln54_fu_248_p1 > add_ln54_4_fu_262_p2) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_298_p2 = ((tmp_309_fu_288_p4 == 4'd0) ? 1'b1 : 1'b0);

assign inValue_strobe_fu_215_p3 = ap_sig_allocacmp_inValue_data_bitlen_sroa_0_0_239_in_in_in_load[32'd19];

assign last_block_out = ap_phi_mux_last_block_phi_fu_178_p4;

assign localBits_11_fu_428_p2 = (and_ln54_9_fu_416_p2 | and_ln54_10_fu_422_p2);

assign localBits_9_fu_434_p4 = {{localBits_11_fu_428_p2[31:16]}};

assign localBits_idx_21_fu_282_p2 = (localBits_idx_fu_94 + zext_ln53_fu_240_p1);

assign localBits_idx_22_fu_304_p2 = ($signed(localBits_idx_21_fu_282_p2) + $signed(8'd240));

assign localBits_idx_out = localBits_idx_fu_94;

assign localBits_out = localBits_fu_98;

assign lshr_ln54_fu_398_p2 = 32'd4294967295 >> zext_ln54_17_fu_365_p1;

assign outValue_data_135_out = outValue_data_94_fu_106;

assign outValue_data_136_out = outValue_data_95_fu_110;

assign outValue_data_96_fu_448_p1 = localBits_11_fu_428_p2[7:0];

assign select_ln54_13_fu_340_p3 = ((icmp_ln54_reg_560[0:0] == 1'b1) ? trunc_ln54_5_reg_576 : trunc_ln54_reg_568);

assign select_ln54_14_fu_345_p3 = ((icmp_ln54_reg_560[0:0] == 1'b1) ? xor_ln54_fu_330_p2 : trunc_ln54_reg_568);

assign select_ln54_15_fu_385_p3 = ((icmp_ln54_reg_560[0:0] == 1'b1) ? tmp_308_fu_375_p4 : shl_ln54_fu_369_p2);

assign select_ln54_fu_335_p3 = ((icmp_ln54_reg_560[0:0] == 1'b1) ? trunc_ln54_reg_568 : trunc_ln54_5_reg_576);

assign sext_ln54_fu_258_p1 = $signed(add_ln54_fu_252_p2);

assign shl_ln54_5_fu_392_p2 = 32'd4294967295 << zext_ln54_16_fu_361_p1;

assign shl_ln54_fu_369_p2 = zext_ln54_8_fu_326_p1 << zext_ln54_15_fu_357_p1;

assign tmp_223_fu_231_p4 = {{inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550[18:15]}};

integer ap_tvar_int_0;

always @ (shl_ln54_fu_369_p2) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_308_fu_375_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_308_fu_375_p4[ap_tvar_int_0] = shl_ln54_fu_369_p2[31 - ap_tvar_int_0];
        end
    end
end

assign tmp_309_fu_288_p4 = {{localBits_idx_21_fu_282_p2[7:4]}};

assign tmp_s_fu_466_p3 = {{2'd2}, {trunc_ln65_fu_462_p1}};

assign trunc_ln50_fu_323_p1 = inValue_data_bitlen_sroa_0_0_239_in_in_in_load_reg_550_pp0_iter1_reg[14:0];

assign trunc_ln54_5_fu_278_p1 = add_ln54_4_fu_262_p2[4:0];

assign trunc_ln54_fu_274_p1 = localBits_idx_fu_94[4:0];

assign trunc_ln65_fu_462_p1 = localBits_11_fu_428_p2[15:0];

assign xor_ln54_10_fu_410_p2 = (32'd4294967295 ^ and_ln54_fu_404_p2);

assign xor_ln54_9_fu_351_p2 = (select_ln54_fu_335_p3 ^ 5'd31);

assign xor_ln54_fu_330_p2 = (trunc_ln54_reg_568 ^ 5'd31);

assign zext_ln53_fu_240_p1 = tmp_223_fu_231_p4;

assign zext_ln54_15_fu_357_p1 = select_ln54_14_fu_345_p3;

assign zext_ln54_16_fu_361_p1 = select_ln54_13_fu_340_p3;

assign zext_ln54_17_fu_365_p1 = xor_ln54_9_fu_351_p2;

assign zext_ln54_8_fu_326_p1 = trunc_ln50_fu_323_p1;

assign zext_ln54_9_fu_244_p1 = tmp_223_fu_231_p4;

assign zext_ln54_fu_248_p1 = localBits_idx_fu_94;

assign zext_ln59_fu_444_p1 = localBits_9_fu_434_p4;

endmodule //gzipcMulticoreStreaming_bitPackingStatic_33_Pipeline_bitpack
