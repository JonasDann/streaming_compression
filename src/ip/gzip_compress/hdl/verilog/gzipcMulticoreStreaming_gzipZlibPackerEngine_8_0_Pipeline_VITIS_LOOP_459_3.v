// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_gzipZlibPackerEngine_8_0_Pipeline_VITIS_LOOP_459_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        mergeStream_6_dout,
        mergeStream_6_num_data_valid,
        mergeStream_6_fifo_cap,
        mergeStream_6_empty_n,
        mergeStream_6_read,
        mergeStream_5_dout,
        mergeStream_5_num_data_valid,
        mergeStream_5_fifo_cap,
        mergeStream_5_empty_n,
        mergeStream_5_read,
        mergeStream_4_dout,
        mergeStream_4_num_data_valid,
        mergeStream_4_fifo_cap,
        mergeStream_4_empty_n,
        mergeStream_4_read,
        mergeStream_3_dout,
        mergeStream_3_num_data_valid,
        mergeStream_3_fifo_cap,
        mergeStream_3_empty_n,
        mergeStream_3_read,
        mergeStream_2_dout,
        mergeStream_2_num_data_valid,
        mergeStream_2_fifo_cap,
        mergeStream_2_empty_n,
        mergeStream_2_read,
        mergeStream_1_dout,
        mergeStream_1_num_data_valid,
        mergeStream_1_fifo_cap,
        mergeStream_1_empty_n,
        mergeStream_1_read,
        mergeStream_0_dout,
        mergeStream_0_num_data_valid,
        mergeStream_0_fifo_cap,
        mergeStream_0_empty_n,
        mergeStream_0_read,
        mergeStream_7_dout,
        mergeStream_7_num_data_valid,
        mergeStream_7_fifo_cap,
        mergeStream_7_empty_n,
        mergeStream_7_read
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [67:0] mergeStream_6_dout;
input  [9:0] mergeStream_6_num_data_valid;
input  [9:0] mergeStream_6_fifo_cap;
input   mergeStream_6_empty_n;
output   mergeStream_6_read;
input  [67:0] mergeStream_5_dout;
input  [9:0] mergeStream_5_num_data_valid;
input  [9:0] mergeStream_5_fifo_cap;
input   mergeStream_5_empty_n;
output   mergeStream_5_read;
input  [67:0] mergeStream_4_dout;
input  [9:0] mergeStream_4_num_data_valid;
input  [9:0] mergeStream_4_fifo_cap;
input   mergeStream_4_empty_n;
output   mergeStream_4_read;
input  [67:0] mergeStream_3_dout;
input  [9:0] mergeStream_3_num_data_valid;
input  [9:0] mergeStream_3_fifo_cap;
input   mergeStream_3_empty_n;
output   mergeStream_3_read;
input  [67:0] mergeStream_2_dout;
input  [9:0] mergeStream_2_num_data_valid;
input  [9:0] mergeStream_2_fifo_cap;
input   mergeStream_2_empty_n;
output   mergeStream_2_read;
input  [67:0] mergeStream_1_dout;
input  [9:0] mergeStream_1_num_data_valid;
input  [9:0] mergeStream_1_fifo_cap;
input   mergeStream_1_empty_n;
output   mergeStream_1_read;
input  [67:0] mergeStream_0_dout;
input  [9:0] mergeStream_0_num_data_valid;
input  [9:0] mergeStream_0_fifo_cap;
input   mergeStream_0_empty_n;
output   mergeStream_0_read;
input  [67:0] mergeStream_7_dout;
input  [9:0] mergeStream_7_num_data_valid;
input  [9:0] mergeStream_7_fifo_cap;
input   mergeStream_7_empty_n;
output   mergeStream_7_read;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg   [2:0] trunc_ln459_reg_157;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln459_fu_126_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mergeStream_0_blk_n;
wire    ap_block_pp0_stage0;
reg    mergeStream_1_blk_n;
reg    mergeStream_2_blk_n;
reg    mergeStream_3_blk_n;
reg    mergeStream_4_blk_n;
reg    mergeStream_5_blk_n;
reg    mergeStream_6_blk_n;
reg    mergeStream_7_blk_n;
wire   [2:0] trunc_ln459_fu_138_p1;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] i_fu_66;
wire   [3:0] add_ln459_fu_132_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_50;
reg    mergeStream_6_read_local;
reg    mergeStream_5_read_local;
reg    mergeStream_4_read_local;
reg    mergeStream_3_read_local;
reg    mergeStream_2_read_local;
reg    mergeStream_1_read_local;
reg    mergeStream_0_read_local;
reg    mergeStream_7_read_local;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_fu_66 = 4'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln459_fu_126_p2 == 1'd0))) begin
            i_fu_66 <= add_ln459_fu_132_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln459_reg_157 <= trunc_ln459_fu_138_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln459_fu_126_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_50 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_50 = i_fu_66;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mergeStream_0_blk_n = mergeStream_0_empty_n;
    end else begin
        mergeStream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mergeStream_0_read_local = 1'b1;
    end else begin
        mergeStream_0_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mergeStream_1_blk_n = mergeStream_1_empty_n;
    end else begin
        mergeStream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mergeStream_1_read_local = 1'b1;
    end else begin
        mergeStream_1_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mergeStream_2_blk_n = mergeStream_2_empty_n;
    end else begin
        mergeStream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mergeStream_2_read_local = 1'b1;
    end else begin
        mergeStream_2_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mergeStream_3_blk_n = mergeStream_3_empty_n;
    end else begin
        mergeStream_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mergeStream_3_read_local = 1'b1;
    end else begin
        mergeStream_3_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mergeStream_4_blk_n = mergeStream_4_empty_n;
    end else begin
        mergeStream_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mergeStream_4_read_local = 1'b1;
    end else begin
        mergeStream_4_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mergeStream_5_blk_n = mergeStream_5_empty_n;
    end else begin
        mergeStream_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mergeStream_5_read_local = 1'b1;
    end else begin
        mergeStream_5_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mergeStream_6_blk_n = mergeStream_6_empty_n;
    end else begin
        mergeStream_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mergeStream_6_read_local = 1'b1;
    end else begin
        mergeStream_6_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mergeStream_7_blk_n = mergeStream_7_empty_n;
    end else begin
        mergeStream_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln459_reg_157 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mergeStream_7_read_local = 1'b1;
    end else begin
        mergeStream_7_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln459_fu_132_p2 = (ap_sig_allocacmp_i_50 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((mergeStream_1_empty_n == 1'b0) & (trunc_ln459_reg_157 == 3'd1)) | ((mergeStream_2_empty_n == 1'b0) & (trunc_ln459_reg_157 == 3'd2)) | ((mergeStream_3_empty_n == 1'b0) & (trunc_ln459_reg_157 == 3'd3)) | ((mergeStream_4_empty_n == 1'b0) & (trunc_ln459_reg_157 == 3'd4)) | ((mergeStream_5_empty_n == 1'b0) & (trunc_ln459_reg_157 == 3'd5)) | ((trunc_ln459_reg_157 == 3'd6) & (mergeStream_6_empty_n == 1'b0)) | ((trunc_ln459_reg_157 == 3'd7) & (mergeStream_7_empty_n == 1'b0)) | ((mergeStream_0_empty_n == 1'b0) & (trunc_ln459_reg_157 == 3'd0)));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln459_fu_126_p2 = ((ap_sig_allocacmp_i_50 == 4'd8) ? 1'b1 : 1'b0);

assign mergeStream_0_read = mergeStream_0_read_local;

assign mergeStream_1_read = mergeStream_1_read_local;

assign mergeStream_2_read = mergeStream_2_read_local;

assign mergeStream_3_read = mergeStream_3_read_local;

assign mergeStream_4_read = mergeStream_4_read_local;

assign mergeStream_5_read = mergeStream_5_read_local;

assign mergeStream_6_read = mergeStream_6_read_local;

assign mergeStream_7_read = mergeStream_7_read_local;

assign trunc_ln459_fu_138_p1 = ap_sig_allocacmp_i_50[2:0];

endmodule //gzipcMulticoreStreaming_gzipZlibPackerEngine_8_0_Pipeline_VITIS_LOOP_459_3
