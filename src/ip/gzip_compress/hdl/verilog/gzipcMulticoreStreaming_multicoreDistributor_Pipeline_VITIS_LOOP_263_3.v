// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_multicoreDistributor_Pipeline_VITIS_LOOP_263_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        writeSize_2_reload,
        readSize_1,
        icmp_ln240_1_reload,
        storedBufferStream_dout,
        storedBufferStream_empty_n,
        storedBufferStream_read,
        strdStream_din,
        strdStream_num_data_valid,
        strdStream_fifo_cap,
        strdStream_full_n,
        strdStream_write,
        empty,
        strdSizeStream_din,
        strdSizeStream_num_data_valid,
        strdSizeStream_fifo_cap,
        strdSizeStream_full_n,
        strdSizeStream_write,
        writeSize_3_out,
        writeSize_3_out_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] writeSize_2_reload;
input  [31:0] readSize_1;
input  [0:0] icmp_ln240_1_reload;
input  [67:0] storedBufferStream_dout;
input   storedBufferStream_empty_n;
output   storedBufferStream_read;
output  [63:0] strdStream_din;
input  [3:0] strdStream_num_data_valid;
input  [3:0] strdStream_fifo_cap;
input   strdStream_full_n;
output   strdStream_write;
input  [15:0] empty;
output  [15:0] strdSizeStream_din;
input  [5:0] strdSizeStream_num_data_valid;
input  [5:0] strdSizeStream_fifo_cap;
input   strdSizeStream_full_n;
output   strdSizeStream_write;
output  [31:0] writeSize_3_out;
output   writeSize_3_out_ap_vld;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] writeSize_3_out;
reg writeSize_3_out_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    storedBufferStream_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln263_reg_238;
reg   [0:0] onlyOnce_reg_121;
reg   [0:0] or_ln263_reg_242;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln273_fu_203_p2;
reg    strdStream_blk_n;
reg    strdSizeStream_blk_n;
reg   [31:0] writeSize_1_reg_231;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln263_fu_155_p2;
wire   [0:0] or_ln263_fu_160_p2;
wire   [31:0] writeSize_2_fu_193_p2;
reg   [31:0] writeSize_2_reg_246;
reg    ap_predicate_op31_read_state3;
reg    ap_predicate_op33_write_state3;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage1_subdone;
reg    ap_predicate_tran3to5_state3;
reg    ap_predicate_tran3to6_state3;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_139_p4;
reg   [0:0] UnifiedRetVal_reg_135;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [31:0] writeSize_fu_66;
wire   [15:0] sub_ln266_fu_168_p2;
reg    ap_block_pp0_stage1_01001;
reg    strdSizeStream_write_local;
reg    storedBufferStream_read_local;
reg    strdStream_write_local;
wire   [15:0] trunc_ln264_fu_165_p1;
wire   [3:0] trunc_ln272_fu_185_p1;
wire   [31:0] zext_ln272_fu_189_p1;
reg   [0:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 writeSize_fu_66 = 32'd0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & ((or_ln263_reg_242 == 1'd1) | (onlyOnce_reg_121 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_139_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        UnifiedRetVal_reg_135 <= 1'd0;
    end else if (((onlyOnce_reg_121 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        UnifiedRetVal_reg_135 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (((or_ln263_reg_242 == 1'd0) & (onlyOnce_reg_121 == 1'd0)) | ((onlyOnce_reg_121 == 1'd1) & (icmp_ln263_reg_238 == 1'd0))))) begin
        onlyOnce_reg_121 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        onlyOnce_reg_121 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        writeSize_fu_66 <= writeSize_2_reload;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (((or_ln263_reg_242 == 1'd0) & (onlyOnce_reg_121 == 1'd0)) | ((onlyOnce_reg_121 == 1'd1) & (icmp_ln263_reg_238 == 1'd0))))) begin
        writeSize_fu_66 <= writeSize_2_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln263_reg_238 <= icmp_ln263_fu_155_p2;
        or_ln263_reg_242 <= or_ln263_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        writeSize_1_reg_231 <= writeSize_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        writeSize_2_reg_246 <= writeSize_2_fu_193_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((ap_predicate_tran3to6_state3 == 1'b1) | (ap_predicate_tran3to5_state3 == 1'b1))) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & ((or_ln263_reg_242 == 1'd1) | (onlyOnce_reg_121 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((onlyOnce_reg_121 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_UnifiedRetVal_phi_fu_139_p4 = 1'd1;
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_139_p4 = UnifiedRetVal_reg_135;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((or_ln263_reg_242 == 1'd1) | (onlyOnce_reg_121 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((or_ln263_reg_242 == 1'd1) | (onlyOnce_reg_121 == 1'd1)))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_139_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((((icmp_ln273_fu_203_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (((or_ln263_reg_242 == 1'd0) & (onlyOnce_reg_121 == 1'd0)) | ((onlyOnce_reg_121 == 1'd1) & (icmp_ln263_reg_238 == 1'd0)))))) begin
        storedBufferStream_blk_n = storedBufferStream_empty_n;
    end else begin
        storedBufferStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln273_fu_203_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_op31_read_state3 == 1'b1)))) begin
        storedBufferStream_read_local = 1'b1;
    end else begin
        storedBufferStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((onlyOnce_reg_121 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        strdSizeStream_blk_n = strdSizeStream_full_n;
    end else begin
        strdSizeStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((onlyOnce_reg_121 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        strdSizeStream_write_local = 1'b1;
    end else begin
        strdSizeStream_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (((or_ln263_reg_242 == 1'd0) & (onlyOnce_reg_121 == 1'd0)) | ((onlyOnce_reg_121 == 1'd1) & (icmp_ln263_reg_238 == 1'd0))))) begin
        strdStream_blk_n = strdStream_full_n;
    end else begin
        strdStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_op33_write_state3 == 1'b1))) begin
        strdStream_write_local = 1'b1;
    end else begin
        strdStream_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        writeSize_3_out = writeSize_1_reg_231;
    end else if (((onlyOnce_reg_121 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        writeSize_3_out = readSize_1;
    end else begin
        writeSize_3_out = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((onlyOnce_reg_121 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        writeSize_3_out_ap_vld = 1'b1;
    end else begin
        writeSize_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~(((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_tran3to6_state3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_tran3to5_state3 == 1'b1))) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_tran3to6_state3 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_tran3to5_state3 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = (((onlyOnce_reg_121 == 1'd1) & (strdSizeStream_full_n == 1'b0)) | ((strdStream_full_n == 1'b0) & (ap_predicate_op33_write_state3 == 1'b1)) | ((storedBufferStream_empty_n == 1'b0) & (ap_predicate_op31_read_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln273_fu_203_p2 == 1'd1) & (storedBufferStream_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op31_read_state3 = (((or_ln263_reg_242 == 1'd0) & (onlyOnce_reg_121 == 1'd0)) | ((onlyOnce_reg_121 == 1'd1) & (icmp_ln263_reg_238 == 1'd0)));
end

always @ (*) begin
    ap_predicate_op33_write_state3 = (((or_ln263_reg_242 == 1'd0) & (onlyOnce_reg_121 == 1'd0)) | ((onlyOnce_reg_121 == 1'd1) & (icmp_ln263_reg_238 == 1'd0)));
end

always @ (*) begin
    ap_predicate_tran3to5_state3 = ((onlyOnce_reg_121 == 1'd1) & (icmp_ln263_reg_238 == 1'd1));
end

always @ (*) begin
    ap_predicate_tran3to6_state3 = ((or_ln263_reg_242 == 1'd1) & (onlyOnce_reg_121 == 1'd0));
end

assign icmp_ln263_fu_155_p2 = ((writeSize_fu_66 == readSize_1) ? 1'b1 : 1'b0);

assign icmp_ln273_fu_203_p2 = ((readSize_1 == writeSize_2_reg_246) ? 1'b1 : 1'b0);

assign or_ln263_fu_160_p2 = (icmp_ln263_fu_155_p2 | icmp_ln240_1_reload);

assign storedBufferStream_read = storedBufferStream_read_local;

assign strdSizeStream_din = sub_ln266_fu_168_p2;

assign strdSizeStream_write = strdSizeStream_write_local;

assign strdStream_din = {{storedBufferStream_dout[67:4]}};

assign strdStream_write = strdStream_write_local;

assign sub_ln266_fu_168_p2 = (empty - trunc_ln264_fu_165_p1);

assign trunc_ln264_fu_165_p1 = writeSize_1_reg_231[15:0];

assign trunc_ln272_fu_185_p1 = storedBufferStream_dout[3:0];

assign writeSize_2_fu_193_p2 = (zext_ln272_fu_189_p1 + writeSize_1_reg_231);

assign zext_ln272_fu_189_p1 = trunc_ln272_fu_185_p1;

endmodule //gzipcMulticoreStreaming_multicoreDistributor_Pipeline_VITIS_LOOP_263_3
