// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2443_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        checksumStream_dout,
        checksumStream_num_data_valid,
        checksumStream_fifo_cap,
        checksumStream_empty_n,
        checksumStream_read,
        in_data_reload,
        crc_1_reload,
        inPackLen_1_reload,
        crc_4_out,
        crc_4_out_ap_vld,
        p_ZN2xf8security8internalL7table16E_0_0_address0,
        p_ZN2xf8security8internalL7table16E_0_0_ce0,
        p_ZN2xf8security8internalL7table16E_0_0_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] checksumStream_dout;
input  [2:0] checksumStream_num_data_valid;
input  [2:0] checksumStream_fifo_cap;
input   checksumStream_empty_n;
output   checksumStream_read;
input  [63:0] in_data_reload;
input  [31:0] crc_1_reload;
input  [4:0] inPackLen_1_reload;
output  [31:0] crc_4_out;
output   crc_4_out_ap_vld;
output  [7:0] p_ZN2xf8security8internalL7table16E_0_0_address0;
output   p_ZN2xf8security8internalL7table16E_0_0_ce0;
input  [31:0] p_ZN2xf8security8internalL7table16E_0_0_q0;

reg ap_idle;
reg crc_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln2446_reg_266;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln2443_fu_134_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    checksumStream_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln2443_reg_257;
reg   [0:0] icmp_ln2443_reg_257_pp0_iter1_reg;
reg   [0:0] icmp_ln2443_reg_257_pp0_iter2_reg;
wire   [2:0] trunc_ln2443_fu_146_p1;
reg   [2:0] trunc_ln2443_reg_261;
reg   [2:0] trunc_ln2443_reg_261_pp0_iter1_reg;
wire   [0:0] icmp_ln2446_fu_150_p2;
wire   [7:0] trunc_ln2447_1_fu_186_p1;
reg   [7:0] trunc_ln2447_1_reg_270;
reg   [23:0] lshr_ln_reg_275;
wire   [63:0] zext_ln2447_fu_212_p1;
reg   [31:0] crc_fu_60;
wire   [31:0] crc_1_fu_220_p2;
reg   [31:0] ap_sig_allocacmp_crc_load_1;
wire    ap_loop_init;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [4:0] i_fu_64;
wire   [4:0] add_ln2443_fu_140_p2;
reg   [4:0] ap_sig_allocacmp_i_51;
reg   [63:0] in_data_fu_68;
reg    checksumStream_read_local;
reg    ap_block_pp0_stage0_01001;
reg    p_ZN2xf8security8internalL7table16E_0_0_ce0_local;
wire   [5:0] shl_ln_fu_169_p3;
wire   [63:0] zext_ln2447_2_fu_176_p1;
wire   [63:0] lshr_ln2447_fu_180_p2;
wire   [7:0] trunc_ln2447_fu_203_p1;
wire   [7:0] xor_ln2447_fu_207_p2;
wire   [31:0] zext_ln2447_1_fu_217_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 crc_fu_60 = 32'd0;
#0 i_fu_64 = 5'd0;
#0 in_data_fu_68 = 64'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            crc_fu_60 <= crc_1_reload;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            crc_fu_60 <= crc_1_fu_220_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln2443_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_64 <= add_ln2443_fu_140_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            in_data_fu_68 <= in_data_reload;
        end else if (((icmp_ln2446_reg_266 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            in_data_fu_68 <= checksumStream_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln2443_reg_257 <= icmp_ln2443_fu_134_p2;
        icmp_ln2443_reg_257_pp0_iter1_reg <= icmp_ln2443_reg_257;
        icmp_ln2446_reg_266 <= icmp_ln2446_fu_150_p2;
        trunc_ln2443_reg_261 <= trunc_ln2443_fu_146_p1;
        trunc_ln2443_reg_261_pp0_iter1_reg <= trunc_ln2443_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln2443_reg_257_pp0_iter2_reg <= icmp_ln2443_reg_257_pp0_iter1_reg;
        lshr_ln_reg_275 <= {{ap_sig_allocacmp_crc_load_1[31:8]}};
        trunc_ln2447_1_reg_270 <= trunc_ln2447_1_fu_186_p1;
    end
end

always @ (*) begin
    if (((icmp_ln2443_fu_134_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_crc_load_1 = crc_1_fu_220_p2;
    end else begin
        ap_sig_allocacmp_crc_load_1 = crc_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_51 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_51 = i_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln2446_reg_266 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        checksumStream_blk_n = checksumStream_empty_n;
    end else begin
        checksumStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2446_reg_266 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        checksumStream_read_local = 1'b1;
    end else begin
        checksumStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (icmp_ln2443_reg_257_pp0_iter2_reg == 1'd1))) begin
        crc_4_out_ap_vld = 1'b1;
    end else begin
        crc_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_ZN2xf8security8internalL7table16E_0_0_ce0_local = 1'b1;
    end else begin
        p_ZN2xf8security8internalL7table16E_0_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln2443_fu_140_p2 = (ap_sig_allocacmp_i_51 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln2446_reg_266 == 1'd1) & (checksumStream_empty_n == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign checksumStream_read = checksumStream_read_local;

assign crc_1_fu_220_p2 = (zext_ln2447_1_fu_217_p1 ^ p_ZN2xf8security8internalL7table16E_0_0_q0);

assign crc_4_out = crc_fu_60;

assign icmp_ln2443_fu_134_p2 = ((ap_sig_allocacmp_i_51 == inPackLen_1_reload) ? 1'b1 : 1'b0);

assign icmp_ln2446_fu_150_p2 = ((ap_sig_allocacmp_i_51 == 5'd0) ? 1'b1 : 1'b0);

assign lshr_ln2447_fu_180_p2 = in_data_fu_68 >> zext_ln2447_2_fu_176_p1;

assign p_ZN2xf8security8internalL7table16E_0_0_address0 = zext_ln2447_fu_212_p1;

assign p_ZN2xf8security8internalL7table16E_0_0_ce0 = p_ZN2xf8security8internalL7table16E_0_0_ce0_local;

assign shl_ln_fu_169_p3 = {{trunc_ln2443_reg_261_pp0_iter1_reg}, {3'd0}};

assign trunc_ln2443_fu_146_p1 = ap_sig_allocacmp_i_51[2:0];

assign trunc_ln2447_1_fu_186_p1 = lshr_ln2447_fu_180_p2[7:0];

assign trunc_ln2447_fu_203_p1 = ap_sig_allocacmp_crc_load_1[7:0];

assign xor_ln2447_fu_207_p2 = (trunc_ln2447_fu_203_p1 ^ trunc_ln2447_1_reg_270);

assign zext_ln2447_1_fu_217_p1 = lshr_ln_reg_275;

assign zext_ln2447_2_fu_176_p1 = shl_ln_fu_169_p3;

assign zext_ln2447_fu_212_p1 = xor_ln2447_fu_207_p2;

endmodule //gzipcMulticoreStreaming_crc32_8_Pipeline_VITIS_LOOP_2443_7
