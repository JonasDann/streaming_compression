// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_13_Pipeline_stream_upsizer_main (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        huffStream_2_dout,
        huffStream_2_num_data_valid,
        huffStream_2_fifo_cap,
        huffStream_2_empty_n,
        huffStream_2_read,
        mergeStream_2_din,
        mergeStream_2_num_data_valid,
        mergeStream_2_fifo_cap,
        mergeStream_2_full_n,
        mergeStream_2_write,
        inStVal_data_32,
        empty,
        inStVal_strobe,
        loop_continue,
        outVal_15_out_i,
        outVal_15_out_o,
        outVal_15_out_o_ap_vld,
        inVal_1_out_i,
        inVal_1_out_o,
        inVal_1_out_o_ap_vld,
        last_1_out,
        last_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] huffStream_2_dout;
input  [2:0] huffStream_2_num_data_valid;
input  [2:0] huffStream_2_fifo_cap;
input   huffStream_2_empty_n;
output   huffStream_2_read;
output  [67:0] mergeStream_2_din;
input  [9:0] mergeStream_2_num_data_valid;
input  [9:0] mergeStream_2_fifo_cap;
input   mergeStream_2_full_n;
output   mergeStream_2_write;
input  [7:0] inStVal_data_32;
input  [7:0] empty;
input  [1:0] inStVal_strobe;
input  [0:0] loop_continue;
input  [63:0] outVal_15_out_i;
output  [63:0] outVal_15_out_o;
output   outVal_15_out_o_ap_vld;
input  [15:0] inVal_1_out_i;
output  [15:0] inVal_1_out_o;
output   inVal_1_out_o_ap_vld;
output  [0:0] last_1_out;
output   last_1_out_ap_vld;

reg ap_idle;
reg[63:0] outVal_15_out_o;
reg outVal_15_out_o_ap_vld;
reg[15:0] inVal_1_out_o;
reg inVal_1_out_o_ap_vld;
reg last_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] loop_continue_12_reg_160;
wire   [0:0] icmp_ln246_fu_287_p2;
reg    ap_predicate_op53_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] loop_continue_12_reg_160_pp0_iter1_reg;
reg   [0:0] icmp_ln233_reg_490;
reg    ap_predicate_op67_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_loop_continue_12_phi_fu_163_p4;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mergeStream_2_blk_n;
wire    ap_block_pp0_stage0;
reg    huffStream_2_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] last_reg_171;
reg   [3:0] dsize_14_reg_485;
wire   [0:0] icmp_ln233_fu_252_p2;
wire   [15:0] inVal_15_fu_333_p3;
reg   [15:0] inVal_15_reg_498;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_init;
reg   [0:0] ap_phi_mux_loop_continue_1_phi_fu_199_p4;
reg   [3:0] ap_phi_mux_dsize_1_phi_fu_188_p4;
wire   [3:0] ap_phi_reg_pp0_iter1_dsize_1_reg_185;
wire   [0:0] loop_continue_13_fu_258_p2;
wire   [0:0] ap_phi_reg_pp0_iter1_loop_continue_1_reg_195;
reg   [1:0] ap_phi_mux_inStVal_strobe_1_phi_fu_210_p4;
wire   [1:0] ap_phi_reg_pp0_iter1_inStVal_strobe_1_reg_207;
wire   [63:0] outVal_fu_435_p3;
reg   [1:0] inStVal_strobe_12_fu_96;
reg   [7:0] byteIdx_fu_100;
wire   [7:0] byteIdx_14_fu_341_p2;
reg   [7:0] ap_sig_allocacmp_byteIdx_13;
reg   [3:0] dsize_fu_104;
wire   [3:0] dsize_15_fu_347_p2;
reg   [7:0] inStVal_data_fu_108;
wire   [7:0] inStVal_data_18_fu_353_p1;
reg   [7:0] inStVal_data_17_fu_112;
reg    huffStream_2_read_local;
wire   [67:0] tmpVal_fu_413_p3;
reg    ap_block_pp0_stage0_01001;
reg    mergeStream_2_write_local;
reg    ap_loop_exit_ready_pp0_iter1_reg;
wire   [15:0] inVal_fu_293_p5;
wire   [15:0] inVal_3_fu_305_p3;
wire   [0:0] tmp_7_fu_313_p3;
wire   [15:0] inVal_14_fu_321_p5;
wire   [3:0] zext_ln251_fu_283_p1;
wire   [47:0] outVal_s_fu_425_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_349;
reg    ap_condition_353;
reg    ap_condition_358;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 inStVal_strobe_12_fu_96 = 2'd0;
#0 byteIdx_fu_100 = 8'd0;
#0 dsize_fu_104 = 4'd0;
#0 inStVal_data_fu_108 = 8'd0;
#0 inStVal_data_17_fu_112 = 8'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (loop_continue_12_reg_160 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        byteIdx_fu_100 <= byteIdx_14_fu_341_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (loop_continue_12_reg_160 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln233_fu_252_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1)))) begin
        byteIdx_fu_100 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            dsize_fu_104 <= 4'd0;
        end else if (((loop_continue_12_reg_160 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            dsize_fu_104 <= dsize_15_fu_347_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            inStVal_data_17_fu_112 <= inStVal_data_32;
        end else if ((1'b1 == ap_condition_353)) begin
            inStVal_data_17_fu_112 <= {{huffStream_2_dout[15:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            inStVal_data_fu_108 <= empty;
        end else if ((1'b1 == ap_condition_353)) begin
            inStVal_data_fu_108 <= inStVal_data_18_fu_353_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            inStVal_strobe_12_fu_96 <= inStVal_strobe;
        end else if (((loop_continue_12_reg_160 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            inStVal_strobe_12_fu_96 <= ap_phi_mux_inStVal_strobe_1_phi_fu_210_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((loop_continue_12_reg_160_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        last_reg_171 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        last_reg_171 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_358)) begin
            loop_continue_12_reg_160 <= ap_phi_mux_loop_continue_1_phi_fu_199_p4;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            loop_continue_12_reg_160 <= loop_continue;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        dsize_14_reg_485 <= dsize_fu_104;
        icmp_ln233_reg_490 <= icmp_ln233_fu_252_p2;
        inVal_15_reg_498 <= inVal_15_fu_333_p3;
        loop_continue_12_reg_160_pp0_iter1_reg <= loop_continue_12_reg_160;
    end
end

always @ (*) begin
    if (((ap_phi_mux_loop_continue_12_phi_fu_163_p4 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (loop_continue_12_reg_160 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((loop_continue_12_reg_160 == 1'd1)) begin
        if ((icmp_ln233_fu_252_p2 == 1'd0)) begin
            ap_phi_mux_dsize_1_phi_fu_188_p4 = dsize_fu_104;
        end else if ((icmp_ln233_fu_252_p2 == 1'd1)) begin
            ap_phi_mux_dsize_1_phi_fu_188_p4 = 4'd0;
        end else begin
            ap_phi_mux_dsize_1_phi_fu_188_p4 = ap_phi_reg_pp0_iter1_dsize_1_reg_185;
        end
    end else begin
        ap_phi_mux_dsize_1_phi_fu_188_p4 = ap_phi_reg_pp0_iter1_dsize_1_reg_185;
    end
end

always @ (*) begin
    if ((loop_continue_12_reg_160 == 1'd1)) begin
        if ((icmp_ln246_fu_287_p2 == 1'd1)) begin
            ap_phi_mux_inStVal_strobe_1_phi_fu_210_p4 = 2'd0;
        end else if ((icmp_ln246_fu_287_p2 == 1'd0)) begin
            ap_phi_mux_inStVal_strobe_1_phi_fu_210_p4 = {{huffStream_2_dout[17:16]}};
        end else begin
            ap_phi_mux_inStVal_strobe_1_phi_fu_210_p4 = ap_phi_reg_pp0_iter1_inStVal_strobe_1_reg_207;
        end
    end else begin
        ap_phi_mux_inStVal_strobe_1_phi_fu_210_p4 = ap_phi_reg_pp0_iter1_inStVal_strobe_1_reg_207;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_349)) begin
            ap_phi_mux_loop_continue_12_phi_fu_163_p4 = ap_phi_mux_loop_continue_1_phi_fu_199_p4;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_loop_continue_12_phi_fu_163_p4 = loop_continue;
        end else begin
            ap_phi_mux_loop_continue_12_phi_fu_163_p4 = loop_continue_12_reg_160;
        end
    end else begin
        ap_phi_mux_loop_continue_12_phi_fu_163_p4 = loop_continue_12_reg_160;
    end
end

always @ (*) begin
    if ((loop_continue_12_reg_160 == 1'd1)) begin
        if ((icmp_ln233_fu_252_p2 == 1'd0)) begin
            ap_phi_mux_loop_continue_1_phi_fu_199_p4 = 1'd1;
        end else if ((icmp_ln233_fu_252_p2 == 1'd1)) begin
            ap_phi_mux_loop_continue_1_phi_fu_199_p4 = loop_continue_13_fu_258_p2;
        end else begin
            ap_phi_mux_loop_continue_1_phi_fu_199_p4 = ap_phi_reg_pp0_iter1_loop_continue_1_reg_195;
        end
    end else begin
        ap_phi_mux_loop_continue_1_phi_fu_199_p4 = ap_phi_reg_pp0_iter1_loop_continue_1_reg_195;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (loop_continue_12_reg_160 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln233_fu_252_p2 == 1'd1))) begin
        ap_sig_allocacmp_byteIdx_13 = 8'd0;
    end else begin
        ap_sig_allocacmp_byteIdx_13 = byteIdx_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op53_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffStream_2_blk_n = huffStream_2_empty_n;
    end else begin
        huffStream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op53_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffStream_2_read_local = 1'b1;
    end else begin
        huffStream_2_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (loop_continue_12_reg_160 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inVal_1_out_o = inVal_15_fu_333_p3;
    end else begin
        inVal_1_out_o = inVal_1_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (loop_continue_12_reg_160 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inVal_1_out_o_ap_vld = 1'b1;
    end else begin
        inVal_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (loop_continue_12_reg_160 == 1'd0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        last_1_out_ap_vld = 1'b1;
    end else begin
        last_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op67_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mergeStream_2_blk_n = mergeStream_2_full_n;
    end else begin
        mergeStream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op67_write_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mergeStream_2_write_local = 1'b1;
    end else begin
        mergeStream_2_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((loop_continue_12_reg_160_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outVal_15_out_o = outVal_fu_435_p3;
    end else begin
        outVal_15_out_o = outVal_15_out_i;
    end
end

always @ (*) begin
    if (((loop_continue_12_reg_160_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outVal_15_out_o_ap_vld = 1'b1;
    end else begin
        outVal_15_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op53_read_state2 == 1'b1) & (huffStream_2_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((ap_predicate_op67_write_state3 == 1'b1) & (mergeStream_2_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_349 = ((1'b0 == ap_block_pp0_stage0) & (loop_continue_12_reg_160 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_353 = ((icmp_ln246_fu_287_p2 == 1'd0) & (loop_continue_12_reg_160 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_358 = ((1'b0 == ap_block_pp0_stage0_11001) & (loop_continue_12_reg_160 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter1_dsize_1_reg_185 = 'bx;

assign ap_phi_reg_pp0_iter1_inStVal_strobe_1_reg_207 = 'bx;

assign ap_phi_reg_pp0_iter1_loop_continue_1_reg_195 = 'bx;

always @ (*) begin
    ap_predicate_op53_read_state2 = ((icmp_ln246_fu_287_p2 == 1'd0) & (loop_continue_12_reg_160 == 1'd1));
end

always @ (*) begin
    ap_predicate_op67_write_state3 = ((icmp_ln233_reg_490 == 1'd1) & (loop_continue_12_reg_160_pp0_iter1_reg == 1'd1));
end

assign ap_ready = ap_ready_sig;

assign byteIdx_14_fu_341_p2 = (ap_sig_allocacmp_byteIdx_13 + 8'd1);

assign dsize_15_fu_347_p2 = (ap_phi_mux_dsize_1_phi_fu_188_p4 + zext_ln251_fu_283_p1);

assign huffStream_2_read = huffStream_2_read_local;

assign icmp_ln233_fu_252_p2 = ((byteIdx_fu_100 == 8'd4) ? 1'b1 : 1'b0);

assign icmp_ln246_fu_287_p2 = ((inStVal_strobe_12_fu_96 == 2'd0) ? 1'b1 : 1'b0);

assign inStVal_data_18_fu_353_p1 = huffStream_2_dout[7:0];

assign inVal_14_fu_321_p5 = {{inStVal_data_17_fu_112}, {inVal_3_fu_305_p3[7:0]}};

assign inVal_15_fu_333_p3 = ((tmp_7_fu_313_p3[0:0] == 1'b1) ? inVal_14_fu_321_p5 : inVal_3_fu_305_p3);

assign inVal_3_fu_305_p3 = ((icmp_ln246_fu_287_p2[0:0] == 1'b1) ? inVal_1_out_i : inVal_fu_293_p5);

assign inVal_fu_293_p5 = {{inVal_1_out_i[15:8]}, {inStVal_data_fu_108}};

assign last_1_out = last_reg_171;

assign loop_continue_13_fu_258_p2 = ((inStVal_strobe_12_fu_96 != 2'd0) ? 1'b1 : 1'b0);

assign mergeStream_2_din = tmpVal_fu_413_p3;

assign mergeStream_2_write = mergeStream_2_write_local;

assign outVal_fu_435_p3 = {{inVal_15_reg_498}, {outVal_s_fu_425_p4}};

assign outVal_s_fu_425_p4 = {{outVal_15_out_i[63:16]}};

assign tmpVal_fu_413_p3 = {{outVal_15_out_i}, {dsize_14_reg_485}};

assign tmp_7_fu_313_p3 = inStVal_strobe_12_fu_96[32'd1];

assign zext_ln251_fu_283_p1 = inStVal_strobe_12_fu_96;

endmodule //gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_13_Pipeline_stream_upsizer_main
