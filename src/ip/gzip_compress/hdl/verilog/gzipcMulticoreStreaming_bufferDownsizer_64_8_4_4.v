// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_bufferDownsizer_64_8_4_4 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        distStream_3_dout,
        distStream_3_num_data_valid,
        distStream_3_fifo_cap,
        distStream_3_empty_n,
        distStream_3_read,
        downStream_3_din,
        downStream_3_num_data_valid,
        downStream_3_fifo_cap,
        downStream_3_full_n,
        downStream_3_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [67:0] distStream_3_dout;
input  [9:0] distStream_3_num_data_valid;
input  [9:0] distStream_3_fifo_cap;
input   distStream_3_empty_n;
output   distStream_3_read;
output  [8:0] downStream_3_din;
input  [5:0] downStream_3_num_data_valid;
input  [5:0] downStream_3_fifo_cap;
input   downStream_3_full_n;
output   downStream_3_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg distStream_3_read;
reg[8:0] downStream_3_din;
reg downStream_3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    distStream_3_blk_n;
wire    ap_CS_fsm_state2;
reg    downStream_3_blk_n;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [67:0] inVal_reg_130;
wire   [3:0] inSize_fu_82_p1;
reg   [3:0] inSize_reg_135;
reg   [7:0] outVal_data_load_reg_144;
wire    ap_CS_fsm_state3;
wire    grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_start;
wire    grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_done;
wire    grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_idle;
wire    grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_ready;
wire    grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_distStream_3_read;
wire   [8:0] grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_downStream_3_din;
wire    grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_downStream_3_write;
wire   [7:0] grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_outVal_data_38_out;
wire    grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_outVal_data_38_out_ap_vld;
reg    grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [7:0] outVal_data_fu_44;
reg    distStream_3_read_local;
wire   [8:0] tmp_s_fu_95_p3;
reg   [8:0] downStream_3_din_local;
wire   [8:0] p_0_fu_109_p3;
reg    downStream_3_write_local;
wire   [0:0] icmp_ln182_fu_86_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_start_reg = 1'b0;
#0 outVal_data_fu_44 = 8'd0;
end

gzipcMulticoreStreaming_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_start),
    .ap_done(grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_done),
    .ap_idle(grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_idle),
    .ap_ready(grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_ready),
    .distStream_3_dout(distStream_3_dout),
    .distStream_3_num_data_valid(10'd0),
    .distStream_3_fifo_cap(10'd0),
    .distStream_3_empty_n(distStream_3_empty_n),
    .distStream_3_read(grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_distStream_3_read),
    .downStream_3_din(grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_downStream_3_din),
    .downStream_3_num_data_valid(6'd0),
    .downStream_3_fifo_cap(6'd0),
    .downStream_3_full_n(downStream_3_full_n),
    .downStream_3_write(grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_downStream_3_write),
    .outVal_data(outVal_data_load_reg_144),
    .inVal(inVal_reg_130),
    .empty(inSize_reg_135),
    .zext_ln183(inSize_reg_135),
    .outVal_data_38_out(grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_outVal_data_38_out),
    .outVal_data_38_out_ap_vld(grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_outVal_data_38_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((downStream_3_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_start_reg <= 1'b1;
        end else if ((grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_ready == 1'b1)) begin
            grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((distStream_3_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        inSize_reg_135 <= inSize_fu_82_p1;
        inVal_reg_130 <= distStream_3_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((downStream_3_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        outVal_data_fu_44 <= grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_outVal_data_38_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outVal_data_load_reg_144 <= outVal_data_fu_44;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((distStream_3_empty_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((downStream_3_full_n == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((downStream_3_full_n == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((downStream_3_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        distStream_3_blk_n = distStream_3_empty_n;
    end else begin
        distStream_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        distStream_3_read = grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_distStream_3_read;
    end else begin
        distStream_3_read = distStream_3_read_local;
    end
end

always @ (*) begin
    if (((distStream_3_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        distStream_3_read_local = 1'b1;
    end else begin
        distStream_3_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        downStream_3_blk_n = downStream_3_full_n;
    end else begin
        downStream_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        downStream_3_din = grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_downStream_3_din;
    end else begin
        downStream_3_din = downStream_3_din_local;
    end
end

always @ (*) begin
    if ((downStream_3_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            downStream_3_din_local = p_0_fu_109_p3;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            downStream_3_din_local = tmp_s_fu_95_p3;
        end else begin
            downStream_3_din_local = 'bx;
        end
    end else begin
        downStream_3_din_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        downStream_3_write = grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_downStream_3_write;
    end else begin
        downStream_3_write = downStream_3_write_local;
    end
end

always @ (*) begin
    if ((((downStream_3_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((downStream_3_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        downStream_3_write_local = 1'b1;
    end else begin
        downStream_3_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((downStream_3_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((distStream_3_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln182_fu_86_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((distStream_3_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln182_fu_86_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((downStream_3_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((downStream_3_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_start = grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_ap_start_reg;

assign icmp_ln182_fu_86_p2 = ((inSize_fu_82_p1 == 4'd0) ? 1'b1 : 1'b0);

assign inSize_fu_82_p1 = distStream_3_dout[3:0];

assign p_0_fu_109_p3 = {{1'd0}, {outVal_data_fu_44}};

assign start_out = real_start;

assign tmp_s_fu_95_p3 = {{1'd0}, {grp_bufferDownsizer_64_8_4_4_Pipeline_downsizer_assign_fu_65_outVal_data_38_out}};

endmodule //gzipcMulticoreStreaming_bufferDownsizer_64_8_4_4
