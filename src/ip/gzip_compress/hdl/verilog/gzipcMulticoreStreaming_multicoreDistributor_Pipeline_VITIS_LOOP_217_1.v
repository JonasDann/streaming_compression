// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_multicoreDistributor_Pipeline_VITIS_LOOP_217_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        coreStream_dout,
        coreStream_num_data_valid,
        coreStream_fifo_cap,
        coreStream_empty_n,
        coreStream_read,
        storedBufferStream_dout,
        storedBufferStream_empty_n,
        storedBufferStream_read,
        distStream_6_din,
        distStream_6_num_data_valid,
        distStream_6_fifo_cap,
        distStream_6_full_n,
        distStream_6_write,
        distStream_5_din,
        distStream_5_num_data_valid,
        distStream_5_fifo_cap,
        distStream_5_full_n,
        distStream_5_write,
        distStream_4_din,
        distStream_4_num_data_valid,
        distStream_4_fifo_cap,
        distStream_4_full_n,
        distStream_4_write,
        distStream_3_din,
        distStream_3_num_data_valid,
        distStream_3_fifo_cap,
        distStream_3_full_n,
        distStream_3_write,
        distStream_2_din,
        distStream_2_num_data_valid,
        distStream_2_fifo_cap,
        distStream_2_full_n,
        distStream_2_write,
        distStream_1_din,
        distStream_1_num_data_valid,
        distStream_1_fifo_cap,
        distStream_1_full_n,
        distStream_1_write,
        distStream_0_din,
        distStream_0_num_data_valid,
        distStream_0_fifo_cap,
        distStream_0_full_n,
        distStream_0_write,
        distStream_7_din,
        distStream_7_num_data_valid,
        distStream_7_fifo_cap,
        distStream_7_full_n,
        distStream_7_write,
        storedBufferStream_din,
        storedBufferStream_full_n,
        storedBufferStream_write,
        strdCntr,
        writeSize,
        readSize_1,
        empty_51,
        empty,
        strdCntr_1_out,
        strdCntr_1_out_ap_vld,
        writeSize_1_out,
        writeSize_1_out_ap_vld,
        readSize_2_out,
        readSize_2_out_ap_vld,
        last_2_out,
        last_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [67:0] coreStream_dout;
input  [2:0] coreStream_num_data_valid;
input  [2:0] coreStream_fifo_cap;
input   coreStream_empty_n;
output   coreStream_read;
input  [67:0] storedBufferStream_dout;
input   storedBufferStream_empty_n;
output   storedBufferStream_read;
output  [67:0] distStream_6_din;
input  [9:0] distStream_6_num_data_valid;
input  [9:0] distStream_6_fifo_cap;
input   distStream_6_full_n;
output   distStream_6_write;
output  [67:0] distStream_5_din;
input  [9:0] distStream_5_num_data_valid;
input  [9:0] distStream_5_fifo_cap;
input   distStream_5_full_n;
output   distStream_5_write;
output  [67:0] distStream_4_din;
input  [9:0] distStream_4_num_data_valid;
input  [9:0] distStream_4_fifo_cap;
input   distStream_4_full_n;
output   distStream_4_write;
output  [67:0] distStream_3_din;
input  [9:0] distStream_3_num_data_valid;
input  [9:0] distStream_3_fifo_cap;
input   distStream_3_full_n;
output   distStream_3_write;
output  [67:0] distStream_2_din;
input  [9:0] distStream_2_num_data_valid;
input  [9:0] distStream_2_fifo_cap;
input   distStream_2_full_n;
output   distStream_2_write;
output  [67:0] distStream_1_din;
input  [9:0] distStream_1_num_data_valid;
input  [9:0] distStream_1_fifo_cap;
input   distStream_1_full_n;
output   distStream_1_write;
output  [67:0] distStream_0_din;
input  [9:0] distStream_0_num_data_valid;
input  [9:0] distStream_0_fifo_cap;
input   distStream_0_full_n;
output   distStream_0_write;
output  [67:0] distStream_7_din;
input  [9:0] distStream_7_num_data_valid;
input  [9:0] distStream_7_fifo_cap;
input   distStream_7_full_n;
output   distStream_7_write;
output  [67:0] storedBufferStream_din;
input   storedBufferStream_full_n;
output   storedBufferStream_write;
input  [15:0] strdCntr;
input  [31:0] writeSize;
input  [31:0] readSize_1;
input  [2:0] empty_51;
input  [0:0] empty;
output  [15:0] strdCntr_1_out;
output   strdCntr_1_out_ap_vld;
output  [31:0] writeSize_1_out;
output   writeSize_1_out_ap_vld;
output  [31:0] readSize_2_out;
output   readSize_2_out_ap_vld;
output  [0:0] last_2_out;
output   last_2_out_ap_vld;

reg ap_idle;
reg strdCntr_1_out_ap_vld;
reg writeSize_1_out_ap_vld;
reg readSize_2_out_ap_vld;
reg last_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] or_ln217_fu_308_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] or_ln217_reg_437;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    storedBufferStream_o_blk_n;
wire    ap_block_pp0_stage0;
reg    storedBufferStream_i_blk_n;
reg    distStream_0_blk_n;
reg    coreStream_blk_n;
reg    distStream_1_blk_n;
reg    distStream_2_blk_n;
reg    distStream_3_blk_n;
reg    distStream_4_blk_n;
reg    distStream_5_blk_n;
reg    distStream_6_blk_n;
reg    distStream_7_blk_n;
reg   [0:0] last_reg_265;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] or_ln217_reg_437_pp0_iter1_reg;
reg   [67:0] tmpVal_reg_441;
wire   [3:0] strobe_fu_314_p1;
reg   [3:0] strobe_reg_446;
wire   [0:0] last_1_fu_341_p2;
wire   [3:0] trunc_ln225_fu_349_p1;
reg   [3:0] trunc_ln225_reg_457;
reg   [0:0] ap_phi_mux_last_phi_fu_269_p4;
wire    ap_loop_init;
reg   [12:0] i_fu_108;
wire   [12:0] i_3_fu_318_p2;
reg   [12:0] ap_sig_allocacmp_i_2;
reg   [31:0] readSize_fu_112;
wire   [31:0] readSize_2_fu_335_p2;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [31:0] writeSize_1_fu_116;
wire   [31:0] writeSize_5_fu_379_p2;
reg   [15:0] strdCntr_1_fu_120;
wire   [15:0] strdCntr_5_fu_357_p2;
reg    coreStream_read_local;
reg    storedBufferStream_read_local;
reg    ap_block_pp0_stage0_01001;
reg    distStream_6_write_local;
reg    distStream_5_write_local;
reg    distStream_4_write_local;
reg    distStream_3_write_local;
reg    distStream_2_write_local;
reg    distStream_1_write_local;
reg    distStream_0_write_local;
reg    distStream_7_write_local;
reg    storedBufferStream_write_local;
wire   [0:0] tmp_11_fu_300_p3;
wire   [31:0] zext_ln221_fu_332_p1;
wire   [15:0] zext_ln225_fu_353_p1;
wire   [31:0] zext_ln226_fu_376_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_418;
reg    ap_condition_423;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_fu_108 = 13'd0;
#0 readSize_fu_112 = 32'd0;
#0 writeSize_1_fu_116 = 32'd0;
#0 strdCntr_1_fu_120 = 16'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((or_ln217_fu_308_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            i_fu_108 <= i_3_fu_318_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_108 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_423)) begin
            last_reg_265 <= last_1_fu_341_p2;
        end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            last_reg_265 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            readSize_fu_112 <= readSize_1;
        end else if (((or_ln217_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            readSize_fu_112 <= readSize_2_fu_335_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            strdCntr_1_fu_120 <= strdCntr;
        end else if (((or_ln217_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            strdCntr_1_fu_120 <= strdCntr_5_fu_357_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            writeSize_1_fu_116 <= writeSize;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (or_ln217_reg_437_pp0_iter1_reg == 1'd0))) begin
            writeSize_1_fu_116 <= writeSize_5_fu_379_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        or_ln217_reg_437 <= or_ln217_fu_308_p2;
        or_ln217_reg_437_pp0_iter1_reg <= or_ln217_reg_437;
        strobe_reg_446 <= strobe_fu_314_p1;
        tmpVal_reg_441 <= coreStream_dout;
        trunc_ln225_reg_457 <= trunc_ln225_fu_349_p1;
    end
end

always @ (*) begin
    if (((or_ln217_fu_308_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_418)) begin
            ap_phi_mux_last_phi_fu_269_p4 = last_1_fu_341_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_last_phi_fu_269_p4 = 1'd0;
        end else begin
            ap_phi_mux_last_phi_fu_269_p4 = last_reg_265;
        end
    end else begin
        ap_phi_mux_last_phi_fu_269_p4 = last_reg_265;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 13'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_108;
    end
end

always @ (*) begin
    if (((or_ln217_fu_308_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        coreStream_blk_n = coreStream_empty_n;
    end else begin
        coreStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln217_fu_308_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coreStream_read_local = 1'b1;
    end else begin
        coreStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_0_blk_n = distStream_0_full_n;
    end else begin
        distStream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_0_write_local = 1'b1;
    end else begin
        distStream_0_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_1_blk_n = distStream_1_full_n;
    end else begin
        distStream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_1_write_local = 1'b1;
    end else begin
        distStream_1_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_2_blk_n = distStream_2_full_n;
    end else begin
        distStream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_2_write_local = 1'b1;
    end else begin
        distStream_2_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_3_blk_n = distStream_3_full_n;
    end else begin
        distStream_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_3_write_local = 1'b1;
    end else begin
        distStream_3_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_4_blk_n = distStream_4_full_n;
    end else begin
        distStream_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_4_write_local = 1'b1;
    end else begin
        distStream_4_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_5_blk_n = distStream_5_full_n;
    end else begin
        distStream_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_5_write_local = 1'b1;
    end else begin
        distStream_5_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_6_blk_n = distStream_6_full_n;
    end else begin
        distStream_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_6_write_local = 1'b1;
    end else begin
        distStream_6_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_7_blk_n = distStream_7_full_n;
    end else begin
        distStream_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((empty_51 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_7_write_local = 1'b1;
    end else begin
        distStream_7_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_437 == 1'd1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        last_2_out_ap_vld = 1'b1;
    end else begin
        last_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_437 == 1'd1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        readSize_2_out_ap_vld = 1'b1;
    end else begin
        readSize_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        storedBufferStream_i_blk_n = storedBufferStream_empty_n;
    end else begin
        storedBufferStream_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln217_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        storedBufferStream_o_blk_n = storedBufferStream_full_n;
    end else begin
        storedBufferStream_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln217_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        storedBufferStream_read_local = 1'b1;
    end else begin
        storedBufferStream_read_local = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        storedBufferStream_write_local = 1'b1;
    end else begin
        storedBufferStream_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_437 == 1'd1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        strdCntr_1_out_ap_vld = 1'b1;
    end else begin
        strdCntr_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln217_reg_437 == 1'd1) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        writeSize_1_out_ap_vld = 1'b1;
    end else begin
        writeSize_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((or_ln217_fu_308_p2 == 1'd0) & (coreStream_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((distStream_3_full_n == 1'b0) & (empty_51 == 3'd3)) | ((distStream_4_full_n == 1'b0) & (empty_51 == 3'd4)) | ((distStream_5_full_n == 1'b0) & (empty_51 == 3'd5)) | ((empty_51 == 3'd6) & (distStream_6_full_n == 1'b0)) | ((or_ln217_reg_437 == 1'd0) & (storedBufferStream_empty_n == 1'b0)) | ((or_ln217_reg_437 == 1'd0) & (storedBufferStream_full_n == 1'b0)) | ((empty_51 == 3'd7) & (distStream_7_full_n == 1'b0)) | ((empty_51 == 3'd0) & (distStream_0_full_n == 1'b0)) | ((empty_51 == 3'd1) & (distStream_1_full_n == 1'b0)) | ((empty_51 == 3'd2) & (distStream_2_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_418 = ((or_ln217_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_423 = ((or_ln217_reg_437 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign coreStream_read = coreStream_read_local;

assign distStream_0_din = storedBufferStream_dout;

assign distStream_0_write = distStream_0_write_local;

assign distStream_1_din = storedBufferStream_dout;

assign distStream_1_write = distStream_1_write_local;

assign distStream_2_din = storedBufferStream_dout;

assign distStream_2_write = distStream_2_write_local;

assign distStream_3_din = storedBufferStream_dout;

assign distStream_3_write = distStream_3_write_local;

assign distStream_4_din = storedBufferStream_dout;

assign distStream_4_write = distStream_4_write_local;

assign distStream_5_din = storedBufferStream_dout;

assign distStream_5_write = distStream_5_write_local;

assign distStream_6_din = storedBufferStream_dout;

assign distStream_6_write = distStream_6_write_local;

assign distStream_7_din = storedBufferStream_dout;

assign distStream_7_write = distStream_7_write_local;

assign i_3_fu_318_p2 = (ap_sig_allocacmp_i_2 + 13'd8);

assign last_1_fu_341_p2 = ((strobe_reg_446 == 4'd0) ? 1'b1 : 1'b0);

assign last_2_out = last_reg_265;

assign or_ln217_fu_308_p2 = (tmp_11_fu_300_p3 | ap_phi_mux_last_phi_fu_269_p4);

assign readSize_2_fu_335_p2 = (zext_ln221_fu_332_p1 + readSize_fu_112);

assign readSize_2_out = readSize_fu_112;

assign storedBufferStream_din = tmpVal_reg_441;

assign storedBufferStream_read = storedBufferStream_read_local;

assign storedBufferStream_write = storedBufferStream_write_local;

assign strdCntr_1_out = strdCntr_1_fu_120;

assign strdCntr_5_fu_357_p2 = (zext_ln225_fu_353_p1 + strdCntr_1_fu_120);

assign strobe_fu_314_p1 = coreStream_dout[3:0];

assign tmp_11_fu_300_p3 = ap_sig_allocacmp_i_2[32'd12];

assign trunc_ln225_fu_349_p1 = storedBufferStream_dout[3:0];

assign writeSize_1_out = writeSize_1_fu_116;

assign writeSize_5_fu_379_p2 = (zext_ln226_fu_376_p1 + writeSize_1_fu_116);

assign zext_ln221_fu_332_p1 = strobe_reg_446;

assign zext_ln225_fu_353_p1 = trunc_ln225_fu_349_p1;

assign zext_ln226_fu_376_p1 = trunc_ln225_reg_457;

endmodule //gzipcMulticoreStreaming_multicoreDistributor_Pipeline_VITIS_LOOP_217_1
