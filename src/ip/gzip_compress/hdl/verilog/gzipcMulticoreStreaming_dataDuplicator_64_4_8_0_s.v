// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_dataDuplicator_64_4_8_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        inStream_dout,
        inStream_num_data_valid,
        inStream_fifo_cap,
        inStream_empty_n,
        inStream_read,
        checksumInitStream_din,
        checksumInitStream_num_data_valid,
        checksumInitStream_fifo_cap,
        checksumInitStream_full_n,
        checksumInitStream_write,
        checksumStream_din,
        checksumStream_num_data_valid,
        checksumStream_fifo_cap,
        checksumStream_full_n,
        checksumStream_write,
        checksumSizeStream_din,
        checksumSizeStream_num_data_valid,
        checksumSizeStream_fifo_cap,
        checksumSizeStream_full_n,
        checksumSizeStream_write,
        coreStream_din,
        coreStream_num_data_valid,
        coreStream_fifo_cap,
        coreStream_full_n,
        coreStream_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [67:0] inStream_dout;
input  [2:0] inStream_num_data_valid;
input  [2:0] inStream_fifo_cap;
input   inStream_empty_n;
output   inStream_read;
output  [31:0] checksumInitStream_din;
input  [2:0] checksumInitStream_num_data_valid;
input  [2:0] checksumInitStream_fifo_cap;
input   checksumInitStream_full_n;
output   checksumInitStream_write;
output  [63:0] checksumStream_din;
input  [2:0] checksumStream_num_data_valid;
input  [2:0] checksumStream_fifo_cap;
input   checksumStream_full_n;
output   checksumStream_write;
output  [4:0] checksumSizeStream_din;
input  [2:0] checksumSizeStream_num_data_valid;
input  [2:0] checksumSizeStream_fifo_cap;
input   checksumSizeStream_full_n;
output   checksumSizeStream_write;
output  [67:0] coreStream_din;
input  [2:0] coreStream_num_data_valid;
input  [2:0] coreStream_fifo_cap;
input   coreStream_full_n;
output   coreStream_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg inStream_read;
reg checksumStream_write;
reg checksumSizeStream_write;
reg coreStream_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    checksumInitStream_blk_n;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_idle;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_ready;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_inStream_read;
wire   [4:0] grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream_din;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream_write;
wire   [67:0] grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream_din;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream_write;
wire   [63:0] grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream_din;
wire    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream_write;
reg    grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg    checksumInitStream_write_local;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg = 1'b0;
end

gzipcMulticoreStreaming_dataDuplicator_64_4_8_0_Pipeline_duplicator grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start),
    .ap_done(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done),
    .ap_idle(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_idle),
    .ap_ready(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_ready),
    .inStream_dout(inStream_dout),
    .inStream_num_data_valid(3'd0),
    .inStream_fifo_cap(3'd0),
    .inStream_empty_n(inStream_empty_n),
    .inStream_read(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_inStream_read),
    .checksumSizeStream_din(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream_din),
    .checksumSizeStream_num_data_valid(3'd0),
    .checksumSizeStream_fifo_cap(3'd0),
    .checksumSizeStream_full_n(checksumSizeStream_full_n),
    .checksumSizeStream_write(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream_write),
    .coreStream_din(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream_din),
    .coreStream_num_data_valid(3'd0),
    .coreStream_fifo_cap(3'd0),
    .coreStream_full_n(coreStream_full_n),
    .coreStream_write(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream_write),
    .checksumStream_din(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream_din),
    .checksumStream_num_data_valid(3'd0),
    .checksumStream_fifo_cap(3'd0),
    .checksumStream_full_n(checksumStream_full_n),
    .checksumStream_write(grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_ready == 1'b1)) begin
            grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        checksumInitStream_blk_n = checksumInitStream_full_n;
    end else begin
        checksumInitStream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        checksumInitStream_write_local = 1'b1;
    end else begin
        checksumInitStream_write_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        checksumSizeStream_write = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream_write;
    end else begin
        checksumSizeStream_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        checksumStream_write = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream_write;
    end else begin
        checksumStream_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        coreStream_write = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream_write;
    end else begin
        coreStream_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inStream_read = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_inStream_read;
    end else begin
        inStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (checksumInitStream_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign checksumInitStream_din = 32'd4294967295;

assign checksumInitStream_write = checksumInitStream_write_local;

assign checksumSizeStream_din = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumSizeStream_din;

assign checksumStream_din = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_checksumStream_din;

assign coreStream_din = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_coreStream_din;

assign grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start = grp_dataDuplicator_64_4_8_0_Pipeline_duplicator_fu_42_ap_start_reg;

assign start_out = real_start;

endmodule //gzipcMulticoreStreaming_dataDuplicator_64_4_8_0_s
