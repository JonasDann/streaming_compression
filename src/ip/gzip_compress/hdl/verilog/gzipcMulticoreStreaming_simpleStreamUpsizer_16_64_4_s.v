// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        huffStream_7_dout,
        huffStream_7_num_data_valid,
        huffStream_7_fifo_cap,
        huffStream_7_empty_n,
        huffStream_7_read,
        mergeStream_7_din,
        mergeStream_7_num_data_valid,
        mergeStream_7_fifo_cap,
        mergeStream_7_full_n,
        mergeStream_7_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [17:0] huffStream_7_dout;
input  [2:0] huffStream_7_num_data_valid;
input  [2:0] huffStream_7_fifo_cap;
input   huffStream_7_empty_n;
output   huffStream_7_read;
output  [67:0] mergeStream_7_din;
input  [9:0] mergeStream_7_num_data_valid;
input  [9:0] mergeStream_7_fifo_cap;
input   mergeStream_7_full_n;
output   mergeStream_7_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg huffStream_7_read;
reg[67:0] mergeStream_7_din;
reg mergeStream_7_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    huffStream_7_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_last_phi_fu_86_p4;
reg    mergeStream_7_blk_n;
wire    ap_CS_fsm_state5;
wire   [7:0] inStVal_data_fu_108_p1;
reg   [7:0] inStVal_data_reg_157;
reg    ap_block_state2;
reg   [7:0] inStVal_data_23_reg_162;
reg   [1:0] inStVal_strobe_reg_167;
wire   [0:0] loop_continue_fu_132_p2;
reg   [0:0] loop_continue_reg_173;
wire    ap_CS_fsm_state3;
wire    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start;
wire    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_done;
wire    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_idle;
wire    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_ready;
wire    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_huffStream_7_read;
wire   [67:0] grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_din;
wire    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_write;
wire   [63:0] grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o;
wire    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o_ap_vld;
wire   [15:0] grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o;
wire    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o_ap_vld;
wire   [0:0] grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_last_1_out;
wire    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_last_1_out_ap_vld;
reg   [0:0] last_reg_82;
reg    ap_block_state1;
reg    grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [63:0] outVal_fu_60;
reg   [15:0] inVal_fu_56;
reg    huffStream_7_read_local;
reg    mergeStream_7_write_local;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg = 1'b0;
end

gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start),
    .ap_done(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_done),
    .ap_idle(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_idle),
    .ap_ready(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_ready),
    .huffStream_7_dout(huffStream_7_dout),
    .huffStream_7_num_data_valid(3'd0),
    .huffStream_7_fifo_cap(3'd0),
    .huffStream_7_empty_n(huffStream_7_empty_n),
    .huffStream_7_read(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_huffStream_7_read),
    .mergeStream_7_din(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_din),
    .mergeStream_7_num_data_valid(10'd0),
    .mergeStream_7_fifo_cap(10'd0),
    .mergeStream_7_full_n(mergeStream_7_full_n),
    .mergeStream_7_write(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_write),
    .inStVal_data_44(inStVal_data_23_reg_162),
    .empty(inStVal_data_reg_157),
    .inStVal_strobe(inStVal_strobe_reg_167),
    .loop_continue(loop_continue_reg_173),
    .outVal_19_out_i(outVal_fu_60),
    .outVal_19_out_o(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o),
    .outVal_19_out_o_ap_vld(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o_ap_vld),
    .inVal_1_out_i(inVal_fu_56),
    .inVal_1_out_o(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o),
    .inVal_1_out_o_ap_vld(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o_ap_vld),
    .last_1_out(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_last_1_out),
    .last_1_out_ap_vld(grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_last_1_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2) & (ap_phi_mux_last_phi_fu_86_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg <= 1'b1;
        end else if ((grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_ready == 1'b1)) begin
            grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((mergeStream_7_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        last_reg_82 <= grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_last_1_out;
    end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        last_reg_82 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
        inStVal_data_23_reg_162 <= {{huffStream_7_dout[15:8]}};
        inStVal_data_reg_157 <= inStVal_data_fu_108_p1;
        inStVal_strobe_reg_167 <= {{huffStream_7_dout[17:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o_ap_vld == 1'b1))) begin
        inVal_fu_56 <= grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_inVal_1_out_o;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        loop_continue_reg_173 <= loop_continue_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o_ap_vld == 1'b1))) begin
        outVal_fu_60 <= grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_outVal_19_out_o;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((mergeStream_7_full_n == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (ap_phi_mux_last_phi_fu_86_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (ap_phi_mux_last_phi_fu_86_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((last_reg_82 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        huffStream_7_blk_n = huffStream_7_empty_n;
    end else begin
        huffStream_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        huffStream_7_read = grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_huffStream_7_read;
    end else begin
        huffStream_7_read = huffStream_7_read_local;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (last_reg_82 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        huffStream_7_read_local = 1'b1;
    end else begin
        huffStream_7_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mergeStream_7_blk_n = mergeStream_7_full_n;
    end else begin
        mergeStream_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mergeStream_7_din = grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_din;
    end else begin
        mergeStream_7_din = 68'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mergeStream_7_write = grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_mergeStream_7_write;
    end else begin
        mergeStream_7_write = mergeStream_7_write_local;
    end
end

always @ (*) begin
    if (((mergeStream_7_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        mergeStream_7_write_local = 1'b1;
    end else begin
        mergeStream_7_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2) & (ap_phi_mux_last_phi_fu_86_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state2) & (last_reg_82 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((mergeStream_7_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((last_reg_82 == 1'd0) & (huffStream_7_empty_n == 1'b0));
end

assign ap_phi_mux_last_phi_fu_86_p4 = last_reg_82;

assign grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start = grp_simpleStreamUpsizer_16_64_4_Pipeline_stream_upsizer_main_fu_93_ap_start_reg;

assign inStVal_data_fu_108_p1 = huffStream_7_dout[7:0];

assign loop_continue_fu_132_p2 = ((inStVal_strobe_reg_167 != 2'd0) ? 1'b1 : 1'b0);

endmodule //gzipcMulticoreStreaming_simpleStreamUpsizer_16_64_4_s
