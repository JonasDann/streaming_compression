// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_gzipMulticoreCompressAxiStream_0_4_8_32_s (
        inStream_TDATA,
        inStream_TKEEP,
        inStream_TSTRB,
        inStream_TLAST,
        outStream_TDATA,
        outStream_TKEEP,
        outStream_TSTRB,
        outStream_TUSER,
        outStream_TLAST,
        ap_clk,
        ap_rst,
        inStream_TVALID,
        inStream_TREADY,
        ap_start,
        outStream_TVALID,
        outStream_TREADY,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [63:0] inStream_TDATA;
input  [7:0] inStream_TKEEP;
input  [7:0] inStream_TSTRB;
input  [0:0] inStream_TLAST;
output  [63:0] outStream_TDATA;
output  [7:0] outStream_TKEEP;
output  [7:0] outStream_TSTRB;
output  [31:0] outStream_TUSER;
output  [0:0] outStream_TLAST;
input   ap_clk;
input   ap_rst;
input   inStream_TVALID;
output   inStream_TREADY;
input   ap_start;
output   outStream_TVALID;
input   outStream_TREADY;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    axiu2hlsStream_64_U0_ap_start;
wire    axiu2hlsStream_64_U0_ap_done;
wire    axiu2hlsStream_64_U0_ap_continue;
wire    axiu2hlsStream_64_U0_ap_idle;
wire    axiu2hlsStream_64_U0_ap_ready;
wire    axiu2hlsStream_64_U0_start_out;
wire    axiu2hlsStream_64_U0_start_write;
wire    axiu2hlsStream_64_U0_inStream_TREADY;
wire   [67:0] axiu2hlsStream_64_U0_inStream_din;
wire    axiu2hlsStream_64_U0_inStream_write;
wire    gzipMulticoreStaticCompressStream_0_4_8_U0_ap_start;
wire    gzipMulticoreStaticCompressStream_0_4_8_U0_start_out;
wire    gzipMulticoreStaticCompressStream_0_4_8_U0_start_write;
wire    gzipMulticoreStaticCompressStream_0_4_8_U0_inStream_read;
wire   [67:0] gzipMulticoreStaticCompressStream_0_4_8_U0_outStream_din;
wire    gzipMulticoreStaticCompressStream_0_4_8_U0_outStream_write;
wire    gzipMulticoreStaticCompressStream_0_4_8_U0_ap_done;
wire    gzipMulticoreStaticCompressStream_0_4_8_U0_ap_ready;
wire    gzipMulticoreStaticCompressStream_0_4_8_U0_ap_idle;
wire    gzipMulticoreStaticCompressStream_0_4_8_U0_ap_continue;
wire    hlsStream2axiu_64_32_U0_ap_start;
wire    hlsStream2axiu_64_32_U0_ap_done;
wire    hlsStream2axiu_64_32_U0_ap_continue;
wire    hlsStream2axiu_64_32_U0_ap_idle;
wire    hlsStream2axiu_64_32_U0_ap_ready;
wire    hlsStream2axiu_64_32_U0_outStream_read;
wire   [63:0] hlsStream2axiu_64_32_U0_outStream_TDATA;
wire    hlsStream2axiu_64_32_U0_outStream_TVALID;
wire   [7:0] hlsStream2axiu_64_32_U0_outStream_TKEEP;
wire   [7:0] hlsStream2axiu_64_32_U0_outStream_TSTRB;
wire   [31:0] hlsStream2axiu_64_32_U0_outStream_TUSER;
wire   [0:0] hlsStream2axiu_64_32_U0_outStream_TLAST;
wire    inStream_full_n;
wire   [67:0] inStream_dout;
wire   [2:0] inStream_num_data_valid;
wire   [2:0] inStream_fifo_cap;
wire    inStream_empty_n;
wire    outStream_full_n;
wire   [67:0] outStream_dout;
wire   [2:0] outStream_num_data_valid;
wire   [2:0] outStream_fifo_cap;
wire    outStream_empty_n;
wire   [0:0] start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_din;
wire    start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_full_n;
wire   [0:0] start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_dout;
wire    start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_empty_n;
wire   [0:0] start_for_hlsStream2axiu_64_32_U0_din;
wire    start_for_hlsStream2axiu_64_32_U0_full_n;
wire   [0:0] start_for_hlsStream2axiu_64_32_U0_dout;
wire    start_for_hlsStream2axiu_64_32_U0_empty_n;

gzipcMulticoreStreaming_axiu2hlsStream_64_s axiu2hlsStream_64_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(axiu2hlsStream_64_U0_ap_start),
    .start_full_n(start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_full_n),
    .ap_done(axiu2hlsStream_64_U0_ap_done),
    .ap_continue(axiu2hlsStream_64_U0_ap_continue),
    .ap_idle(axiu2hlsStream_64_U0_ap_idle),
    .ap_ready(axiu2hlsStream_64_U0_ap_ready),
    .start_out(axiu2hlsStream_64_U0_start_out),
    .start_write(axiu2hlsStream_64_U0_start_write),
    .inStream_TDATA(inStream_TDATA),
    .inStream_TVALID(inStream_TVALID),
    .inStream_TREADY(axiu2hlsStream_64_U0_inStream_TREADY),
    .inStream_TKEEP(inStream_TKEEP),
    .inStream_TSTRB(inStream_TSTRB),
    .inStream_TLAST(inStream_TLAST),
    .inStream_din(axiu2hlsStream_64_U0_inStream_din),
    .inStream_num_data_valid(inStream_num_data_valid),
    .inStream_fifo_cap(inStream_fifo_cap),
    .inStream_full_n(inStream_full_n),
    .inStream_write(axiu2hlsStream_64_U0_inStream_write)
);

gzipcMulticoreStreaming_gzipMulticoreStaticCompressStream_0_4_8_s gzipMulticoreStaticCompressStream_0_4_8_U0(
    .ap_start(gzipMulticoreStaticCompressStream_0_4_8_U0_ap_start),
    .start_full_n(start_for_hlsStream2axiu_64_32_U0_full_n),
    .start_out(gzipMulticoreStaticCompressStream_0_4_8_U0_start_out),
    .start_write(gzipMulticoreStaticCompressStream_0_4_8_U0_start_write),
    .inStream_dout(inStream_dout),
    .inStream_empty_n(inStream_empty_n),
    .inStream_read(gzipMulticoreStaticCompressStream_0_4_8_U0_inStream_read),
    .outStream_din(gzipMulticoreStaticCompressStream_0_4_8_U0_outStream_din),
    .outStream_full_n(outStream_full_n),
    .outStream_write(gzipMulticoreStaticCompressStream_0_4_8_U0_outStream_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_done(gzipMulticoreStaticCompressStream_0_4_8_U0_ap_done),
    .ap_ready(gzipMulticoreStaticCompressStream_0_4_8_U0_ap_ready),
    .ap_idle(gzipMulticoreStaticCompressStream_0_4_8_U0_ap_idle),
    .ap_continue(gzipMulticoreStaticCompressStream_0_4_8_U0_ap_continue)
);

gzipcMulticoreStreaming_hlsStream2axiu_64_32_s hlsStream2axiu_64_32_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(hlsStream2axiu_64_32_U0_ap_start),
    .ap_done(hlsStream2axiu_64_32_U0_ap_done),
    .ap_continue(hlsStream2axiu_64_32_U0_ap_continue),
    .ap_idle(hlsStream2axiu_64_32_U0_ap_idle),
    .ap_ready(hlsStream2axiu_64_32_U0_ap_ready),
    .outStream_dout(outStream_dout),
    .outStream_num_data_valid(outStream_num_data_valid),
    .outStream_fifo_cap(outStream_fifo_cap),
    .outStream_empty_n(outStream_empty_n),
    .outStream_read(hlsStream2axiu_64_32_U0_outStream_read),
    .outStream_TDATA(hlsStream2axiu_64_32_U0_outStream_TDATA),
    .outStream_TVALID(hlsStream2axiu_64_32_U0_outStream_TVALID),
    .outStream_TREADY(outStream_TREADY),
    .outStream_TKEEP(hlsStream2axiu_64_32_U0_outStream_TKEEP),
    .outStream_TSTRB(hlsStream2axiu_64_32_U0_outStream_TSTRB),
    .outStream_TUSER(hlsStream2axiu_64_32_U0_outStream_TUSER),
    .outStream_TLAST(hlsStream2axiu_64_32_U0_outStream_TLAST)
);

gzipcMulticoreStreaming_fifo_w68_d4_S_x inStream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(axiu2hlsStream_64_U0_inStream_din),
    .if_full_n(inStream_full_n),
    .if_write(axiu2hlsStream_64_U0_inStream_write),
    .if_dout(inStream_dout),
    .if_num_data_valid(inStream_num_data_valid),
    .if_fifo_cap(inStream_fifo_cap),
    .if_empty_n(inStream_empty_n),
    .if_read(gzipMulticoreStaticCompressStream_0_4_8_U0_inStream_read)
);

gzipcMulticoreStreaming_fifo_w68_d4_S_x outStream_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(gzipMulticoreStaticCompressStream_0_4_8_U0_outStream_din),
    .if_full_n(outStream_full_n),
    .if_write(gzipMulticoreStaticCompressStream_0_4_8_U0_outStream_write),
    .if_dout(outStream_dout),
    .if_num_data_valid(outStream_num_data_valid),
    .if_fifo_cap(outStream_fifo_cap),
    .if_empty_n(outStream_empty_n),
    .if_read(hlsStream2axiu_64_32_U0_outStream_read)
);

gzipcMulticoreStreaming_start_for_gzipMulticoreStaticCompressStream_0_4_8_U0 start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_din),
    .if_full_n(start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_full_n),
    .if_write(axiu2hlsStream_64_U0_start_write),
    .if_dout(start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_dout),
    .if_empty_n(start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_empty_n),
    .if_read(gzipMulticoreStaticCompressStream_0_4_8_U0_ap_ready)
);

gzipcMulticoreStreaming_start_for_hlsStream2axiu_64_32_U0 start_for_hlsStream2axiu_64_32_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_hlsStream2axiu_64_32_U0_din),
    .if_full_n(start_for_hlsStream2axiu_64_32_U0_full_n),
    .if_write(gzipMulticoreStaticCompressStream_0_4_8_U0_start_write),
    .if_dout(start_for_hlsStream2axiu_64_32_U0_dout),
    .if_empty_n(start_for_hlsStream2axiu_64_32_U0_empty_n),
    .if_read(hlsStream2axiu_64_32_U0_ap_ready)
);

assign ap_done = hlsStream2axiu_64_32_U0_ap_done;

assign ap_idle = (hlsStream2axiu_64_32_U0_ap_idle & gzipMulticoreStaticCompressStream_0_4_8_U0_ap_idle & axiu2hlsStream_64_U0_ap_idle);

assign ap_ready = axiu2hlsStream_64_U0_ap_ready;

assign axiu2hlsStream_64_U0_ap_continue = 1'b1;

assign axiu2hlsStream_64_U0_ap_start = ap_start;

assign gzipMulticoreStaticCompressStream_0_4_8_U0_ap_continue = 1'b1;

assign gzipMulticoreStaticCompressStream_0_4_8_U0_ap_start = start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_empty_n;

assign hlsStream2axiu_64_32_U0_ap_continue = ap_continue;

assign hlsStream2axiu_64_32_U0_ap_start = start_for_hlsStream2axiu_64_32_U0_empty_n;

assign inStream_TREADY = axiu2hlsStream_64_U0_inStream_TREADY;

assign outStream_TDATA = hlsStream2axiu_64_32_U0_outStream_TDATA;

assign outStream_TKEEP = hlsStream2axiu_64_32_U0_outStream_TKEEP;

assign outStream_TLAST = hlsStream2axiu_64_32_U0_outStream_TLAST;

assign outStream_TSTRB = hlsStream2axiu_64_32_U0_outStream_TSTRB;

assign outStream_TUSER = hlsStream2axiu_64_32_U0_outStream_TUSER;

assign outStream_TVALID = hlsStream2axiu_64_32_U0_outStream_TVALID;

assign start_for_gzipMulticoreStaticCompressStream_0_4_8_U0_din = 1'b1;

assign start_for_hlsStream2axiu_64_32_U0_din = 1'b1;

endmodule //gzipcMulticoreStreaming_gzipMulticoreCompressAxiStream_0_4_8_32_s
