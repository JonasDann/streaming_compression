// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gzipcMulticoreStreaming_multicoreDistributor_Pipeline_ip_terminate_data (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        distStream_6_din,
        distStream_6_num_data_valid,
        distStream_6_fifo_cap,
        distStream_6_full_n,
        distStream_6_write,
        distStream_5_din,
        distStream_5_num_data_valid,
        distStream_5_fifo_cap,
        distStream_5_full_n,
        distStream_5_write,
        distStream_4_din,
        distStream_4_num_data_valid,
        distStream_4_fifo_cap,
        distStream_4_full_n,
        distStream_4_write,
        distStream_3_din,
        distStream_3_num_data_valid,
        distStream_3_fifo_cap,
        distStream_3_full_n,
        distStream_3_write,
        distStream_2_din,
        distStream_2_num_data_valid,
        distStream_2_fifo_cap,
        distStream_2_full_n,
        distStream_2_write,
        distStream_1_din,
        distStream_1_num_data_valid,
        distStream_1_fifo_cap,
        distStream_1_full_n,
        distStream_1_write,
        distStream_0_din,
        distStream_0_num_data_valid,
        distStream_0_fifo_cap,
        distStream_0_full_n,
        distStream_0_write,
        distStream_7_din,
        distStream_7_num_data_valid,
        distStream_7_fifo_cap,
        distStream_7_full_n,
        distStream_7_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [67:0] distStream_6_din;
input  [9:0] distStream_6_num_data_valid;
input  [9:0] distStream_6_fifo_cap;
input   distStream_6_full_n;
output   distStream_6_write;
output  [67:0] distStream_5_din;
input  [9:0] distStream_5_num_data_valid;
input  [9:0] distStream_5_fifo_cap;
input   distStream_5_full_n;
output   distStream_5_write;
output  [67:0] distStream_4_din;
input  [9:0] distStream_4_num_data_valid;
input  [9:0] distStream_4_fifo_cap;
input   distStream_4_full_n;
output   distStream_4_write;
output  [67:0] distStream_3_din;
input  [9:0] distStream_3_num_data_valid;
input  [9:0] distStream_3_fifo_cap;
input   distStream_3_full_n;
output   distStream_3_write;
output  [67:0] distStream_2_din;
input  [9:0] distStream_2_num_data_valid;
input  [9:0] distStream_2_fifo_cap;
input   distStream_2_full_n;
output   distStream_2_write;
output  [67:0] distStream_1_din;
input  [9:0] distStream_1_num_data_valid;
input  [9:0] distStream_1_fifo_cap;
input   distStream_1_full_n;
output   distStream_1_write;
output  [67:0] distStream_0_din;
input  [9:0] distStream_0_num_data_valid;
input  [9:0] distStream_0_fifo_cap;
input   distStream_0_full_n;
output   distStream_0_write;
output  [67:0] distStream_7_din;
input  [9:0] distStream_7_num_data_valid;
input  [9:0] distStream_7_fifo_cap;
input   distStream_7_full_n;
output   distStream_7_write;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg   [2:0] trunc_ln280_reg_175;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln280_fu_144_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    distStream_0_blk_n;
wire    ap_block_pp0_stage0;
reg    distStream_1_blk_n;
reg    distStream_2_blk_n;
reg    distStream_3_blk_n;
reg    distStream_4_blk_n;
reg    distStream_5_blk_n;
reg    distStream_6_blk_n;
reg    distStream_7_blk_n;
wire   [2:0] trunc_ln280_fu_156_p1;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] i_fu_68;
wire   [3:0] add_ln280_fu_150_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
reg    distStream_6_write_local;
reg    distStream_5_write_local;
reg    distStream_4_write_local;
reg    distStream_3_write_local;
reg    distStream_2_write_local;
reg    distStream_1_write_local;
reg    distStream_0_write_local;
reg    distStream_7_write_local;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_fu_68 = 4'd0;
#0 ap_done_reg = 1'b0;
end

gzipcMulticoreStreaming_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln280_fu_144_p2 == 1'd0))) begin
            i_fu_68 <= add_ln280_fu_150_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln280_reg_175 <= trunc_ln280_fu_156_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln280_fu_144_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_68;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_0_blk_n = distStream_0_full_n;
    end else begin
        distStream_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_0_write_local = 1'b1;
    end else begin
        distStream_0_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_1_blk_n = distStream_1_full_n;
    end else begin
        distStream_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_1_write_local = 1'b1;
    end else begin
        distStream_1_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_2_blk_n = distStream_2_full_n;
    end else begin
        distStream_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_2_write_local = 1'b1;
    end else begin
        distStream_2_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_3_blk_n = distStream_3_full_n;
    end else begin
        distStream_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_3_write_local = 1'b1;
    end else begin
        distStream_3_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_4_blk_n = distStream_4_full_n;
    end else begin
        distStream_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_4_write_local = 1'b1;
    end else begin
        distStream_4_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_5_blk_n = distStream_5_full_n;
    end else begin
        distStream_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_5_write_local = 1'b1;
    end else begin
        distStream_5_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_6_blk_n = distStream_6_full_n;
    end else begin
        distStream_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_6_write_local = 1'b1;
    end else begin
        distStream_6_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        distStream_7_blk_n = distStream_7_full_n;
    end else begin
        distStream_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln280_reg_175 == 3'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        distStream_7_write_local = 1'b1;
    end else begin
        distStream_7_write_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln280_fu_150_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((distStream_1_full_n == 1'b0) & (trunc_ln280_reg_175 == 3'd1)) | ((distStream_2_full_n == 1'b0) & (trunc_ln280_reg_175 == 3'd2)) | ((distStream_3_full_n == 1'b0) & (trunc_ln280_reg_175 == 3'd3)) | ((distStream_4_full_n == 1'b0) & (trunc_ln280_reg_175 == 3'd4)) | ((distStream_5_full_n == 1'b0) & (trunc_ln280_reg_175 == 3'd5)) | ((trunc_ln280_reg_175 == 3'd6) & (distStream_6_full_n == 1'b0)) | ((trunc_ln280_reg_175 == 3'd7) & (distStream_7_full_n == 1'b0)) | ((distStream_0_full_n == 1'b0) & (trunc_ln280_reg_175 == 3'd0)));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign distStream_0_din = 68'd0;

assign distStream_0_write = distStream_0_write_local;

assign distStream_1_din = 68'd0;

assign distStream_1_write = distStream_1_write_local;

assign distStream_2_din = 68'd0;

assign distStream_2_write = distStream_2_write_local;

assign distStream_3_din = 68'd0;

assign distStream_3_write = distStream_3_write_local;

assign distStream_4_din = 68'd0;

assign distStream_4_write = distStream_4_write_local;

assign distStream_5_din = 68'd0;

assign distStream_5_write = distStream_5_write_local;

assign distStream_6_din = 68'd0;

assign distStream_6_write = distStream_6_write_local;

assign distStream_7_din = 68'd0;

assign distStream_7_write = distStream_7_write_local;

assign icmp_ln280_fu_144_p2 = ((ap_sig_allocacmp_i_1 == 4'd8) ? 1'b1 : 1'b0);

assign trunc_ln280_fu_156_p1 = ap_sig_allocacmp_i_1[2:0];

endmodule //gzipcMulticoreStreaming_multicoreDistributor_Pipeline_ip_terminate_data
