-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity snappyCompressStream_kStreamRead_8u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inaxistream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inaxistream_TVALID : IN STD_LOGIC;
    inaxistream_TREADY : OUT STD_LOGIC;
    inaxistream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    inaxistream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    inaxistream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    inStream11_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    inStream11_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream11_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    inStream11_full_n : IN STD_LOGIC;
    inStream11_write : OUT STD_LOGIC;
    input_size : IN STD_LOGIC_VECTOR (31 downto 0);
    input_size_ap_vld : IN STD_LOGIC;
    input_size_ap_ack : OUT STD_LOGIC );
end;


architecture behav of snappyCompressStream_kStreamRead_8u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inaxistream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln49_fu_85_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inStream11_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal input_size_blk_n : STD_LOGIC;
    signal input_size_read_reg_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_120 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal i_fu_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_14_fu_90_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_inaxistream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal inaxistream_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal inaxistream_TVALID_int_regslice : STD_LOGIC;
    signal inaxistream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_inaxistream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inaxistream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal inaxistream_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_inaxistream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inaxistream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inaxistream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal inaxistream_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_inaxistream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inaxistream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_inaxistream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal inaxistream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_inaxistream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_inaxistream_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component snappyCompressStream_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_inaxistream_V_data_V_U : component snappyCompressStream_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => inaxistream_TDATA,
        vld_in => inaxistream_TVALID,
        ack_in => regslice_both_inaxistream_V_data_V_U_ack_in,
        data_out => inaxistream_TDATA_int_regslice,
        vld_out => inaxistream_TVALID_int_regslice,
        ack_out => inaxistream_TREADY_int_regslice,
        apdone_blk => regslice_both_inaxistream_V_data_V_U_apdone_blk);

    regslice_both_inaxistream_V_keep_V_U : component snappyCompressStream_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => inaxistream_TKEEP,
        vld_in => inaxistream_TVALID,
        ack_in => regslice_both_inaxistream_V_keep_V_U_ack_in,
        data_out => inaxistream_TKEEP_int_regslice,
        vld_out => regslice_both_inaxistream_V_keep_V_U_vld_out,
        ack_out => inaxistream_TREADY_int_regslice,
        apdone_blk => regslice_both_inaxistream_V_keep_V_U_apdone_blk);

    regslice_both_inaxistream_V_strb_V_U : component snappyCompressStream_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => inaxistream_TSTRB,
        vld_in => inaxistream_TVALID,
        ack_in => regslice_both_inaxistream_V_strb_V_U_ack_in,
        data_out => inaxistream_TSTRB_int_regslice,
        vld_out => regslice_both_inaxistream_V_strb_V_U_vld_out,
        ack_out => inaxistream_TREADY_int_regslice,
        apdone_blk => regslice_both_inaxistream_V_strb_V_U_apdone_blk);

    regslice_both_inaxistream_V_last_V_U : component snappyCompressStream_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => inaxistream_TLAST,
        vld_in => inaxistream_TVALID,
        ack_in => regslice_both_inaxistream_V_last_V_U_ack_in,
        data_out => inaxistream_TLAST_int_regslice,
        vld_out => regslice_both_inaxistream_V_last_V_U_vld_out,
        ack_out => inaxistream_TREADY_int_regslice,
        apdone_blk => regslice_both_inaxistream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (input_size_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (input_size_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (input_size_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_48 <= ap_const_lv32_0;
            elsif (((icmp_ln49_fu_85_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_48 <= i_14_fu_90_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                input_size_read_reg_112 <= input_size;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_85_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_data_V_reg_120 <= inaxistream_TDATA_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, input_size_ap_vld, ap_enable_reg_pp0_iter0, icmp_ln49_fu_85_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (input_size_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln49_fu_85_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln49_fu_85_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, input_size_ap_vld)
    begin
        if (((ap_start = ap_const_logic_0) or (input_size_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(inStream11_full_n, ap_enable_reg_pp0_iter0, icmp_ln49_fu_85_p2, ap_enable_reg_pp0_iter1, inaxistream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (inStream11_full_n = ap_const_logic_0)) or ((icmp_ln49_fu_85_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (inaxistream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(inStream11_full_n, ap_enable_reg_pp0_iter0, icmp_ln49_fu_85_p2, ap_enable_reg_pp0_iter1, inaxistream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (inStream11_full_n = ap_const_logic_0)) or ((icmp_ln49_fu_85_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (inaxistream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(inStream11_full_n, ap_enable_reg_pp0_iter0, icmp_ln49_fu_85_p2, ap_enable_reg_pp0_iter1, inaxistream_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (inStream11_full_n = ap_const_logic_0)) or ((icmp_ln49_fu_85_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (inaxistream_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, input_size_ap_vld)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (input_size_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln49_fu_85_p2, inaxistream_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln49_fu_85_p2 = ap_const_lv1_0) and (inaxistream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(inStream11_full_n)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (inStream11_full_n = ap_const_logic_0);
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln49_fu_85_p2)
    begin
        if ((icmp_ln49_fu_85_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_14_fu_90_p2 <= std_logic_vector(unsigned(i_fu_48) + unsigned(ap_const_lv32_1));
    icmp_ln49_fu_85_p2 <= "1" when (i_fu_48 = input_size_read_reg_112) else "0";

    inStream11_blk_n_assign_proc : process(inStream11_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream11_blk_n <= inStream11_full_n;
        else 
            inStream11_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream11_din <= tmp_data_V_reg_120;

    inStream11_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inStream11_write <= ap_const_logic_1;
        else 
            inStream11_write <= ap_const_logic_0;
        end if; 
    end process;


    inaxistream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln49_fu_85_p2, inaxistream_TVALID_int_regslice)
    begin
        if (((icmp_ln49_fu_85_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inaxistream_TDATA_blk_n <= inaxistream_TVALID_int_regslice;
        else 
            inaxistream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inaxistream_TREADY <= regslice_both_inaxistream_V_data_V_U_ack_in;

    inaxistream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln49_fu_85_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln49_fu_85_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            inaxistream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            inaxistream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    input_size_ap_ack_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_size_ap_vld)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (input_size_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_size_ap_ack <= ap_const_logic_1;
        else 
            input_size_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    input_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, input_size_ap_vld)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_size_blk_n <= input_size_ap_vld;
        else 
            input_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;

end behav;
