-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity snappyCompressStream is
port (
    inaxistream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inaxistream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    inaxistream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    inaxistream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    outaxistream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outaxistream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    outaxistream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    outaxistream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    inputSize : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    inaxistream_TVALID : IN STD_LOGIC;
    inaxistream_TREADY : OUT STD_LOGIC;
    inputSize_ap_vld : IN STD_LOGIC;
    inputSize_ap_ack : OUT STD_LOGIC;
    outaxistream_TVALID : OUT STD_LOGIC;
    outaxistream_TREADY : IN STD_LOGIC );
end;


architecture behav of snappyCompressStream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "snappyCompressStream_snappyCompressStream,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu55c-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=2.665500,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3835,HLS_SYN_LUT=6226,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal kStreamRead_8u_U0_ap_start : STD_LOGIC;
    signal kStreamRead_8u_U0_ap_done : STD_LOGIC;
    signal kStreamRead_8u_U0_ap_continue : STD_LOGIC;
    signal kStreamRead_8u_U0_ap_idle : STD_LOGIC;
    signal kStreamRead_8u_U0_ap_ready : STD_LOGIC;
    signal kStreamRead_8u_U0_inaxistream_TREADY : STD_LOGIC;
    signal kStreamRead_8u_U0_inStream11_din : STD_LOGIC_VECTOR (7 downto 0);
    signal kStreamRead_8u_U0_inStream11_write : STD_LOGIC;
    signal kStreamRead_8u_U0_input_size_ap_ack : STD_LOGIC;
    signal lzCompress_6_4_65536_6_1_4096_64_U0_ap_start : STD_LOGIC;
    signal lzCompress_6_4_65536_6_1_4096_64_U0_ap_done : STD_LOGIC;
    signal lzCompress_6_4_65536_6_1_4096_64_U0_ap_continue : STD_LOGIC;
    signal lzCompress_6_4_65536_6_1_4096_64_U0_ap_idle : STD_LOGIC;
    signal lzCompress_6_4_65536_6_1_4096_64_U0_ap_ready : STD_LOGIC;
    signal lzCompress_6_4_65536_6_1_4096_64_U0_inStream11_read : STD_LOGIC;
    signal lzCompress_6_4_65536_6_1_4096_64_U0_compressdStream7_din : STD_LOGIC_VECTOR (31 downto 0);
    signal lzCompress_6_4_65536_6_1_4096_64_U0_compressdStream7_write : STD_LOGIC;
    signal lzCompress_6_4_65536_6_1_4096_64_U0_input_size_ap_ack : STD_LOGIC;
    signal lzBestMatchFilter_6_65536_U0_ap_start : STD_LOGIC;
    signal lzBestMatchFilter_6_65536_U0_ap_done : STD_LOGIC;
    signal lzBestMatchFilter_6_65536_U0_ap_continue : STD_LOGIC;
    signal lzBestMatchFilter_6_65536_U0_ap_idle : STD_LOGIC;
    signal lzBestMatchFilter_6_65536_U0_ap_ready : STD_LOGIC;
    signal lzBestMatchFilter_6_65536_U0_compressdStream7_read : STD_LOGIC;
    signal lzBestMatchFilter_6_65536_U0_bestMatchStream8_din : STD_LOGIC_VECTOR (31 downto 0);
    signal lzBestMatchFilter_6_65536_U0_bestMatchStream8_write : STD_LOGIC;
    signal lzBestMatchFilter_6_65536_U0_input_size_ap_ack : STD_LOGIC;
    signal lzBooster_64_16384_64_U0_ap_start : STD_LOGIC;
    signal lzBooster_64_16384_64_U0_ap_done : STD_LOGIC;
    signal lzBooster_64_16384_64_U0_ap_continue : STD_LOGIC;
    signal lzBooster_64_16384_64_U0_ap_idle : STD_LOGIC;
    signal lzBooster_64_16384_64_U0_ap_ready : STD_LOGIC;
    signal lzBooster_64_16384_64_U0_bestMatchStream8_read : STD_LOGIC;
    signal lzBooster_64_16384_64_U0_boosterStream9_din : STD_LOGIC_VECTOR (31 downto 0);
    signal lzBooster_64_16384_64_U0_boosterStream9_write : STD_LOGIC;
    signal lzBooster_64_16384_64_U0_input_size_ap_ack : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_ap_start : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_start_out : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_start_write : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_boosterStream9_read : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_outStream12_din : STD_LOGIC_VECTOR (7 downto 0);
    signal snappyCompress_60_64_8_U0_outStream12_write : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_snappyOutEos13_din : STD_LOGIC_VECTOR (0 downto 0);
    signal snappyCompress_60_64_8_U0_snappyOutEos13_write : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_compressedSize10_din : STD_LOGIC_VECTOR (31 downto 0);
    signal snappyCompress_60_64_8_U0_compressedSize10_write : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_input_size_ap_ack : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_ap_done : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_ap_ready : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_ap_idle : STD_LOGIC;
    signal snappyCompress_60_64_8_U0_ap_continue : STD_LOGIC;
    signal kStreamWrite_8u_U0_ap_start : STD_LOGIC;
    signal kStreamWrite_8u_U0_ap_done : STD_LOGIC;
    signal kStreamWrite_8u_U0_ap_continue : STD_LOGIC;
    signal kStreamWrite_8u_U0_ap_idle : STD_LOGIC;
    signal kStreamWrite_8u_U0_ap_ready : STD_LOGIC;
    signal kStreamWrite_8u_U0_outaxistream_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal kStreamWrite_8u_U0_outaxistream_TVALID : STD_LOGIC;
    signal kStreamWrite_8u_U0_outaxistream_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal kStreamWrite_8u_U0_outaxistream_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal kStreamWrite_8u_U0_outaxistream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal kStreamWrite_8u_U0_outStream12_read : STD_LOGIC;
    signal kStreamWrite_8u_U0_snappyOutEos13_read : STD_LOGIC;
    signal kStreamWrite_8u_U0_compressedSize10_read : STD_LOGIC;
    signal inStream_full_n : STD_LOGIC;
    signal inStream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal inStream_empty_n : STD_LOGIC;
    signal compressdStream_full_n : STD_LOGIC;
    signal compressdStream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal compressdStream_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal compressdStream_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal compressdStream_empty_n : STD_LOGIC;
    signal bestMatchStream_full_n : STD_LOGIC;
    signal bestMatchStream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal bestMatchStream_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal bestMatchStream_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal bestMatchStream_empty_n : STD_LOGIC;
    signal boosterStream_full_n : STD_LOGIC;
    signal boosterStream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal boosterStream_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal boosterStream_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal boosterStream_empty_n : STD_LOGIC;
    signal outStream_full_n : STD_LOGIC;
    signal outStream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal outStream_empty_n : STD_LOGIC;
    signal snappyOutEos_full_n : STD_LOGIC;
    signal snappyOutEos_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal snappyOutEos_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal snappyOutEos_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal snappyOutEos_empty_n : STD_LOGIC;
    signal compressedSize_full_n : STD_LOGIC;
    signal compressedSize_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal compressedSize_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal compressedSize_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal compressedSize_empty_n : STD_LOGIC;
    signal start_for_kStreamWrite_8u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_kStreamWrite_8u_U0_full_n : STD_LOGIC;
    signal start_for_kStreamWrite_8u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_kStreamWrite_8u_U0_empty_n : STD_LOGIC;

    component snappyCompressStream_kStreamRead_8u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inaxistream_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        inaxistream_TVALID : IN STD_LOGIC;
        inaxistream_TREADY : OUT STD_LOGIC;
        inaxistream_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
        inaxistream_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        inaxistream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        inStream11_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        inStream11_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream11_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream11_full_n : IN STD_LOGIC;
        inStream11_write : OUT STD_LOGIC;
        input_size : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size_ap_vld : IN STD_LOGIC;
        input_size_ap_ack : OUT STD_LOGIC );
    end component;


    component snappyCompressStream_lzCompress_6_4_65536_6_1_4096_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream11_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        inStream11_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream11_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        inStream11_empty_n : IN STD_LOGIC;
        inStream11_read : OUT STD_LOGIC;
        compressdStream7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        compressdStream7_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        compressdStream7_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        compressdStream7_full_n : IN STD_LOGIC;
        compressdStream7_write : OUT STD_LOGIC;
        input_size : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size_ap_vld : IN STD_LOGIC;
        input_size_ap_ack : OUT STD_LOGIC );
    end component;


    component snappyCompressStream_lzBestMatchFilter_6_65536_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        compressdStream7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        compressdStream7_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        compressdStream7_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        compressdStream7_empty_n : IN STD_LOGIC;
        compressdStream7_read : OUT STD_LOGIC;
        bestMatchStream8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        bestMatchStream8_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        bestMatchStream8_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        bestMatchStream8_full_n : IN STD_LOGIC;
        bestMatchStream8_write : OUT STD_LOGIC;
        input_size : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size_ap_vld : IN STD_LOGIC;
        input_size_ap_ack : OUT STD_LOGIC );
    end component;


    component snappyCompressStream_lzBooster_64_16384_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bestMatchStream8_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        bestMatchStream8_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        bestMatchStream8_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        bestMatchStream8_empty_n : IN STD_LOGIC;
        bestMatchStream8_read : OUT STD_LOGIC;
        boosterStream9_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        boosterStream9_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        boosterStream9_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        boosterStream9_full_n : IN STD_LOGIC;
        boosterStream9_write : OUT STD_LOGIC;
        input_size : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size_ap_vld : IN STD_LOGIC;
        input_size_ap_ack : OUT STD_LOGIC );
    end component;


    component snappyCompressStream_snappyCompress_60_64_8_s IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        boosterStream9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        boosterStream9_empty_n : IN STD_LOGIC;
        boosterStream9_read : OUT STD_LOGIC;
        outStream12_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        outStream12_full_n : IN STD_LOGIC;
        outStream12_write : OUT STD_LOGIC;
        input_size : IN STD_LOGIC_VECTOR (31 downto 0);
        snappyOutEos13_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        snappyOutEos13_full_n : IN STD_LOGIC;
        snappyOutEos13_write : OUT STD_LOGIC;
        compressedSize10_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        compressedSize10_full_n : IN STD_LOGIC;
        compressedSize10_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        input_size_ap_vld : IN STD_LOGIC;
        input_size_ap_ack : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component snappyCompressStream_kStreamWrite_8u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outaxistream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        outaxistream_TVALID : OUT STD_LOGIC;
        outaxistream_TREADY : IN STD_LOGIC;
        outaxistream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        outaxistream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        outaxistream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        outStream12_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        outStream12_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream12_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream12_empty_n : IN STD_LOGIC;
        outStream12_read : OUT STD_LOGIC;
        snappyOutEos13_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        snappyOutEos13_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        snappyOutEos13_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        snappyOutEos13_empty_n : IN STD_LOGIC;
        snappyOutEos13_read : OUT STD_LOGIC;
        compressedSize10_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        compressedSize10_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        compressedSize10_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        compressedSize10_empty_n : IN STD_LOGIC;
        compressedSize10_read : OUT STD_LOGIC );
    end component;


    component snappyCompressStream_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component snappyCompressStream_fifo_w32_d8_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component snappyCompressStream_fifo_w1_d8_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component snappyCompressStream_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component snappyCompressStream_start_for_kStreamWrite_8u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    kStreamRead_8u_U0 : component snappyCompressStream_kStreamRead_8u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => kStreamRead_8u_U0_ap_start,
        ap_done => kStreamRead_8u_U0_ap_done,
        ap_continue => kStreamRead_8u_U0_ap_continue,
        ap_idle => kStreamRead_8u_U0_ap_idle,
        ap_ready => kStreamRead_8u_U0_ap_ready,
        inaxistream_TDATA => inaxistream_TDATA,
        inaxistream_TVALID => inaxistream_TVALID,
        inaxistream_TREADY => kStreamRead_8u_U0_inaxistream_TREADY,
        inaxistream_TKEEP => inaxistream_TKEEP,
        inaxistream_TSTRB => inaxistream_TSTRB,
        inaxistream_TLAST => inaxistream_TLAST,
        inStream11_din => kStreamRead_8u_U0_inStream11_din,
        inStream11_num_data_valid => inStream_num_data_valid,
        inStream11_fifo_cap => inStream_fifo_cap,
        inStream11_full_n => inStream_full_n,
        inStream11_write => kStreamRead_8u_U0_inStream11_write,
        input_size => inputSize,
        input_size_ap_vld => inputSize_ap_vld,
        input_size_ap_ack => kStreamRead_8u_U0_input_size_ap_ack);

    lzCompress_6_4_65536_6_1_4096_64_U0 : component snappyCompressStream_lzCompress_6_4_65536_6_1_4096_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => lzCompress_6_4_65536_6_1_4096_64_U0_ap_start,
        ap_done => lzCompress_6_4_65536_6_1_4096_64_U0_ap_done,
        ap_continue => lzCompress_6_4_65536_6_1_4096_64_U0_ap_continue,
        ap_idle => lzCompress_6_4_65536_6_1_4096_64_U0_ap_idle,
        ap_ready => lzCompress_6_4_65536_6_1_4096_64_U0_ap_ready,
        inStream11_dout => inStream_dout,
        inStream11_num_data_valid => inStream_num_data_valid,
        inStream11_fifo_cap => inStream_fifo_cap,
        inStream11_empty_n => inStream_empty_n,
        inStream11_read => lzCompress_6_4_65536_6_1_4096_64_U0_inStream11_read,
        compressdStream7_din => lzCompress_6_4_65536_6_1_4096_64_U0_compressdStream7_din,
        compressdStream7_num_data_valid => compressdStream_num_data_valid,
        compressdStream7_fifo_cap => compressdStream_fifo_cap,
        compressdStream7_full_n => compressdStream_full_n,
        compressdStream7_write => lzCompress_6_4_65536_6_1_4096_64_U0_compressdStream7_write,
        input_size => inputSize,
        input_size_ap_vld => inputSize_ap_vld,
        input_size_ap_ack => lzCompress_6_4_65536_6_1_4096_64_U0_input_size_ap_ack);

    lzBestMatchFilter_6_65536_U0 : component snappyCompressStream_lzBestMatchFilter_6_65536_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => lzBestMatchFilter_6_65536_U0_ap_start,
        ap_done => lzBestMatchFilter_6_65536_U0_ap_done,
        ap_continue => lzBestMatchFilter_6_65536_U0_ap_continue,
        ap_idle => lzBestMatchFilter_6_65536_U0_ap_idle,
        ap_ready => lzBestMatchFilter_6_65536_U0_ap_ready,
        compressdStream7_dout => compressdStream_dout,
        compressdStream7_num_data_valid => compressdStream_num_data_valid,
        compressdStream7_fifo_cap => compressdStream_fifo_cap,
        compressdStream7_empty_n => compressdStream_empty_n,
        compressdStream7_read => lzBestMatchFilter_6_65536_U0_compressdStream7_read,
        bestMatchStream8_din => lzBestMatchFilter_6_65536_U0_bestMatchStream8_din,
        bestMatchStream8_num_data_valid => bestMatchStream_num_data_valid,
        bestMatchStream8_fifo_cap => bestMatchStream_fifo_cap,
        bestMatchStream8_full_n => bestMatchStream_full_n,
        bestMatchStream8_write => lzBestMatchFilter_6_65536_U0_bestMatchStream8_write,
        input_size => inputSize,
        input_size_ap_vld => inputSize_ap_vld,
        input_size_ap_ack => lzBestMatchFilter_6_65536_U0_input_size_ap_ack);

    lzBooster_64_16384_64_U0 : component snappyCompressStream_lzBooster_64_16384_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => lzBooster_64_16384_64_U0_ap_start,
        ap_done => lzBooster_64_16384_64_U0_ap_done,
        ap_continue => lzBooster_64_16384_64_U0_ap_continue,
        ap_idle => lzBooster_64_16384_64_U0_ap_idle,
        ap_ready => lzBooster_64_16384_64_U0_ap_ready,
        bestMatchStream8_dout => bestMatchStream_dout,
        bestMatchStream8_num_data_valid => bestMatchStream_num_data_valid,
        bestMatchStream8_fifo_cap => bestMatchStream_fifo_cap,
        bestMatchStream8_empty_n => bestMatchStream_empty_n,
        bestMatchStream8_read => lzBooster_64_16384_64_U0_bestMatchStream8_read,
        boosterStream9_din => lzBooster_64_16384_64_U0_boosterStream9_din,
        boosterStream9_num_data_valid => boosterStream_num_data_valid,
        boosterStream9_fifo_cap => boosterStream_fifo_cap,
        boosterStream9_full_n => boosterStream_full_n,
        boosterStream9_write => lzBooster_64_16384_64_U0_boosterStream9_write,
        input_size => inputSize,
        input_size_ap_vld => inputSize_ap_vld,
        input_size_ap_ack => lzBooster_64_16384_64_U0_input_size_ap_ack);

    snappyCompress_60_64_8_U0 : component snappyCompressStream_snappyCompress_60_64_8_s
    port map (
        ap_start => snappyCompress_60_64_8_U0_ap_start,
        start_full_n => start_for_kStreamWrite_8u_U0_full_n,
        start_out => snappyCompress_60_64_8_U0_start_out,
        start_write => snappyCompress_60_64_8_U0_start_write,
        boosterStream9_dout => boosterStream_dout,
        boosterStream9_empty_n => boosterStream_empty_n,
        boosterStream9_read => snappyCompress_60_64_8_U0_boosterStream9_read,
        outStream12_din => snappyCompress_60_64_8_U0_outStream12_din,
        outStream12_full_n => outStream_full_n,
        outStream12_write => snappyCompress_60_64_8_U0_outStream12_write,
        input_size => inputSize,
        snappyOutEos13_din => snappyCompress_60_64_8_U0_snappyOutEos13_din,
        snappyOutEos13_full_n => snappyOutEos_full_n,
        snappyOutEos13_write => snappyCompress_60_64_8_U0_snappyOutEos13_write,
        compressedSize10_din => snappyCompress_60_64_8_U0_compressedSize10_din,
        compressedSize10_full_n => compressedSize_full_n,
        compressedSize10_write => snappyCompress_60_64_8_U0_compressedSize10_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        input_size_ap_vld => inputSize_ap_vld,
        input_size_ap_ack => snappyCompress_60_64_8_U0_input_size_ap_ack,
        ap_done => snappyCompress_60_64_8_U0_ap_done,
        ap_ready => snappyCompress_60_64_8_U0_ap_ready,
        ap_idle => snappyCompress_60_64_8_U0_ap_idle,
        ap_continue => snappyCompress_60_64_8_U0_ap_continue);

    kStreamWrite_8u_U0 : component snappyCompressStream_kStreamWrite_8u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => kStreamWrite_8u_U0_ap_start,
        ap_done => kStreamWrite_8u_U0_ap_done,
        ap_continue => kStreamWrite_8u_U0_ap_continue,
        ap_idle => kStreamWrite_8u_U0_ap_idle,
        ap_ready => kStreamWrite_8u_U0_ap_ready,
        outaxistream_TDATA => kStreamWrite_8u_U0_outaxistream_TDATA,
        outaxistream_TVALID => kStreamWrite_8u_U0_outaxistream_TVALID,
        outaxistream_TREADY => outaxistream_TREADY,
        outaxistream_TKEEP => kStreamWrite_8u_U0_outaxistream_TKEEP,
        outaxistream_TSTRB => kStreamWrite_8u_U0_outaxistream_TSTRB,
        outaxistream_TLAST => kStreamWrite_8u_U0_outaxistream_TLAST,
        outStream12_dout => outStream_dout,
        outStream12_num_data_valid => outStream_num_data_valid,
        outStream12_fifo_cap => outStream_fifo_cap,
        outStream12_empty_n => outStream_empty_n,
        outStream12_read => kStreamWrite_8u_U0_outStream12_read,
        snappyOutEos13_dout => snappyOutEos_dout,
        snappyOutEos13_num_data_valid => snappyOutEos_num_data_valid,
        snappyOutEos13_fifo_cap => snappyOutEos_fifo_cap,
        snappyOutEos13_empty_n => snappyOutEos_empty_n,
        snappyOutEos13_read => kStreamWrite_8u_U0_snappyOutEos13_read,
        compressedSize10_dout => compressedSize_dout,
        compressedSize10_num_data_valid => compressedSize_num_data_valid,
        compressedSize10_fifo_cap => compressedSize_fifo_cap,
        compressedSize10_empty_n => compressedSize_empty_n,
        compressedSize10_read => kStreamWrite_8u_U0_compressedSize10_read);

    inStream_U : component snappyCompressStream_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => kStreamRead_8u_U0_inStream11_din,
        if_full_n => inStream_full_n,
        if_write => kStreamRead_8u_U0_inStream11_write,
        if_dout => inStream_dout,
        if_num_data_valid => inStream_num_data_valid,
        if_fifo_cap => inStream_fifo_cap,
        if_empty_n => inStream_empty_n,
        if_read => lzCompress_6_4_65536_6_1_4096_64_U0_inStream11_read);

    compressdStream_U : component snappyCompressStream_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzCompress_6_4_65536_6_1_4096_64_U0_compressdStream7_din,
        if_full_n => compressdStream_full_n,
        if_write => lzCompress_6_4_65536_6_1_4096_64_U0_compressdStream7_write,
        if_dout => compressdStream_dout,
        if_num_data_valid => compressdStream_num_data_valid,
        if_fifo_cap => compressdStream_fifo_cap,
        if_empty_n => compressdStream_empty_n,
        if_read => lzBestMatchFilter_6_65536_U0_compressdStream7_read);

    bestMatchStream_U : component snappyCompressStream_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzBestMatchFilter_6_65536_U0_bestMatchStream8_din,
        if_full_n => bestMatchStream_full_n,
        if_write => lzBestMatchFilter_6_65536_U0_bestMatchStream8_write,
        if_dout => bestMatchStream_dout,
        if_num_data_valid => bestMatchStream_num_data_valid,
        if_fifo_cap => bestMatchStream_fifo_cap,
        if_empty_n => bestMatchStream_empty_n,
        if_read => lzBooster_64_16384_64_U0_bestMatchStream8_read);

    boosterStream_U : component snappyCompressStream_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzBooster_64_16384_64_U0_boosterStream9_din,
        if_full_n => boosterStream_full_n,
        if_write => lzBooster_64_16384_64_U0_boosterStream9_write,
        if_dout => boosterStream_dout,
        if_num_data_valid => boosterStream_num_data_valid,
        if_fifo_cap => boosterStream_fifo_cap,
        if_empty_n => boosterStream_empty_n,
        if_read => snappyCompress_60_64_8_U0_boosterStream9_read);

    outStream_U : component snappyCompressStream_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => snappyCompress_60_64_8_U0_outStream12_din,
        if_full_n => outStream_full_n,
        if_write => snappyCompress_60_64_8_U0_outStream12_write,
        if_dout => outStream_dout,
        if_num_data_valid => outStream_num_data_valid,
        if_fifo_cap => outStream_fifo_cap,
        if_empty_n => outStream_empty_n,
        if_read => kStreamWrite_8u_U0_outStream12_read);

    snappyOutEos_U : component snappyCompressStream_fifo_w1_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => snappyCompress_60_64_8_U0_snappyOutEos13_din,
        if_full_n => snappyOutEos_full_n,
        if_write => snappyCompress_60_64_8_U0_snappyOutEos13_write,
        if_dout => snappyOutEos_dout,
        if_num_data_valid => snappyOutEos_num_data_valid,
        if_fifo_cap => snappyOutEos_fifo_cap,
        if_empty_n => snappyOutEos_empty_n,
        if_read => kStreamWrite_8u_U0_snappyOutEos13_read);

    compressedSize_U : component snappyCompressStream_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => snappyCompress_60_64_8_U0_compressedSize10_din,
        if_full_n => compressedSize_full_n,
        if_write => snappyCompress_60_64_8_U0_compressedSize10_write,
        if_dout => compressedSize_dout,
        if_num_data_valid => compressedSize_num_data_valid,
        if_fifo_cap => compressedSize_fifo_cap,
        if_empty_n => compressedSize_empty_n,
        if_read => kStreamWrite_8u_U0_compressedSize10_read);

    start_for_kStreamWrite_8u_U0_U : component snappyCompressStream_start_for_kStreamWrite_8u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_kStreamWrite_8u_U0_din,
        if_full_n => start_for_kStreamWrite_8u_U0_full_n,
        if_write => snappyCompress_60_64_8_U0_start_write,
        if_dout => start_for_kStreamWrite_8u_U0_dout,
        if_empty_n => start_for_kStreamWrite_8u_U0_empty_n,
        if_read => kStreamWrite_8u_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    inaxistream_TREADY <= kStreamRead_8u_U0_inaxistream_TREADY;
    inputSize_ap_ack <= snappyCompress_60_64_8_U0_input_size_ap_ack;
    kStreamRead_8u_U0_ap_continue <= ap_const_logic_1;
    kStreamRead_8u_U0_ap_start <= ap_const_logic_1;
    kStreamWrite_8u_U0_ap_continue <= ap_const_logic_1;
    kStreamWrite_8u_U0_ap_start <= start_for_kStreamWrite_8u_U0_empty_n;
    lzBestMatchFilter_6_65536_U0_ap_continue <= ap_const_logic_1;
    lzBestMatchFilter_6_65536_U0_ap_start <= ap_const_logic_1;
    lzBooster_64_16384_64_U0_ap_continue <= ap_const_logic_1;
    lzBooster_64_16384_64_U0_ap_start <= ap_const_logic_1;
    lzCompress_6_4_65536_6_1_4096_64_U0_ap_continue <= ap_const_logic_1;
    lzCompress_6_4_65536_6_1_4096_64_U0_ap_start <= ap_const_logic_1;
    outaxistream_TDATA <= kStreamWrite_8u_U0_outaxistream_TDATA;
    outaxistream_TKEEP <= kStreamWrite_8u_U0_outaxistream_TKEEP;
    outaxistream_TLAST <= kStreamWrite_8u_U0_outaxistream_TLAST;
    outaxistream_TSTRB <= kStreamWrite_8u_U0_outaxistream_TSTRB;
    outaxistream_TVALID <= kStreamWrite_8u_U0_outaxistream_TVALID;
    snappyCompress_60_64_8_U0_ap_continue <= ap_const_logic_1;
    snappyCompress_60_64_8_U0_ap_start <= ap_const_logic_1;
    start_for_kStreamWrite_8u_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
