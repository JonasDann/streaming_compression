-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity snappyCompressStream_snappyCompressPart1_60_64_8_Pipeline_snappy_divide is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    boosterStream9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    boosterStream9_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    boosterStream9_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    boosterStream9_empty_n : IN STD_LOGIC;
    boosterStream9_read : OUT STD_LOGIC;
    lenOffset_Stream3_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    lenOffset_Stream3_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    lenOffset_Stream3_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    lenOffset_Stream3_full_n : IN STD_LOGIC;
    lenOffset_Stream3_write : OUT STD_LOGIC;
    lit_outStream2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    lit_outStream2_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    lit_outStream2_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    lit_outStream2_full_n : IN STD_LOGIC;
    lit_outStream2_write : OUT STD_LOGIC;
    tmp_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_size : IN STD_LOGIC_VECTOR (31 downto 0);
    sub : IN STD_LOGIC_VECTOR (31 downto 0);
    lit_count_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    lit_count_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of snappyCompressStream_snappyCompressPart1_60_64_8_Pipeline_snappy_divide is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_3C00000000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000011110000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln64_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op29_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln73_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_351 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op59_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal lenOffset_Stream3_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal boosterStream9_blk_n : STD_LOGIC;
    signal lit_outStream2_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tCh_fu_168_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tCh_reg_327 : STD_LOGIC_VECTOR (7 downto 0);
    signal match_len_1_fu_172_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal match_len_1_reg_332 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln392_fu_192_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln392_reg_337 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln73_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lit_count_1_load_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln86_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lit_count_1_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal lit_count_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_i_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_82 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_272_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tOffset_fu_182_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal match_len_fu_207_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln81_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln388_fu_269_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_293 : BOOLEAN;
    signal ap_condition_296 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component snappyCompressStream_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component snappyCompressStream_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_78 <= ap_const_lv32_0;
                elsif (((icmp_ln64_fu_153_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_78 <= i_5_fu_258_p2;
                elsif ((ap_const_boolean_1 = ap_condition_293)) then 
                    i_fu_78 <= i_2_fu_217_p2;
                end if;
            end if; 
        end if;
    end process;

    lit_count_1_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_fu_153_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln86_fu_239_p2 = ap_const_lv1_0) and (icmp_ln73_fu_198_p2 = ap_const_lv1_1))) then 
                lit_count_1_fu_74 <= lit_count_fu_233_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_fu_153_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln86_fu_239_p2 = ap_const_lv1_1) and (icmp_ln73_fu_198_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_fu_153_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_fu_198_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1)))) then 
                lit_count_1_fu_74 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_82 <= tmp_12;
                elsif ((ap_const_boolean_1 = ap_condition_296)) then 
                    p_Val2_s_fu_82 <= boosterStream9_dout;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln392_reg_337 <= add_ln392_fu_192_p2;
                icmp_ln73_reg_342 <= icmp_ln73_fu_198_p2;
                lit_count_1_load_reg_346 <= lit_count_1_fu_74;
                match_len_1_reg_332 <= p_Val2_s_fu_82(15 downto 8);
                tCh_reg_327 <= tCh_fu_168_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_fu_153_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_fu_198_p2 = ap_const_lv1_1))) then
                icmp_ln86_reg_351 <= icmp_ln86_fu_239_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln392_fu_192_p2 <= std_logic_vector(unsigned(tOffset_fu_182_p4) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, boosterStream9_empty_n, ap_predicate_op29_read_state2, lenOffset_Stream3_full_n, icmp_ln73_reg_342, lit_outStream2_full_n, ap_predicate_op59_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_predicate_op59_write_state3 = ap_const_boolean_1) and (lenOffset_Stream3_full_n = ap_const_logic_0)) or ((lit_outStream2_full_n = ap_const_logic_0) and (icmp_ln73_reg_342 = ap_const_lv1_1)) or ((icmp_ln73_reg_342 = ap_const_lv1_0) and (lenOffset_Stream3_full_n = ap_const_logic_0)))) or ((ap_predicate_op29_read_state2 = ap_const_boolean_1) and (boosterStream9_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, boosterStream9_empty_n, ap_predicate_op29_read_state2, lenOffset_Stream3_full_n, icmp_ln73_reg_342, lit_outStream2_full_n, ap_predicate_op59_write_state3)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_predicate_op59_write_state3 = ap_const_boolean_1) and (lenOffset_Stream3_full_n = ap_const_logic_0)) or ((lit_outStream2_full_n = ap_const_logic_0) and (icmp_ln73_reg_342 = ap_const_lv1_1)) or ((icmp_ln73_reg_342 = ap_const_lv1_0) and (lenOffset_Stream3_full_n = ap_const_logic_0)))) or ((ap_predicate_op29_read_state2 = ap_const_boolean_1) and (boosterStream9_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, boosterStream9_empty_n, ap_predicate_op29_read_state2, lenOffset_Stream3_full_n, icmp_ln73_reg_342, lit_outStream2_full_n, ap_predicate_op59_write_state3)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_predicate_op59_write_state3 = ap_const_boolean_1) and (lenOffset_Stream3_full_n = ap_const_logic_0)) or ((lit_outStream2_full_n = ap_const_logic_0) and (icmp_ln73_reg_342 = ap_const_lv1_1)) or ((icmp_ln73_reg_342 = ap_const_lv1_0) and (lenOffset_Stream3_full_n = ap_const_logic_0)))) or ((ap_predicate_op29_read_state2 = ap_const_boolean_1) and (boosterStream9_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(boosterStream9_empty_n, ap_predicate_op29_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op29_read_state2 = ap_const_boolean_1) and (boosterStream9_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(lenOffset_Stream3_full_n, icmp_ln73_reg_342, lit_outStream2_full_n, ap_predicate_op59_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (((ap_predicate_op59_write_state3 = ap_const_boolean_1) and (lenOffset_Stream3_full_n = ap_const_logic_0)) or ((lit_outStream2_full_n = ap_const_logic_0) and (icmp_ln73_reg_342 = ap_const_lv1_1)) or ((icmp_ln73_reg_342 = ap_const_lv1_0) and (lenOffset_Stream3_full_n = ap_const_logic_0)));
    end process;


    ap_condition_293_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln64_fu_153_p2, icmp_ln73_fu_198_p2)
    begin
                ap_condition_293 <= ((icmp_ln64_fu_153_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln73_fu_198_p2 = ap_const_lv1_0));
    end process;


    ap_condition_296_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln64_fu_153_p2, icmp_ln67_fu_158_p2)
    begin
                ap_condition_296 <= ((icmp_ln67_fu_158_p2 = ap_const_lv1_1) and (icmp_ln64_fu_153_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln64_fu_153_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln64_fu_153_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op29_read_state2_assign_proc : process(icmp_ln64_fu_153_p2, icmp_ln67_fu_158_p2)
    begin
                ap_predicate_op29_read_state2 <= ((icmp_ln67_fu_158_p2 = ap_const_lv1_1) and (icmp_ln64_fu_153_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op59_write_state3_assign_proc : process(icmp_ln73_reg_342, icmp_ln86_reg_351)
    begin
                ap_predicate_op59_write_state3 <= ((icmp_ln86_reg_351 = ap_const_lv1_1) and (icmp_ln73_reg_342 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln64_fu_153_p2, ap_block_pp0_stage0, icmp_ln73_fu_198_p2, i_fu_78, i_2_fu_217_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln64_fu_153_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln73_fu_198_p2 = ap_const_lv1_0))) then 
            ap_sig_allocacmp_i_4 <= i_2_fu_217_p2;
        else 
            ap_sig_allocacmp_i_4 <= i_fu_78;
        end if; 
    end process;


    boosterStream9_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, boosterStream9_empty_n, ap_predicate_op29_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op29_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            boosterStream9_blk_n <= boosterStream9_empty_n;
        else 
            boosterStream9_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    boosterStream9_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op29_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op29_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            boosterStream9_read <= ap_const_logic_1;
        else 
            boosterStream9_read <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_217_p2 <= std_logic_vector(unsigned(i_fu_78) + unsigned(zext_ln81_fu_213_p1));
    i_5_fu_258_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_4) + unsigned(ap_const_lv32_1));
    icmp_ln64_fu_153_p2 <= "1" when (unsigned(i_fu_78) < unsigned(input_size)) else "0";
    icmp_ln67_fu_158_p2 <= "1" when (unsigned(i_fu_78) < unsigned(sub)) else "0";
    icmp_ln73_fu_198_p2 <= "1" when (match_len_1_fu_172_p4 = ap_const_lv8_0) else "0";
    icmp_ln86_fu_239_p2 <= "1" when (lit_count_fu_233_p2 = ap_const_lv32_3C) else "0";

    lenOffset_Stream3_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, lenOffset_Stream3_full_n, icmp_ln73_reg_342, ap_predicate_op59_write_state3, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op59_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln73_reg_342 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            lenOffset_Stream3_blk_n <= lenOffset_Stream3_full_n;
        else 
            lenOffset_Stream3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    lenOffset_Stream3_din_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln73_reg_342, ap_predicate_op59_write_state3, p_Result_s_fu_272_p4, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            if ((ap_predicate_op59_write_state3 = ap_const_boolean_1)) then 
                lenOffset_Stream3_din <= ap_const_lv64_3C00000000;
            elsif ((icmp_ln73_reg_342 = ap_const_lv1_0)) then 
                lenOffset_Stream3_din <= p_Result_s_fu_272_p4;
            else 
                lenOffset_Stream3_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            lenOffset_Stream3_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    lenOffset_Stream3_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln73_reg_342, ap_predicate_op59_write_state3, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op59_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln73_reg_342 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            lenOffset_Stream3_write <= ap_const_logic_1;
        else 
            lenOffset_Stream3_write <= ap_const_logic_0;
        end if; 
    end process;

    lit_count_1_out <= lit_count_1_fu_74;

    lit_count_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln64_fu_153_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_fu_153_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lit_count_1_out_ap_vld <= ap_const_logic_1;
        else 
            lit_count_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lit_count_fu_233_p2 <= std_logic_vector(unsigned(lit_count_1_fu_74) + unsigned(ap_const_lv32_1));

    lit_outStream2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln73_reg_342, lit_outStream2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln73_reg_342 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lit_outStream2_blk_n <= lit_outStream2_full_n;
        else 
            lit_outStream2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    lit_outStream2_din <= tCh_reg_327;

    lit_outStream2_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln73_reg_342, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln73_reg_342 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lit_outStream2_write <= ap_const_logic_1;
        else 
            lit_outStream2_write <= ap_const_logic_0;
        end if; 
    end process;

    match_len_1_fu_172_p4 <= p_Val2_s_fu_82(15 downto 8);
    match_len_fu_207_p2 <= std_logic_vector(unsigned(match_len_1_fu_172_p4) + unsigned(ap_const_lv8_FF));
    p_Result_s_fu_272_p4 <= ((lit_count_1_load_reg_346 & add_ln392_reg_337) & zext_ln388_fu_269_p1);
    tCh_fu_168_p1 <= p_Val2_s_fu_82(8 - 1 downto 0);
    tOffset_fu_182_p4 <= p_Val2_s_fu_82(31 downto 16);
    zext_ln388_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(match_len_1_reg_332),16));
    zext_ln81_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(match_len_fu_207_p2),32));
end behav;
