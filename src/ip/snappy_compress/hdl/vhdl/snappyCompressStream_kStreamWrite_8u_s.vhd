-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity snappyCompressStream_kStreamWrite_8u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outaxistream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outaxistream_TVALID : OUT STD_LOGIC;
    outaxistream_TREADY : IN STD_LOGIC;
    outaxistream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    outaxistream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    outaxistream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outStream12_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    outStream12_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    outStream12_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    outStream12_empty_n : IN STD_LOGIC;
    outStream12_read : OUT STD_LOGIC;
    snappyOutEos13_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    snappyOutEos13_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    snappyOutEos13_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    snappyOutEos13_empty_n : IN STD_LOGIC;
    snappyOutEos13_read : OUT STD_LOGIC;
    compressedSize10_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    compressedSize10_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    compressedSize10_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    compressedSize10_empty_n : IN STD_LOGIC;
    compressedSize10_read : OUT STD_LOGIC );
end;


architecture behav of snappyCompressStream_kStreamWrite_8u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal compressedSize10_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_start : STD_LOGIC;
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_done : STD_LOGIC;
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_idle : STD_LOGIC;
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_ready : STD_LOGIC;
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outStream12_read : STD_LOGIC;
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_snappyOutEos13_read : STD_LOGIC;
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TREADY : STD_LOGIC;
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TVALID : STD_LOGIC;
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TKEEP : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call7 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_outaxistream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal outaxistream_TVALID_int_regslice : STD_LOGIC;
    signal outaxistream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_outaxistream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outaxistream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outaxistream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outaxistream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outaxistream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outaxistream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outaxistream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_outaxistream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_outaxistream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_outaxistream_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component snappyCompressStream_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outStream12_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        outStream12_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream12_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream12_empty_n : IN STD_LOGIC;
        outStream12_read : OUT STD_LOGIC;
        snappyOutEos13_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        snappyOutEos13_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        snappyOutEos13_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        snappyOutEos13_empty_n : IN STD_LOGIC;
        snappyOutEos13_read : OUT STD_LOGIC;
        outaxistream_TREADY : IN STD_LOGIC;
        outaxistream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        outaxistream_TVALID : OUT STD_LOGIC;
        outaxistream_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
        outaxistream_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        outaxistream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component snappyCompressStream_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50 : component snappyCompressStream_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_start,
        ap_done => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_done,
        ap_idle => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_idle,
        ap_ready => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_ready,
        outStream12_dout => outStream12_dout,
        outStream12_num_data_valid => ap_const_lv2_0,
        outStream12_fifo_cap => ap_const_lv2_0,
        outStream12_empty_n => outStream12_empty_n,
        outStream12_read => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outStream12_read,
        snappyOutEos13_dout => snappyOutEos13_dout,
        snappyOutEos13_num_data_valid => ap_const_lv4_0,
        snappyOutEos13_fifo_cap => ap_const_lv4_0,
        snappyOutEos13_empty_n => snappyOutEos13_empty_n,
        snappyOutEos13_read => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_snappyOutEos13_read,
        outaxistream_TREADY => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TREADY,
        outaxistream_TDATA => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TDATA,
        outaxistream_TVALID => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TVALID,
        outaxistream_TKEEP => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TKEEP,
        outaxistream_TSTRB => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TSTRB,
        outaxistream_TLAST => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TLAST);

    regslice_both_outaxistream_V_data_V_U : component snappyCompressStream_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TDATA,
        vld_in => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TVALID,
        ack_in => outaxistream_TREADY_int_regslice,
        data_out => outaxistream_TDATA,
        vld_out => regslice_both_outaxistream_V_data_V_U_vld_out,
        ack_out => outaxistream_TREADY,
        apdone_blk => regslice_both_outaxistream_V_data_V_U_apdone_blk);

    regslice_both_outaxistream_V_keep_V_U : component snappyCompressStream_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TKEEP,
        vld_in => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TVALID,
        ack_in => regslice_both_outaxistream_V_keep_V_U_ack_in_dummy,
        data_out => outaxistream_TKEEP,
        vld_out => regslice_both_outaxistream_V_keep_V_U_vld_out,
        ack_out => outaxistream_TREADY,
        apdone_blk => regslice_both_outaxistream_V_keep_V_U_apdone_blk);

    regslice_both_outaxistream_V_strb_V_U : component snappyCompressStream_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TSTRB,
        vld_in => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TVALID,
        ack_in => regslice_both_outaxistream_V_strb_V_U_ack_in_dummy,
        data_out => outaxistream_TSTRB,
        vld_out => regslice_both_outaxistream_V_strb_V_U_vld_out,
        ack_out => outaxistream_TREADY,
        apdone_blk => regslice_both_outaxistream_V_strb_V_U_apdone_blk);

    regslice_both_outaxistream_V_last_V_U : component snappyCompressStream_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TLAST,
        vld_in => grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TVALID,
        ack_in => regslice_both_outaxistream_V_last_V_U_ack_in_dummy,
        data_out => outaxistream_TLAST,
        vld_out => regslice_both_outaxistream_V_last_V_U_vld_out,
        ack_out => outaxistream_TREADY,
        apdone_blk => regslice_both_outaxistream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((regslice_both_outaxistream_V_data_V_U_apdone_blk = ap_const_logic_1) or (compressedSize10_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_ready = ap_const_logic_1)) then 
                    grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, compressedSize10_empty_n, ap_CS_fsm_state3, grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_done, ap_CS_fsm_state2, regslice_both_outaxistream_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((regslice_both_outaxistream_V_data_V_U_apdone_blk = ap_const_logic_1) or (compressedSize10_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_done)
    begin
        if ((grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(compressedSize10_empty_n, regslice_both_outaxistream_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_outaxistream_V_data_V_U_apdone_blk = ap_const_logic_1) or (compressedSize10_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call7_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call7 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(compressedSize10_empty_n, regslice_both_outaxistream_V_data_V_U_apdone_blk)
    begin
                ap_block_state3 <= ((regslice_both_outaxistream_V_data_V_U_apdone_blk = ap_const_logic_1) or (compressedSize10_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, compressedSize10_empty_n, ap_CS_fsm_state3, regslice_both_outaxistream_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_outaxistream_V_data_V_U_apdone_blk = ap_const_logic_1) or (compressedSize10_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(compressedSize10_empty_n, ap_CS_fsm_state3, regslice_both_outaxistream_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_outaxistream_V_data_V_U_apdone_blk = ap_const_logic_1) or (compressedSize10_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    compressedSize10_blk_n_assign_proc : process(compressedSize10_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            compressedSize10_blk_n <= compressedSize10_empty_n;
        else 
            compressedSize10_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    compressedSize10_read_assign_proc : process(compressedSize10_empty_n, ap_CS_fsm_state3, regslice_both_outaxistream_V_data_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_outaxistream_V_data_V_U_apdone_blk = ap_const_logic_1) or (compressedSize10_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            compressedSize10_read <= ap_const_logic_1;
        else 
            compressedSize10_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_start <= grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_ap_start_reg;
    grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TREADY <= (outaxistream_TREADY_int_regslice and ap_CS_fsm_state2);

    outStream12_read_assign_proc : process(grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outStream12_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            outStream12_read <= grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outStream12_read;
        else 
            outStream12_read <= ap_const_logic_0;
        end if; 
    end process;

    outaxistream_TVALID <= regslice_both_outaxistream_V_data_V_U_vld_out;
    outaxistream_TVALID_int_regslice <= grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_outaxistream_TVALID;

    snappyOutEos13_read_assign_proc : process(grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_snappyOutEos13_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            snappyOutEos13_read <= grp_kStreamWrite_8u_Pipeline_VITIS_LOOP_110_1_fu_50_snappyOutEos13_read;
        else 
            snappyOutEos13_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
