-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity snappyCompressStream_lzBestMatchFilter_6_65536_Pipeline_lz_bestMatchFilter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    compressdStream7_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    compressdStream7_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    compressdStream7_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    compressdStream7_empty_n : IN STD_LOGIC;
    compressdStream7_read : OUT STD_LOGIC;
    bestMatchStream8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    bestMatchStream8_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    bestMatchStream8_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    bestMatchStream8_full_n : IN STD_LOGIC;
    bestMatchStream8_write : OUT STD_LOGIC;
    tmp_48 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_47 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_46 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_45 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_44 : IN STD_LOGIC_VECTOR (31 downto 0);
    tmp_43 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_size : IN STD_LOGIC_VECTOR (31 downto 0);
    compare_window_V_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    compare_window_V_out_ap_vld : OUT STD_LOGIC;
    compare_window_V_12_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    compare_window_V_12_out_ap_vld : OUT STD_LOGIC;
    compare_window_V_13_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    compare_window_V_13_out_ap_vld : OUT STD_LOGIC;
    compare_window_V_14_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    compare_window_V_14_out_ap_vld : OUT STD_LOGIC;
    compare_window_V_15_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    compare_window_V_15_out_ap_vld : OUT STD_LOGIC;
    compare_window_V_16_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    compare_window_V_16_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of snappyCompressStream_lzBestMatchFilter_6_65536_Pipeline_lz_bestMatchFilter is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln327_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln327_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal compressdStream7_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bestMatchStream8_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal outValue_V_9_fu_531_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal outValue_V_9_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal i_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_12_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_11 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_5_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_6_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal match_length_fu_293_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal compareLen_fu_307_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln343_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln341_fu_303_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal compareLen_1_fu_329_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln343_fu_339_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln343_fu_345_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln343_1_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal compareLen_2_fu_361_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln343_1_fu_371_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln343_1_fu_377_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln343_2_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal compareLen_3_fu_393_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln343_2_fu_403_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln343_2_fu_409_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln343_3_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal compareLen_4_fu_425_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln343_3_fu_435_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln343_3_fu_441_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln343_4_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal compareLen_5_fu_457_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln343_4_fu_467_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln343_4_fu_473_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln343_5_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln343_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln343_1_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln343_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal best_match_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln343_3_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln343_4_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln343_2_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln343_2_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln343_3_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln343_1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal best_match_1_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_519_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component snappyCompressStream_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component snappyCompressStream_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln327_fu_253_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_90 <= i_12_fu_259_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_90 <= ap_const_lv32_6;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_4_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_4_fu_98 <= tmp_44;
                elsif (((icmp_ln327_reg_623 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_Val2_4_fu_98 <= p_Val2_5_fu_102;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_5_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_5_fu_102 <= tmp_45;
                elsif (((icmp_ln327_reg_623 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_Val2_5_fu_102 <= p_Val2_6_fu_106;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_6_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_6_fu_106 <= tmp_46;
                elsif (((icmp_ln327_reg_623 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_Val2_6_fu_106 <= p_Val2_7_fu_110;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_7_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_7_fu_110 <= tmp_47;
                elsif (((icmp_ln327_reg_623 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_Val2_7_fu_110 <= p_Val2_8_fu_114;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_8_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_8_fu_114 <= tmp_48;
                elsif (((icmp_ln327_reg_623 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_Val2_8_fu_114 <= compressdStream7_dout;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_94 <= tmp_43;
                elsif (((icmp_ln327_reg_623 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    p_Val2_s_fu_94 <= p_Val2_4_fu_98;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln327_reg_623 <= icmp_ln327_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln327_reg_623 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                outValue_V_9_reg_627 <= outValue_V_9_fu_531_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln343_1_fu_371_p2 <= std_logic_vector(unsigned(zext_ln341_fu_303_p1) + unsigned(ap_const_lv9_2));
    add_ln343_2_fu_403_p2 <= std_logic_vector(unsigned(zext_ln341_fu_303_p1) + unsigned(ap_const_lv9_3));
    add_ln343_3_fu_435_p2 <= std_logic_vector(unsigned(zext_ln341_fu_303_p1) + unsigned(ap_const_lv9_4));
    add_ln343_4_fu_467_p2 <= std_logic_vector(unsigned(zext_ln341_fu_303_p1) + unsigned(ap_const_lv9_5));
    add_ln343_fu_339_p2 <= std_logic_vector(unsigned(zext_ln341_fu_303_p1) + unsigned(ap_const_lv9_1));
    and_ln343_1_fu_495_p2 <= (best_match_fu_323_p2 and and_ln343_fu_489_p2);
    and_ln343_2_fu_501_p2 <= (xor_ln343_4_fu_483_p2 and xor_ln343_3_fu_451_p2);
    and_ln343_3_fu_507_p2 <= (xor_ln343_2_fu_419_p2 and and_ln343_2_fu_501_p2);
    and_ln343_fu_489_p2 <= (xor_ln343_fu_355_p2 and xor_ln343_1_fu_387_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, compressdStream7_empty_n, icmp_ln327_reg_623, bestMatchStream8_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((bestMatchStream8_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln327_reg_623 = ap_const_lv1_1) and (compressdStream7_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, compressdStream7_empty_n, icmp_ln327_reg_623, bestMatchStream8_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((bestMatchStream8_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln327_reg_623 = ap_const_lv1_1) and (compressdStream7_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, compressdStream7_empty_n, icmp_ln327_reg_623, bestMatchStream8_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((bestMatchStream8_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln327_reg_623 = ap_const_lv1_1) and (compressdStream7_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(compressdStream7_empty_n, icmp_ln327_reg_623)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln327_reg_623 = ap_const_lv1_1) and (compressdStream7_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(bestMatchStream8_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (bestMatchStream8_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln327_fu_253_p2)
    begin
        if (((icmp_ln327_fu_253_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln327_reg_623, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln327_reg_623 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_11_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_90, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_11 <= ap_const_lv32_6;
        else 
            ap_sig_allocacmp_i_11 <= i_fu_90;
        end if; 
    end process;


    bestMatchStream8_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, bestMatchStream8_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bestMatchStream8_blk_n <= bestMatchStream8_full_n;
        else 
            bestMatchStream8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bestMatchStream8_din <= outValue_V_9_reg_627;

    bestMatchStream8_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            bestMatchStream8_write <= ap_const_logic_1;
        else 
            bestMatchStream8_write <= ap_const_logic_0;
        end if; 
    end process;

    best_match_1_fu_513_p2 <= (and_ln343_3_fu_507_p2 and and_ln343_1_fu_495_p2);
    best_match_fu_323_p2 <= (icmp_ln343_fu_317_p2 xor ap_const_lv1_1);
    compareLen_1_fu_329_p4 <= p_Val2_5_fu_102(15 downto 8);
    compareLen_2_fu_361_p4 <= p_Val2_6_fu_106(15 downto 8);
    compareLen_3_fu_393_p4 <= p_Val2_7_fu_110(15 downto 8);
    compareLen_4_fu_425_p4 <= p_Val2_8_fu_114(15 downto 8);
    compareLen_5_fu_457_p4 <= compressdStream7_dout(15 downto 8);
    compareLen_fu_307_p4 <= p_Val2_4_fu_98(15 downto 8);
    compare_window_V_12_out <= p_Val2_7_fu_110;

    compare_window_V_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln327_reg_623, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln327_reg_623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compare_window_V_12_out_ap_vld <= ap_const_logic_1;
        else 
            compare_window_V_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    compare_window_V_13_out <= p_Val2_6_fu_106;

    compare_window_V_13_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln327_reg_623, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln327_reg_623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compare_window_V_13_out_ap_vld <= ap_const_logic_1;
        else 
            compare_window_V_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    compare_window_V_14_out <= p_Val2_5_fu_102;

    compare_window_V_14_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln327_reg_623, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln327_reg_623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compare_window_V_14_out_ap_vld <= ap_const_logic_1;
        else 
            compare_window_V_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    compare_window_V_15_out <= p_Val2_4_fu_98;

    compare_window_V_15_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln327_reg_623, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln327_reg_623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compare_window_V_15_out_ap_vld <= ap_const_logic_1;
        else 
            compare_window_V_15_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    compare_window_V_16_out <= p_Val2_s_fu_94;

    compare_window_V_16_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln327_reg_623, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln327_reg_623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compare_window_V_16_out_ap_vld <= ap_const_logic_1;
        else 
            compare_window_V_16_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    compare_window_V_out <= p_Val2_8_fu_114;

    compare_window_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln327_reg_623, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln327_reg_623 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compare_window_V_out_ap_vld <= ap_const_logic_1;
        else 
            compare_window_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    compressdStream7_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, compressdStream7_empty_n, icmp_ln327_reg_623, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln327_reg_623 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compressdStream7_blk_n <= compressdStream7_empty_n;
        else 
            compressdStream7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    compressdStream7_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln327_reg_623, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln327_reg_623 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compressdStream7_read <= ap_const_logic_1;
        else 
            compressdStream7_read <= ap_const_logic_0;
        end if; 
    end process;

    i_12_fu_259_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_11) + unsigned(ap_const_lv32_1));
    icmp_ln327_fu_253_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_11) < unsigned(input_size)) else "0";
    icmp_ln343_1_fu_349_p2 <= "1" when (unsigned(add_ln343_fu_339_p2) < unsigned(zext_ln343_fu_345_p1)) else "0";
    icmp_ln343_2_fu_381_p2 <= "1" when (unsigned(add_ln343_1_fu_371_p2) < unsigned(zext_ln343_1_fu_377_p1)) else "0";
    icmp_ln343_3_fu_413_p2 <= "1" when (unsigned(add_ln343_2_fu_403_p2) < unsigned(zext_ln343_2_fu_409_p1)) else "0";
    icmp_ln343_4_fu_445_p2 <= "1" when (unsigned(add_ln343_3_fu_435_p2) < unsigned(zext_ln343_3_fu_441_p1)) else "0";
    icmp_ln343_5_fu_477_p2 <= "1" when (unsigned(add_ln343_4_fu_467_p2) < unsigned(zext_ln343_4_fu_473_p1)) else "0";
    icmp_ln343_fu_317_p2 <= "1" when (unsigned(match_length_fu_293_p4) < unsigned(compareLen_fu_307_p4)) else "0";
    match_length_fu_293_p4 <= p_Val2_s_fu_94(15 downto 8);
    outValue_V_9_fu_531_p3 <= 
        p_Val2_s_fu_94 when (best_match_1_fu_513_p2(0) = '1') else 
        p_Result_s_fu_519_p5;
    p_Result_s_fu_519_p5 <= (ap_const_lv24_0 & p_Val2_s_fu_94(7 downto 0));
    xor_ln343_1_fu_387_p2 <= (icmp_ln343_2_fu_381_p2 xor ap_const_lv1_1);
    xor_ln343_2_fu_419_p2 <= (icmp_ln343_3_fu_413_p2 xor ap_const_lv1_1);
    xor_ln343_3_fu_451_p2 <= (icmp_ln343_4_fu_445_p2 xor ap_const_lv1_1);
    xor_ln343_4_fu_483_p2 <= (icmp_ln343_5_fu_477_p2 xor ap_const_lv1_1);
    xor_ln343_fu_355_p2 <= (icmp_ln343_1_fu_349_p2 xor ap_const_lv1_1);
    zext_ln341_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(match_length_fu_293_p4),9));
    zext_ln343_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(compareLen_2_fu_361_p4),9));
    zext_ln343_2_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(compareLen_3_fu_393_p4),9));
    zext_ln343_3_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(compareLen_4_fu_425_p4),9));
    zext_ln343_4_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(compareLen_5_fu_457_p4),9));
    zext_ln343_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(compareLen_1_fu_329_p4),9));
end behav;
