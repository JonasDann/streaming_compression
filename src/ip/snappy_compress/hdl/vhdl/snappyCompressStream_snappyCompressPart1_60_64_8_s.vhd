-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity snappyCompressStream_snappyCompressPart1_60_64_8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    boosterStream9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    boosterStream9_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    boosterStream9_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    boosterStream9_empty_n : IN STD_LOGIC;
    boosterStream9_read : OUT STD_LOGIC;
    lit_outStream2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    lit_outStream2_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    lit_outStream2_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    lit_outStream2_full_n : IN STD_LOGIC;
    lit_outStream2_write : OUT STD_LOGIC;
    lenOffset_Stream3_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    lenOffset_Stream3_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    lenOffset_Stream3_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    lenOffset_Stream3_full_n : IN STD_LOGIC;
    lenOffset_Stream3_write : OUT STD_LOGIC;
    input_size : IN STD_LOGIC_VECTOR (31 downto 0);
    input_size_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_size_c_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    input_size_c_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    input_size_c_full_n : IN STD_LOGIC;
    input_size_c_write : OUT STD_LOGIC );
end;


architecture behav of snappyCompressStream_snappyCompressPart1_60_64_8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv64_3C00000000 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000011110000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal boosterStream9_blk_n : STD_LOGIC;
    signal icmp_ln53_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lenOffset_Stream3_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln53_reg_150 : STD_LOGIC_VECTOR (0 downto 0);
    signal lit_count_1_loc_load_load_fu_126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_size_c_blk_n : STD_LOGIC;
    signal tmp_reg_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_fu_120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_159 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start : STD_LOGIC;
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_done : STD_LOGIC;
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_idle : STD_LOGIC;
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_ready : STD_LOGIC;
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_boosterStream9_read : STD_LOGIC;
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_din : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_write : STD_LOGIC;
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_write : STD_LOGIC;
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out_ap_vld : STD_LOGIC;
    signal p_Result_s_fu_129_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_tmpValue_V_1_phi_fu_92_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op28_write_state4 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component snappyCompressStream_snappyCompressPart1_60_64_8_Pipeline_snappy_divide IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        boosterStream9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        boosterStream9_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        boosterStream9_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        boosterStream9_empty_n : IN STD_LOGIC;
        boosterStream9_read : OUT STD_LOGIC;
        lenOffset_Stream3_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        lenOffset_Stream3_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        lenOffset_Stream3_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        lenOffset_Stream3_full_n : IN STD_LOGIC;
        lenOffset_Stream3_write : OUT STD_LOGIC;
        lit_outStream2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        lit_outStream2_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        lit_outStream2_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        lit_outStream2_full_n : IN STD_LOGIC;
        lit_outStream2_write : OUT STD_LOGIC;
        tmp_12 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size : IN STD_LOGIC_VECTOR (31 downto 0);
        sub : IN STD_LOGIC_VECTOR (31 downto 0);
        lit_count_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        lit_count_1_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100 : component snappyCompressStream_snappyCompressPart1_60_64_8_Pipeline_snappy_divide
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start,
        ap_done => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_done,
        ap_idle => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_idle,
        ap_ready => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_ready,
        boosterStream9_dout => boosterStream9_dout,
        boosterStream9_num_data_valid => ap_const_lv4_0,
        boosterStream9_fifo_cap => ap_const_lv4_0,
        boosterStream9_empty_n => boosterStream9_empty_n,
        boosterStream9_read => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_boosterStream9_read,
        lenOffset_Stream3_din => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_din,
        lenOffset_Stream3_num_data_valid => ap_const_lv6_0,
        lenOffset_Stream3_fifo_cap => ap_const_lv6_0,
        lenOffset_Stream3_full_n => lenOffset_Stream3_full_n,
        lenOffset_Stream3_write => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_write,
        lit_outStream2_din => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_din,
        lit_outStream2_num_data_valid => ap_const_lv7_0,
        lit_outStream2_fifo_cap => ap_const_lv7_0,
        lit_outStream2_full_n => lit_outStream2_full_n,
        lit_outStream2_write => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_write,
        tmp_12 => tmp_reg_154,
        input_size => input_size,
        sub => sub_reg_159,
        lit_count_1_out => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out,
        lit_count_1_out_ap_vld => grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((lenOffset_Stream3_full_n = ap_const_logic_0) and (ap_predicate_op28_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_ready = ap_const_logic_1)) then 
                    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln53_reg_150 <= icmp_ln53_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                sub_reg_159 <= sub_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln53_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_154 <= boosterStream9_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, boosterStream9_empty_n, lenOffset_Stream3_full_n, input_size_c_full_n, icmp_ln53_fu_114_p2, ap_CS_fsm_state4, grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_done, ap_predicate_op28_write_state4, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((input_size_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or ((icmp_ln53_fu_114_p2 = ap_const_lv1_0) and (boosterStream9_empty_n = ap_const_logic_0)))) and (icmp_ln53_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((input_size_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or ((icmp_ln53_fu_114_p2 = ap_const_lv1_0) and (boosterStream9_empty_n = ap_const_logic_0)))) and (icmp_ln53_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((lenOffset_Stream3_full_n = ap_const_logic_0) and (ap_predicate_op28_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, boosterStream9_empty_n, input_size_c_full_n, icmp_ln53_fu_114_p2)
    begin
        if (((input_size_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or ((icmp_ln53_fu_114_p2 = ap_const_lv1_0) and (boosterStream9_empty_n = ap_const_logic_0)))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_done)
    begin
        if ((grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(lenOffset_Stream3_full_n, ap_predicate_op28_write_state4)
    begin
        if (((lenOffset_Stream3_full_n = ap_const_logic_0) and (ap_predicate_op28_write_state4 = ap_const_boolean_1))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, boosterStream9_empty_n, input_size_c_full_n, icmp_ln53_fu_114_p2)
    begin
                ap_block_state1 <= ((input_size_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or ((icmp_ln53_fu_114_p2 = ap_const_lv1_0) and (boosterStream9_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state4_assign_proc : process(lenOffset_Stream3_full_n, ap_predicate_op28_write_state4)
    begin
                ap_block_state4 <= ((lenOffset_Stream3_full_n = ap_const_logic_0) and (ap_predicate_op28_write_state4 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, lenOffset_Stream3_full_n, ap_CS_fsm_state4, ap_predicate_op28_write_state4)
    begin
        if ((not(((lenOffset_Stream3_full_n = ap_const_logic_0) and (ap_predicate_op28_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_tmpValue_V_1_phi_fu_92_p4_assign_proc : process(ap_CS_fsm_state4, icmp_ln53_reg_150, lit_count_1_loc_load_load_fu_126_p1, grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out, p_Result_s_fu_129_p3)
    begin
        if (((icmp_ln53_reg_150 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((lit_count_1_loc_load_load_fu_126_p1 = ap_const_lv32_3C)) then 
                ap_phi_mux_tmpValue_V_1_phi_fu_92_p4 <= ap_const_lv64_3C00000000;
            elsif ((not((grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out = ap_const_lv32_0)) and not((lit_count_1_loc_load_load_fu_126_p1 = ap_const_lv32_3C)))) then 
                ap_phi_mux_tmpValue_V_1_phi_fu_92_p4 <= p_Result_s_fu_129_p3;
            else 
                ap_phi_mux_tmpValue_V_1_phi_fu_92_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_tmpValue_V_1_phi_fu_92_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_predicate_op28_write_state4_assign_proc : process(icmp_ln53_reg_150, grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out)
    begin
                ap_predicate_op28_write_state4 <= (not((grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out = ap_const_lv32_0)) and (icmp_ln53_reg_150 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;

    boosterStream9_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, boosterStream9_empty_n, icmp_ln53_fu_114_p2)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (icmp_ln53_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            boosterStream9_blk_n <= boosterStream9_empty_n;
        else 
            boosterStream9_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    boosterStream9_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, boosterStream9_empty_n, input_size_c_full_n, icmp_ln53_fu_114_p2, grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_boosterStream9_read, ap_CS_fsm_state3)
    begin
        if ((not(((input_size_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or ((icmp_ln53_fu_114_p2 = ap_const_lv1_0) and (boosterStream9_empty_n = ap_const_logic_0)))) and (icmp_ln53_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            boosterStream9_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            boosterStream9_read <= grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_boosterStream9_read;
        else 
            boosterStream9_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start <= grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg;
    icmp_ln53_fu_114_p2 <= "1" when (input_size = ap_const_lv32_0) else "0";

    input_size_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, input_size_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_size_c_blk_n <= input_size_c_full_n;
        else 
            input_size_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_size_c_din <= input_size;

    input_size_c_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, boosterStream9_empty_n, input_size_c_full_n, icmp_ln53_fu_114_p2)
    begin
        if ((not(((input_size_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or ((icmp_ln53_fu_114_p2 = ap_const_lv1_0) and (boosterStream9_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_size_c_write <= ap_const_logic_1;
        else 
            input_size_c_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(lenOffset_Stream3_full_n, ap_CS_fsm_state4, ap_predicate_op28_write_state4)
    begin
        if ((not(((lenOffset_Stream3_full_n = ap_const_logic_0) and (ap_predicate_op28_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    lenOffset_Stream3_blk_n_assign_proc : process(lenOffset_Stream3_full_n, ap_CS_fsm_state4, icmp_ln53_reg_150, grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out)
    begin
        if ((not((grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out = ap_const_lv32_0)) and (icmp_ln53_reg_150 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            lenOffset_Stream3_blk_n <= lenOffset_Stream3_full_n;
        else 
            lenOffset_Stream3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    lenOffset_Stream3_din_assign_proc : process(lenOffset_Stream3_full_n, ap_CS_fsm_state4, grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_din, ap_phi_mux_tmpValue_V_1_phi_fu_92_p4, ap_predicate_op28_write_state4, ap_CS_fsm_state3)
    begin
        if ((not(((lenOffset_Stream3_full_n = ap_const_logic_0) and (ap_predicate_op28_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_predicate_op28_write_state4 = ap_const_boolean_1))) then 
            lenOffset_Stream3_din <= ap_phi_mux_tmpValue_V_1_phi_fu_92_p4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lenOffset_Stream3_din <= grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_din;
        else 
            lenOffset_Stream3_din <= grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_din;
        end if; 
    end process;


    lenOffset_Stream3_write_assign_proc : process(lenOffset_Stream3_full_n, ap_CS_fsm_state4, grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_write, ap_predicate_op28_write_state4, ap_CS_fsm_state3)
    begin
        if ((not(((lenOffset_Stream3_full_n = ap_const_logic_0) and (ap_predicate_op28_write_state4 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_predicate_op28_write_state4 = ap_const_boolean_1))) then 
            lenOffset_Stream3_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lenOffset_Stream3_write <= grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_write;
        else 
            lenOffset_Stream3_write <= ap_const_logic_0;
        end if; 
    end process;

    lit_count_1_loc_load_load_fu_126_p1 <= grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out;
    lit_outStream2_din <= grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_din;

    lit_outStream2_write_assign_proc : process(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lit_outStream2_write <= grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_write;
        else 
            lit_outStream2_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_129_p3 <= (grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out & ap_const_lv32_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_fu_120_p2 <= std_logic_vector(unsigned(input_size) + unsigned(ap_const_lv32_FFFFFFFF));
end behav;
