-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity snappyCompressStream_snappyCompress_60_64_8_s is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    boosterStream9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    boosterStream9_empty_n : IN STD_LOGIC;
    boosterStream9_read : OUT STD_LOGIC;
    outStream12_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream12_full_n : IN STD_LOGIC;
    outStream12_write : OUT STD_LOGIC;
    input_size : IN STD_LOGIC_VECTOR (31 downto 0);
    snappyOutEos13_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    snappyOutEos13_full_n : IN STD_LOGIC;
    snappyOutEos13_write : OUT STD_LOGIC;
    compressedSize10_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    compressedSize10_full_n : IN STD_LOGIC;
    compressedSize10_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_size_ap_vld : IN STD_LOGIC;
    input_size_ap_ack : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of snappyCompressStream_snappyCompress_60_64_8_s is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_ap_start : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_ap_done : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_ap_continue : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_ap_idle : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_ap_ready : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_start_out : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_start_write : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_boosterStream9_read : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_lit_outStream2_din : STD_LOGIC_VECTOR (7 downto 0);
    signal snappyCompressPart1_60_64_8_U0_lit_outStream2_write : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_lenOffset_Stream3_din : STD_LOGIC_VECTOR (63 downto 0);
    signal snappyCompressPart1_60_64_8_U0_lenOffset_Stream3_write : STD_LOGIC;
    signal snappyCompressPart1_60_64_8_U0_input_size_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal snappyCompressPart1_60_64_8_U0_input_size_c_write : STD_LOGIC;
    signal snappyCompressPart2_U0_ap_start : STD_LOGIC;
    signal snappyCompressPart2_U0_ap_done : STD_LOGIC;
    signal snappyCompressPart2_U0_ap_continue : STD_LOGIC;
    signal snappyCompressPart2_U0_ap_idle : STD_LOGIC;
    signal snappyCompressPart2_U0_ap_ready : STD_LOGIC;
    signal snappyCompressPart2_U0_lit_outStream2_read : STD_LOGIC;
    signal snappyCompressPart2_U0_lenOffset_Stream3_read : STD_LOGIC;
    signal snappyCompressPart2_U0_outStream12_din : STD_LOGIC_VECTOR (7 downto 0);
    signal snappyCompressPart2_U0_outStream12_write : STD_LOGIC;
    signal snappyCompressPart2_U0_snappyOutEos13_din : STD_LOGIC_VECTOR (0 downto 0);
    signal snappyCompressPart2_U0_snappyOutEos13_write : STD_LOGIC;
    signal snappyCompressPart2_U0_compressedSize10_din : STD_LOGIC_VECTOR (31 downto 0);
    signal snappyCompressPart2_U0_compressedSize10_write : STD_LOGIC;
    signal snappyCompressPart2_U0_input_size_read : STD_LOGIC;
    signal lit_outStream_full_n : STD_LOGIC;
    signal lit_outStream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal lit_outStream_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal lit_outStream_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal lit_outStream_empty_n : STD_LOGIC;
    signal lenOffset_Stream_full_n : STD_LOGIC;
    signal lenOffset_Stream_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal lenOffset_Stream_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal lenOffset_Stream_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal lenOffset_Stream_empty_n : STD_LOGIC;
    signal input_size_c_full_n : STD_LOGIC;
    signal input_size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal input_size_c_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal input_size_c_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal input_size_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_snappyCompressPart2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_snappyCompressPart2_U0_full_n : STD_LOGIC;
    signal start_for_snappyCompressPart2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_snappyCompressPart2_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component snappyCompressStream_snappyCompressPart1_60_64_8_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        boosterStream9_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        boosterStream9_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        boosterStream9_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        boosterStream9_empty_n : IN STD_LOGIC;
        boosterStream9_read : OUT STD_LOGIC;
        lit_outStream2_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        lit_outStream2_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        lit_outStream2_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        lit_outStream2_full_n : IN STD_LOGIC;
        lit_outStream2_write : OUT STD_LOGIC;
        lenOffset_Stream3_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        lenOffset_Stream3_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        lenOffset_Stream3_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        lenOffset_Stream3_full_n : IN STD_LOGIC;
        lenOffset_Stream3_write : OUT STD_LOGIC;
        input_size : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_size_c_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        input_size_c_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        input_size_c_full_n : IN STD_LOGIC;
        input_size_c_write : OUT STD_LOGIC );
    end component;


    component snappyCompressStream_snappyCompressPart2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lit_outStream2_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        lit_outStream2_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        lit_outStream2_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        lit_outStream2_empty_n : IN STD_LOGIC;
        lit_outStream2_read : OUT STD_LOGIC;
        lenOffset_Stream3_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        lenOffset_Stream3_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        lenOffset_Stream3_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        lenOffset_Stream3_empty_n : IN STD_LOGIC;
        lenOffset_Stream3_read : OUT STD_LOGIC;
        outStream12_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        outStream12_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream12_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        outStream12_full_n : IN STD_LOGIC;
        outStream12_write : OUT STD_LOGIC;
        snappyOutEos13_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        snappyOutEos13_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        snappyOutEos13_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        snappyOutEos13_full_n : IN STD_LOGIC;
        snappyOutEos13_write : OUT STD_LOGIC;
        compressedSize10_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        compressedSize10_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        compressedSize10_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        compressedSize10_full_n : IN STD_LOGIC;
        compressedSize10_write : OUT STD_LOGIC;
        input_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        input_size_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        input_size_empty_n : IN STD_LOGIC;
        input_size_read : OUT STD_LOGIC );
    end component;


    component snappyCompressStream_fifo_w8_d64_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component snappyCompressStream_fifo_w64_d32_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component snappyCompressStream_fifo_w32_d32_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component snappyCompressStream_start_for_snappyCompressPart2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    snappyCompressPart1_60_64_8_U0 : component snappyCompressStream_snappyCompressPart1_60_64_8_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => snappyCompressPart1_60_64_8_U0_ap_start,
        start_full_n => start_for_snappyCompressPart2_U0_full_n,
        ap_done => snappyCompressPart1_60_64_8_U0_ap_done,
        ap_continue => snappyCompressPart1_60_64_8_U0_ap_continue,
        ap_idle => snappyCompressPart1_60_64_8_U0_ap_idle,
        ap_ready => snappyCompressPart1_60_64_8_U0_ap_ready,
        start_out => snappyCompressPart1_60_64_8_U0_start_out,
        start_write => snappyCompressPart1_60_64_8_U0_start_write,
        boosterStream9_dout => boosterStream9_dout,
        boosterStream9_num_data_valid => ap_const_lv4_0,
        boosterStream9_fifo_cap => ap_const_lv4_0,
        boosterStream9_empty_n => boosterStream9_empty_n,
        boosterStream9_read => snappyCompressPart1_60_64_8_U0_boosterStream9_read,
        lit_outStream2_din => snappyCompressPart1_60_64_8_U0_lit_outStream2_din,
        lit_outStream2_num_data_valid => lit_outStream_num_data_valid,
        lit_outStream2_fifo_cap => lit_outStream_fifo_cap,
        lit_outStream2_full_n => lit_outStream_full_n,
        lit_outStream2_write => snappyCompressPart1_60_64_8_U0_lit_outStream2_write,
        lenOffset_Stream3_din => snappyCompressPart1_60_64_8_U0_lenOffset_Stream3_din,
        lenOffset_Stream3_num_data_valid => lenOffset_Stream_num_data_valid,
        lenOffset_Stream3_fifo_cap => lenOffset_Stream_fifo_cap,
        lenOffset_Stream3_full_n => lenOffset_Stream_full_n,
        lenOffset_Stream3_write => snappyCompressPart1_60_64_8_U0_lenOffset_Stream3_write,
        input_size => input_size,
        input_size_c_din => snappyCompressPart1_60_64_8_U0_input_size_c_din,
        input_size_c_num_data_valid => input_size_c_num_data_valid,
        input_size_c_fifo_cap => input_size_c_fifo_cap,
        input_size_c_full_n => input_size_c_full_n,
        input_size_c_write => snappyCompressPart1_60_64_8_U0_input_size_c_write);

    snappyCompressPart2_U0 : component snappyCompressStream_snappyCompressPart2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => snappyCompressPart2_U0_ap_start,
        ap_done => snappyCompressPart2_U0_ap_done,
        ap_continue => snappyCompressPart2_U0_ap_continue,
        ap_idle => snappyCompressPart2_U0_ap_idle,
        ap_ready => snappyCompressPart2_U0_ap_ready,
        lit_outStream2_dout => lit_outStream_dout,
        lit_outStream2_num_data_valid => lit_outStream_num_data_valid,
        lit_outStream2_fifo_cap => lit_outStream_fifo_cap,
        lit_outStream2_empty_n => lit_outStream_empty_n,
        lit_outStream2_read => snappyCompressPart2_U0_lit_outStream2_read,
        lenOffset_Stream3_dout => lenOffset_Stream_dout,
        lenOffset_Stream3_num_data_valid => lenOffset_Stream_num_data_valid,
        lenOffset_Stream3_fifo_cap => lenOffset_Stream_fifo_cap,
        lenOffset_Stream3_empty_n => lenOffset_Stream_empty_n,
        lenOffset_Stream3_read => snappyCompressPart2_U0_lenOffset_Stream3_read,
        outStream12_din => snappyCompressPart2_U0_outStream12_din,
        outStream12_num_data_valid => ap_const_lv2_0,
        outStream12_fifo_cap => ap_const_lv2_0,
        outStream12_full_n => outStream12_full_n,
        outStream12_write => snappyCompressPart2_U0_outStream12_write,
        snappyOutEos13_din => snappyCompressPart2_U0_snappyOutEos13_din,
        snappyOutEos13_num_data_valid => ap_const_lv4_0,
        snappyOutEos13_fifo_cap => ap_const_lv4_0,
        snappyOutEos13_full_n => snappyOutEos13_full_n,
        snappyOutEos13_write => snappyCompressPart2_U0_snappyOutEos13_write,
        compressedSize10_din => snappyCompressPart2_U0_compressedSize10_din,
        compressedSize10_num_data_valid => ap_const_lv2_0,
        compressedSize10_fifo_cap => ap_const_lv2_0,
        compressedSize10_full_n => compressedSize10_full_n,
        compressedSize10_write => snappyCompressPart2_U0_compressedSize10_write,
        input_size_dout => input_size_c_dout,
        input_size_num_data_valid => input_size_c_num_data_valid,
        input_size_fifo_cap => input_size_c_fifo_cap,
        input_size_empty_n => input_size_c_empty_n,
        input_size_read => snappyCompressPart2_U0_input_size_read);

    lit_outStream_U : component snappyCompressStream_fifo_w8_d64_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => snappyCompressPart1_60_64_8_U0_lit_outStream2_din,
        if_full_n => lit_outStream_full_n,
        if_write => snappyCompressPart1_60_64_8_U0_lit_outStream2_write,
        if_dout => lit_outStream_dout,
        if_num_data_valid => lit_outStream_num_data_valid,
        if_fifo_cap => lit_outStream_fifo_cap,
        if_empty_n => lit_outStream_empty_n,
        if_read => snappyCompressPart2_U0_lit_outStream2_read);

    lenOffset_Stream_U : component snappyCompressStream_fifo_w64_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => snappyCompressPart1_60_64_8_U0_lenOffset_Stream3_din,
        if_full_n => lenOffset_Stream_full_n,
        if_write => snappyCompressPart1_60_64_8_U0_lenOffset_Stream3_write,
        if_dout => lenOffset_Stream_dout,
        if_num_data_valid => lenOffset_Stream_num_data_valid,
        if_fifo_cap => lenOffset_Stream_fifo_cap,
        if_empty_n => lenOffset_Stream_empty_n,
        if_read => snappyCompressPart2_U0_lenOffset_Stream3_read);

    input_size_c_U : component snappyCompressStream_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => snappyCompressPart1_60_64_8_U0_input_size_c_din,
        if_full_n => input_size_c_full_n,
        if_write => snappyCompressPart1_60_64_8_U0_input_size_c_write,
        if_dout => input_size_c_dout,
        if_num_data_valid => input_size_c_num_data_valid,
        if_fifo_cap => input_size_c_fifo_cap,
        if_empty_n => input_size_c_empty_n,
        if_read => snappyCompressPart2_U0_input_size_read);

    start_for_snappyCompressPart2_U0_U : component snappyCompressStream_start_for_snappyCompressPart2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_snappyCompressPart2_U0_din,
        if_full_n => start_for_snappyCompressPart2_U0_full_n,
        if_write => snappyCompressPart1_60_64_8_U0_start_write,
        if_dout => start_for_snappyCompressPart2_U0_dout,
        if_empty_n => start_for_snappyCompressPart2_U0_empty_n,
        if_read => snappyCompressPart2_U0_ap_ready);





    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= snappyCompressPart2_U0_ap_done;
    ap_idle <= (snappyCompressPart2_U0_ap_idle and snappyCompressPart1_60_64_8_U0_ap_idle);
    ap_ready <= snappyCompressPart1_60_64_8_U0_ap_ready;
    ap_sync_ready <= snappyCompressPart1_60_64_8_U0_ap_ready;
    boosterStream9_read <= snappyCompressPart1_60_64_8_U0_boosterStream9_read;
    compressedSize10_din <= snappyCompressPart2_U0_compressedSize10_din;
    compressedSize10_write <= snappyCompressPart2_U0_compressedSize10_write;
    input_size_ap_ack <= ap_const_logic_1;
    internal_ap_ready <= ap_sync_ready;
    outStream12_din <= snappyCompressPart2_U0_outStream12_din;
    outStream12_write <= snappyCompressPart2_U0_outStream12_write;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    snappyCompressPart1_60_64_8_U0_ap_continue <= ap_const_logic_1;
    snappyCompressPart1_60_64_8_U0_ap_start <= real_start;
    snappyCompressPart2_U0_ap_continue <= ap_continue;
    snappyCompressPart2_U0_ap_start <= start_for_snappyCompressPart2_U0_empty_n;
    snappyOutEos13_din <= snappyCompressPart2_U0_snappyOutEos13_din;
    snappyOutEos13_write <= snappyCompressPart2_U0_snappyOutEos13_write;
    start_for_snappyCompressPart2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
