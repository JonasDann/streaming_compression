// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module snappyCompressStream_snappyCompressPart1_60_64_8_Pipeline_snappy_divide (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        boosterStream9_dout,
        boosterStream9_num_data_valid,
        boosterStream9_fifo_cap,
        boosterStream9_empty_n,
        boosterStream9_read,
        lenOffset_Stream3_din,
        lenOffset_Stream3_num_data_valid,
        lenOffset_Stream3_fifo_cap,
        lenOffset_Stream3_full_n,
        lenOffset_Stream3_write,
        lit_outStream2_din,
        lit_outStream2_num_data_valid,
        lit_outStream2_fifo_cap,
        lit_outStream2_full_n,
        lit_outStream2_write,
        tmp_12,
        input_size,
        sub,
        lit_count_1_out,
        lit_count_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] boosterStream9_dout;
input  [3:0] boosterStream9_num_data_valid;
input  [3:0] boosterStream9_fifo_cap;
input   boosterStream9_empty_n;
output   boosterStream9_read;
output  [63:0] lenOffset_Stream3_din;
input  [5:0] lenOffset_Stream3_num_data_valid;
input  [5:0] lenOffset_Stream3_fifo_cap;
input   lenOffset_Stream3_full_n;
output   lenOffset_Stream3_write;
output  [7:0] lit_outStream2_din;
input  [6:0] lit_outStream2_num_data_valid;
input  [6:0] lit_outStream2_fifo_cap;
input   lit_outStream2_full_n;
output   lit_outStream2_write;
input  [31:0] tmp_12;
input  [31:0] input_size;
input  [31:0] sub;
output  [31:0] lit_count_1_out;
output   lit_count_1_out_ap_vld;

reg ap_idle;
reg boosterStream9_read;
reg[63:0] lenOffset_Stream3_din;
reg lenOffset_Stream3_write;
reg lit_outStream2_write;
reg lit_count_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln64_fu_153_p2;
wire   [0:0] icmp_ln67_fu_158_p2;
reg    ap_predicate_op29_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln73_reg_342;
reg   [0:0] icmp_ln86_reg_351;
reg    ap_predicate_op59_write_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    lenOffset_Stream3_blk_n;
wire    ap_block_pp0_stage0;
reg    boosterStream9_blk_n;
reg    lit_outStream2_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] tCh_fu_168_p1;
reg   [7:0] tCh_reg_327;
wire   [7:0] match_len_1_fu_172_p4;
reg   [7:0] match_len_1_reg_332;
wire   [15:0] add_ln392_fu_192_p2;
reg   [15:0] add_ln392_reg_337;
wire   [0:0] icmp_ln73_fu_198_p2;
reg   [31:0] lit_count_1_load_reg_346;
wire   [0:0] icmp_ln86_fu_239_p2;
reg   [31:0] lit_count_1_fu_74;
wire   [31:0] lit_count_fu_233_p2;
wire    ap_loop_init;
reg   [31:0] i_fu_78;
wire   [31:0] i_2_fu_217_p2;
wire   [31:0] i_5_fu_258_p2;
reg   [31:0] ap_sig_allocacmp_i_4;
reg   [31:0] p_Val2_s_fu_82;
wire   [63:0] p_Result_s_fu_272_p4;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tOffset_fu_182_p4;
wire   [7:0] match_len_fu_207_p2;
wire   [31:0] zext_ln81_fu_213_p1;
wire   [15:0] zext_ln388_fu_269_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_293;
reg    ap_condition_296;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

snappyCompressStream_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_78 <= 32'd0;
        end else if (((icmp_ln64_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_78 <= i_5_fu_258_p2;
        end else if ((1'b1 == ap_condition_293)) begin
            i_fu_78 <= i_2_fu_217_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln86_fu_239_p2 == 1'd0) & (icmp_ln73_fu_198_p2 == 1'd1))) begin
        lit_count_1_fu_74 <= lit_count_fu_233_p2;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln86_fu_239_p2 == 1'd1) & (icmp_ln73_fu_198_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln73_fu_198_p2 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1)))) begin
        lit_count_1_fu_74 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_Val2_s_fu_82 <= tmp_12;
        end else if ((1'b1 == ap_condition_296)) begin
            p_Val2_s_fu_82 <= boosterStream9_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln392_reg_337 <= add_ln392_fu_192_p2;
        icmp_ln73_reg_342 <= icmp_ln73_fu_198_p2;
        lit_count_1_load_reg_346 <= lit_count_1_fu_74;
        match_len_1_reg_332 <= {{p_Val2_s_fu_82[15:8]}};
        tCh_reg_327 <= tCh_fu_168_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln73_fu_198_p2 == 1'd1))) begin
        icmp_ln86_reg_351 <= icmp_ln86_fu_239_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln64_fu_153_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln64_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln73_fu_198_p2 == 1'd0))) begin
        ap_sig_allocacmp_i_4 = i_2_fu_217_p2;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op29_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        boosterStream9_blk_n = boosterStream9_empty_n;
    end else begin
        boosterStream9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op29_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        boosterStream9_read = 1'b1;
    end else begin
        boosterStream9_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op59_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln73_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        lenOffset_Stream3_blk_n = lenOffset_Stream3_full_n;
    end else begin
        lenOffset_Stream3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((ap_predicate_op59_write_state3 == 1'b1)) begin
            lenOffset_Stream3_din = 64'd257698037760;
        end else if ((icmp_ln73_reg_342 == 1'd0)) begin
            lenOffset_Stream3_din = p_Result_s_fu_272_p4;
        end else begin
            lenOffset_Stream3_din = 'bx;
        end
    end else begin
        lenOffset_Stream3_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op59_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln73_reg_342 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        lenOffset_Stream3_write = 1'b1;
    end else begin
        lenOffset_Stream3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lit_count_1_out_ap_vld = 1'b1;
    end else begin
        lit_count_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln73_reg_342 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lit_outStream2_blk_n = lit_outStream2_full_n;
    end else begin
        lit_outStream2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln73_reg_342 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lit_outStream2_write = 1'b1;
    end else begin
        lit_outStream2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln392_fu_192_p2 = (tOffset_fu_182_p4 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op59_write_state3 == 1'b1) & (lenOffset_Stream3_full_n == 1'b0)) | ((lit_outStream2_full_n == 1'b0) & (icmp_ln73_reg_342 == 1'd1)) | ((icmp_ln73_reg_342 == 1'd0) & (lenOffset_Stream3_full_n == 1'b0)))) | ((ap_predicate_op29_read_state2 == 1'b1) & (boosterStream9_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op59_write_state3 == 1'b1) & (lenOffset_Stream3_full_n == 1'b0)) | ((lit_outStream2_full_n == 1'b0) & (icmp_ln73_reg_342 == 1'd1)) | ((icmp_ln73_reg_342 == 1'd0) & (lenOffset_Stream3_full_n == 1'b0)))) | ((ap_predicate_op29_read_state2 == 1'b1) & (boosterStream9_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((ap_predicate_op59_write_state3 == 1'b1) & (lenOffset_Stream3_full_n == 1'b0)) | ((lit_outStream2_full_n == 1'b0) & (icmp_ln73_reg_342 == 1'd1)) | ((icmp_ln73_reg_342 == 1'd0) & (lenOffset_Stream3_full_n == 1'b0)))) | ((ap_predicate_op29_read_state2 == 1'b1) & (boosterStream9_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op29_read_state2 == 1'b1) & (boosterStream9_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op59_write_state3 == 1'b1) & (lenOffset_Stream3_full_n == 1'b0)) | ((lit_outStream2_full_n == 1'b0) & (icmp_ln73_reg_342 == 1'd1)) | ((icmp_ln73_reg_342 == 1'd0) & (lenOffset_Stream3_full_n == 1'b0)));
end

always @ (*) begin
    ap_condition_293 = ((icmp_ln64_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln73_fu_198_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_296 = ((icmp_ln67_fu_158_p2 == 1'd1) & (icmp_ln64_fu_153_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op29_read_state2 = ((icmp_ln67_fu_158_p2 == 1'd1) & (icmp_ln64_fu_153_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op59_write_state3 = ((icmp_ln86_reg_351 == 1'd1) & (icmp_ln73_reg_342 == 1'd1));
end

assign i_2_fu_217_p2 = (i_fu_78 + zext_ln81_fu_213_p1);

assign i_5_fu_258_p2 = (ap_sig_allocacmp_i_4 + 32'd1);

assign icmp_ln64_fu_153_p2 = ((i_fu_78 < input_size) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_158_p2 = ((i_fu_78 < sub) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_198_p2 = ((match_len_1_fu_172_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_239_p2 = ((lit_count_fu_233_p2 == 32'd60) ? 1'b1 : 1'b0);

assign lit_count_1_out = lit_count_1_fu_74;

assign lit_count_fu_233_p2 = (lit_count_1_fu_74 + 32'd1);

assign lit_outStream2_din = tCh_reg_327;

assign match_len_1_fu_172_p4 = {{p_Val2_s_fu_82[15:8]}};

assign match_len_fu_207_p2 = ($signed(match_len_1_fu_172_p4) + $signed(8'd255));

assign p_Result_s_fu_272_p4 = {{{lit_count_1_load_reg_346}, {add_ln392_reg_337}}, {zext_ln388_fu_269_p1}};

assign tCh_fu_168_p1 = p_Val2_s_fu_82[7:0];

assign tOffset_fu_182_p4 = {{p_Val2_s_fu_82[31:16]}};

assign zext_ln388_fu_269_p1 = match_len_1_reg_332;

assign zext_ln81_fu_213_p1 = match_len_fu_207_p2;

endmodule //snappyCompressStream_snappyCompressPart1_60_64_8_Pipeline_snappy_divide
