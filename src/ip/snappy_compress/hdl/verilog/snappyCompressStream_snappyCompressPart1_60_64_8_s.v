// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module snappyCompressStream_snappyCompressPart1_60_64_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        boosterStream9_dout,
        boosterStream9_num_data_valid,
        boosterStream9_fifo_cap,
        boosterStream9_empty_n,
        boosterStream9_read,
        lit_outStream2_din,
        lit_outStream2_num_data_valid,
        lit_outStream2_fifo_cap,
        lit_outStream2_full_n,
        lit_outStream2_write,
        lenOffset_Stream3_din,
        lenOffset_Stream3_num_data_valid,
        lenOffset_Stream3_fifo_cap,
        lenOffset_Stream3_full_n,
        lenOffset_Stream3_write,
        input_size,
        input_size_c_din,
        input_size_c_num_data_valid,
        input_size_c_fifo_cap,
        input_size_c_full_n,
        input_size_c_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] boosterStream9_dout;
input  [3:0] boosterStream9_num_data_valid;
input  [3:0] boosterStream9_fifo_cap;
input   boosterStream9_empty_n;
output   boosterStream9_read;
output  [7:0] lit_outStream2_din;
input  [6:0] lit_outStream2_num_data_valid;
input  [6:0] lit_outStream2_fifo_cap;
input   lit_outStream2_full_n;
output   lit_outStream2_write;
output  [63:0] lenOffset_Stream3_din;
input  [5:0] lenOffset_Stream3_num_data_valid;
input  [5:0] lenOffset_Stream3_fifo_cap;
input   lenOffset_Stream3_full_n;
output   lenOffset_Stream3_write;
input  [31:0] input_size;
output  [31:0] input_size_c_din;
input  [5:0] input_size_c_num_data_valid;
input  [5:0] input_size_c_fifo_cap;
input   input_size_c_full_n;
output   input_size_c_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg boosterStream9_read;
reg lit_outStream2_write;
reg[63:0] lenOffset_Stream3_din;
reg lenOffset_Stream3_write;
reg input_size_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    boosterStream9_blk_n;
wire   [0:0] icmp_ln53_fu_114_p2;
reg    lenOffset_Stream3_blk_n;
wire    ap_CS_fsm_state4;
reg   [0:0] icmp_ln53_reg_150;
wire   [31:0] lit_count_1_loc_load_load_fu_126_p1;
reg    input_size_c_blk_n;
reg   [31:0] tmp_reg_154;
wire   [31:0] sub_fu_120_p2;
reg   [31:0] sub_reg_159;
wire    ap_CS_fsm_state2;
wire    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start;
wire    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_done;
wire    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_idle;
wire    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_ready;
wire    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_boosterStream9_read;
wire   [63:0] grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_din;
wire    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_write;
wire   [7:0] grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_din;
wire    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_write;
wire   [31:0] grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out;
wire    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out_ap_vld;
wire   [63:0] p_Result_s_fu_129_p3;
reg   [63:0] ap_phi_mux_tmpValue_V_1_phi_fu_92_p4;
reg    ap_predicate_op28_write_state4;
reg    ap_block_state4;
reg    grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg = 1'b0;
end

snappyCompressStream_snappyCompressPart1_60_64_8_Pipeline_snappy_divide grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start),
    .ap_done(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_done),
    .ap_idle(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_idle),
    .ap_ready(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_ready),
    .boosterStream9_dout(boosterStream9_dout),
    .boosterStream9_num_data_valid(4'd0),
    .boosterStream9_fifo_cap(4'd0),
    .boosterStream9_empty_n(boosterStream9_empty_n),
    .boosterStream9_read(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_boosterStream9_read),
    .lenOffset_Stream3_din(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_din),
    .lenOffset_Stream3_num_data_valid(6'd0),
    .lenOffset_Stream3_fifo_cap(6'd0),
    .lenOffset_Stream3_full_n(lenOffset_Stream3_full_n),
    .lenOffset_Stream3_write(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_write),
    .lit_outStream2_din(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_din),
    .lit_outStream2_num_data_valid(7'd0),
    .lit_outStream2_fifo_cap(7'd0),
    .lit_outStream2_full_n(lit_outStream2_full_n),
    .lit_outStream2_write(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_write),
    .tmp_12(tmp_reg_154),
    .input_size(input_size),
    .sub(sub_reg_159),
    .lit_count_1_out(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out),
    .lit_count_1_out_ap_vld(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((lenOffset_Stream3_full_n == 1'b0) & (ap_predicate_op28_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg <= 1'b1;
        end else if ((grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_ready == 1'b1)) begin
            grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln53_reg_150 <= icmp_ln53_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sub_reg_159 <= sub_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln53_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_154 <= boosterStream9_dout;
    end
end

always @ (*) begin
    if (((input_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0) | ((icmp_ln53_fu_114_p2 == 1'd0) & (boosterStream9_empty_n == 1'b0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((lenOffset_Stream3_full_n == 1'b0) & (ap_predicate_op28_write_state4 == 1'b1))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((lenOffset_Stream3_full_n == 1'b0) & (ap_predicate_op28_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln53_reg_150 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((lit_count_1_loc_load_load_fu_126_p1 == 32'd60)) begin
            ap_phi_mux_tmpValue_V_1_phi_fu_92_p4 = 64'd257698037760;
        end else if ((~(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out == 32'd0) & ~(lit_count_1_loc_load_load_fu_126_p1 == 32'd60))) begin
            ap_phi_mux_tmpValue_V_1_phi_fu_92_p4 = p_Result_s_fu_129_p3;
        end else begin
            ap_phi_mux_tmpValue_V_1_phi_fu_92_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_tmpValue_V_1_phi_fu_92_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (icmp_ln53_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        boosterStream9_blk_n = boosterStream9_empty_n;
    end else begin
        boosterStream9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0) | ((icmp_ln53_fu_114_p2 == 1'd0) & (boosterStream9_empty_n == 1'b0))) & (icmp_ln53_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        boosterStream9_read = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        boosterStream9_read = grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_boosterStream9_read;
    end else begin
        boosterStream9_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_c_blk_n = input_size_c_full_n;
    end else begin
        input_size_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0) | ((icmp_ln53_fu_114_p2 == 1'd0) & (boosterStream9_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_c_write = 1'b1;
    end else begin
        input_size_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((lenOffset_Stream3_full_n == 1'b0) & (ap_predicate_op28_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out == 32'd0) & (icmp_ln53_reg_150 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        lenOffset_Stream3_blk_n = lenOffset_Stream3_full_n;
    end else begin
        lenOffset_Stream3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((lenOffset_Stream3_full_n == 1'b0) & (ap_predicate_op28_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op28_write_state4 == 1'b1))) begin
        lenOffset_Stream3_din = ap_phi_mux_tmpValue_V_1_phi_fu_92_p4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lenOffset_Stream3_din = grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_din;
    end else begin
        lenOffset_Stream3_din = grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_din;
    end
end

always @ (*) begin
    if ((~((lenOffset_Stream3_full_n == 1'b0) & (ap_predicate_op28_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op28_write_state4 == 1'b1))) begin
        lenOffset_Stream3_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        lenOffset_Stream3_write = grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lenOffset_Stream3_write;
    end else begin
        lenOffset_Stream3_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        lit_outStream2_write = grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_write;
    end else begin
        lit_outStream2_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((input_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0) | ((icmp_ln53_fu_114_p2 == 1'd0) & (boosterStream9_empty_n == 1'b0))) & (icmp_ln53_fu_114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((input_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0) | ((icmp_ln53_fu_114_p2 == 1'd0) & (boosterStream9_empty_n == 1'b0))) & (icmp_ln53_fu_114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((lenOffset_Stream3_full_n == 1'b0) & (ap_predicate_op28_write_state4 == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((input_size_c_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0) | ((icmp_ln53_fu_114_p2 == 1'd0) & (boosterStream9_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4 = ((lenOffset_Stream3_full_n == 1'b0) & (ap_predicate_op28_write_state4 == 1'b1));
end

always @ (*) begin
    ap_predicate_op28_write_state4 = (~(grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out == 32'd0) & (icmp_ln53_reg_150 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start = grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_ap_start_reg;

assign icmp_ln53_fu_114_p2 = ((input_size == 32'd0) ? 1'b1 : 1'b0);

assign input_size_c_din = input_size;

assign lit_count_1_loc_load_load_fu_126_p1 = grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out;

assign lit_outStream2_din = grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_outStream2_din;

assign p_Result_s_fu_129_p3 = {{grp_snappyCompressPart1_60_64_8_Pipeline_snappy_divide_fu_100_lit_count_1_out}, {32'd0}};

assign start_out = real_start;

assign sub_fu_120_p2 = ($signed(input_size) + $signed(32'd4294967295));

endmodule //snappyCompressStream_snappyCompressPart1_60_64_8_s
