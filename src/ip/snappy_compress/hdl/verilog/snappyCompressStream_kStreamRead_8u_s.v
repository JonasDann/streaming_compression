// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module snappyCompressStream_kStreamRead_8u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        inaxistream_TDATA,
        inaxistream_TVALID,
        inaxistream_TREADY,
        inaxistream_TKEEP,
        inaxistream_TSTRB,
        inaxistream_TLAST,
        inStream11_din,
        inStream11_num_data_valid,
        inStream11_fifo_cap,
        inStream11_full_n,
        inStream11_write,
        input_size,
        input_size_ap_vld,
        input_size_ap_ack
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] inaxistream_TDATA;
input   inaxistream_TVALID;
output   inaxistream_TREADY;
input  [0:0] inaxistream_TKEEP;
input  [0:0] inaxistream_TSTRB;
input  [0:0] inaxistream_TLAST;
output  [7:0] inStream11_din;
input  [1:0] inStream11_num_data_valid;
input  [1:0] inStream11_fifo_cap;
input   inStream11_full_n;
output   inStream11_write;
input  [31:0] input_size;
input   input_size_ap_vld;
output   input_size_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inStream11_write;
reg input_size_ap_ack;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    inaxistream_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln49_fu_85_p2;
reg    inStream11_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg    input_size_blk_n;
reg   [31:0] input_size_read_reg_112;
reg   [7:0] tmp_data_V_reg_120;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [31:0] i_fu_48;
wire   [31:0] i_14_fu_90_p2;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_inaxistream_V_data_V_U_apdone_blk;
wire   [7:0] inaxistream_TDATA_int_regslice;
wire    inaxistream_TVALID_int_regslice;
reg    inaxistream_TREADY_int_regslice;
wire    regslice_both_inaxistream_V_data_V_U_ack_in;
wire    regslice_both_inaxistream_V_keep_V_U_apdone_blk;
wire   [0:0] inaxistream_TKEEP_int_regslice;
wire    regslice_both_inaxistream_V_keep_V_U_vld_out;
wire    regslice_both_inaxistream_V_keep_V_U_ack_in;
wire    regslice_both_inaxistream_V_strb_V_U_apdone_blk;
wire   [0:0] inaxistream_TSTRB_int_regslice;
wire    regslice_both_inaxistream_V_strb_V_U_vld_out;
wire    regslice_both_inaxistream_V_strb_V_U_ack_in;
wire    regslice_both_inaxistream_V_last_V_U_apdone_blk;
wire   [0:0] inaxistream_TLAST_int_regslice;
wire    regslice_both_inaxistream_V_last_V_U_vld_out;
wire    regslice_both_inaxistream_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

snappyCompressStream_regslice_both #(
    .DataWidth( 8 ))
regslice_both_inaxistream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inaxistream_TDATA),
    .vld_in(inaxistream_TVALID),
    .ack_in(regslice_both_inaxistream_V_data_V_U_ack_in),
    .data_out(inaxistream_TDATA_int_regslice),
    .vld_out(inaxistream_TVALID_int_regslice),
    .ack_out(inaxistream_TREADY_int_regslice),
    .apdone_blk(regslice_both_inaxistream_V_data_V_U_apdone_blk)
);

snappyCompressStream_regslice_both #(
    .DataWidth( 1 ))
regslice_both_inaxistream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inaxistream_TKEEP),
    .vld_in(inaxistream_TVALID),
    .ack_in(regslice_both_inaxistream_V_keep_V_U_ack_in),
    .data_out(inaxistream_TKEEP_int_regslice),
    .vld_out(regslice_both_inaxistream_V_keep_V_U_vld_out),
    .ack_out(inaxistream_TREADY_int_regslice),
    .apdone_blk(regslice_both_inaxistream_V_keep_V_U_apdone_blk)
);

snappyCompressStream_regslice_both #(
    .DataWidth( 1 ))
regslice_both_inaxistream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inaxistream_TSTRB),
    .vld_in(inaxistream_TVALID),
    .ack_in(regslice_both_inaxistream_V_strb_V_U_ack_in),
    .data_out(inaxistream_TSTRB_int_regslice),
    .vld_out(regslice_both_inaxistream_V_strb_V_U_vld_out),
    .ack_out(inaxistream_TREADY_int_regslice),
    .apdone_blk(regslice_both_inaxistream_V_strb_V_U_apdone_blk)
);

snappyCompressStream_regslice_both #(
    .DataWidth( 1 ))
regslice_both_inaxistream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(inaxistream_TLAST),
    .vld_in(inaxistream_TVALID),
    .ack_in(regslice_both_inaxistream_V_last_V_U_ack_in),
    .data_out(inaxistream_TLAST_int_regslice),
    .vld_out(regslice_both_inaxistream_V_last_V_U_vld_out),
    .ack_out(inaxistream_TREADY_int_regslice),
    .apdone_blk(regslice_both_inaxistream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_48 <= 32'd0;
    end else if (((icmp_ln49_fu_85_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_48 <= i_14_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        input_size_read_reg_112 <= input_size;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_85_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_reg_120 <= inaxistream_TDATA_int_regslice;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln49_fu_85_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream11_blk_n = inStream11_full_n;
    end else begin
        inStream11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inStream11_write = 1'b1;
    end else begin
        inStream11_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_85_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inaxistream_TDATA_blk_n = inaxistream_TVALID_int_regslice;
    end else begin
        inaxistream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_85_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        inaxistream_TREADY_int_regslice = 1'b1;
    end else begin
        inaxistream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_ap_ack = 1'b1;
    end else begin
        input_size_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_blk_n = input_size_ap_vld;
    end else begin
        input_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln49_fu_85_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln49_fu_85_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (inStream11_full_n == 1'b0)) | ((icmp_ln49_fu_85_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (inaxistream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (inStream11_full_n == 1'b0)) | ((icmp_ln49_fu_85_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (inaxistream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (inStream11_full_n == 1'b0)) | ((icmp_ln49_fu_85_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (inaxistream_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln49_fu_85_p2 == 1'd0) & (inaxistream_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (inStream11_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_14_fu_90_p2 = (i_fu_48 + 32'd1);

assign icmp_ln49_fu_85_p2 = ((i_fu_48 == input_size_read_reg_112) ? 1'b1 : 1'b0);

assign inStream11_din = tmp_data_V_reg_120;

assign inaxistream_TREADY = regslice_both_inaxistream_V_data_V_U_ack_in;

endmodule //snappyCompressStream_kStreamRead_8u_s
