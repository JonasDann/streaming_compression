// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module snappyCompressStream_lzBooster_64_16384_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        bestMatchStream8_dout,
        bestMatchStream8_num_data_valid,
        bestMatchStream8_fifo_cap,
        bestMatchStream8_empty_n,
        bestMatchStream8_read,
        boosterStream9_din,
        boosterStream9_num_data_valid,
        boosterStream9_fifo_cap,
        boosterStream9_full_n,
        boosterStream9_write,
        input_size,
        input_size_ap_vld,
        input_size_ap_ack
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] bestMatchStream8_dout;
input  [3:0] bestMatchStream8_num_data_valid;
input  [3:0] bestMatchStream8_fifo_cap;
input   bestMatchStream8_empty_n;
output   bestMatchStream8_read;
output  [31:0] boosterStream9_din;
input  [3:0] boosterStream9_num_data_valid;
input  [3:0] boosterStream9_fifo_cap;
input   boosterStream9_full_n;
output   boosterStream9_write;
input  [31:0] input_size;
input   input_size_ap_vld;
output   input_size_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bestMatchStream8_read;
reg[31:0] boosterStream9_din;
reg boosterStream9_write;
reg input_size_ap_ack;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    bestMatchStream8_blk_n;
wire    ap_CS_fsm_state5;
reg    boosterStream9_blk_n;
wire    ap_CS_fsm_state3;
reg    input_size_blk_n;
wire   [0:0] icmp_ln559_fu_92_p2;
reg   [0:0] icmp_ln559_reg_140;
wire   [31:0] sub_fu_98_p2;
reg   [31:0] sub_reg_151;
wire    grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_start;
wire    grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_done;
wire    grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_idle;
wire    grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_ready;
wire    grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_bestMatchStream8_read;
wire   [31:0] grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_boosterStream9_din;
wire    grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_boosterStream9_write;
wire   [31:0] grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_outValue_V_11_out;
wire    grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_outValue_V_11_out_ap_vld;
reg    grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_start_reg;
reg    ap_block_state1_ignore_call3;
wire    ap_CS_fsm_state2;
reg   [6:0] i_4_fu_58;
wire   [6:0] i_10_fu_123_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln617_fu_117_p2;
reg    ap_block_state1;
reg    ap_block_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_start_reg = 1'b0;
end

snappyCompressStream_lzBooster_64_16384_64_Pipeline_lz_booster grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_start),
    .ap_done(grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_done),
    .ap_idle(grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_idle),
    .ap_ready(grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_ready),
    .bestMatchStream8_dout(bestMatchStream8_dout),
    .bestMatchStream8_num_data_valid(4'd0),
    .bestMatchStream8_fifo_cap(4'd0),
    .bestMatchStream8_empty_n(bestMatchStream8_empty_n),
    .bestMatchStream8_read(grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_bestMatchStream8_read),
    .boosterStream9_din(grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_boosterStream9_din),
    .boosterStream9_num_data_valid(4'd0),
    .boosterStream9_fifo_cap(4'd0),
    .boosterStream9_full_n(boosterStream9_full_n),
    .boosterStream9_write(grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_boosterStream9_write),
    .sub(sub_reg_151),
    .outValue_V_11_out(grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_outValue_V_11_out),
    .outValue_V_11_out_ap_vld(grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_outValue_V_11_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln559_reg_140 == 1'd1) | (icmp_ln617_fu_117_p2 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if ((~((input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (icmp_ln559_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_ready == 1'b1)) begin
            grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (icmp_ln559_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_4_fu_58 <= 7'd0;
    end else if (((icmp_ln559_reg_140 == 1'd0) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln617_fu_117_p2 == 1'd0))) begin
        i_4_fu_58 <= i_10_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln559_reg_140 <= icmp_ln559_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln559_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        sub_reg_151 <= sub_fu_98_p2;
    end
end

always @ (*) begin
    if (((input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((boosterStream9_full_n == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((boosterStream9_full_n == 1'b0) | (bestMatchStream8_empty_n == 1'b0))) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln559_reg_140 == 1'd1) | (icmp_ln617_fu_117_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln559_reg_140 == 1'd1) | (icmp_ln617_fu_117_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bestMatchStream8_blk_n = bestMatchStream8_empty_n;
    end else begin
        bestMatchStream8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((boosterStream9_full_n == 1'b0) | (bestMatchStream8_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        bestMatchStream8_read = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bestMatchStream8_read = grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_bestMatchStream8_read;
    end else begin
        bestMatchStream8_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        boosterStream9_blk_n = boosterStream9_full_n;
    end else begin
        boosterStream9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((boosterStream9_full_n == 1'b0) | (bestMatchStream8_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        boosterStream9_din = bestMatchStream8_dout;
    end else if (((boosterStream9_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        boosterStream9_din = grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_outValue_V_11_out;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        boosterStream9_din = grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_boosterStream9_din;
    end else begin
        boosterStream9_din = grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_boosterStream9_din;
    end
end

always @ (*) begin
    if (((~((boosterStream9_full_n == 1'b0) | (bestMatchStream8_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)) | ((boosterStream9_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        boosterStream9_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        boosterStream9_write = grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_boosterStream9_write;
    end else begin
        boosterStream9_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_ap_ack = 1'b1;
    end else begin
        input_size_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_size_blk_n = input_size_ap_vld;
    end else begin
        input_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (icmp_ln559_fu_92_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (icmp_ln559_fu_92_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((boosterStream9_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln559_reg_140 == 1'd1) | (icmp_ln617_fu_117_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((boosterStream9_full_n == 1'b0) | (bestMatchStream8_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call3 = ((input_size_ap_vld == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((boosterStream9_full_n == 1'b0) | (bestMatchStream8_empty_n == 1'b0));
end

assign grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_start = grp_lzBooster_64_16384_64_Pipeline_lz_booster_fu_82_ap_start_reg;

assign i_10_fu_123_p2 = (i_4_fu_58 + 7'd1);

assign icmp_ln559_fu_92_p2 = ((input_size == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln617_fu_117_p2 = ((i_4_fu_58 == 7'd64) ? 1'b1 : 1'b0);

assign sub_fu_98_p2 = ($signed(input_size) + $signed(32'd4294967232));

endmodule //snappyCompressStream_lzBooster_64_16384_64_s
